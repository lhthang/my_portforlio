define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/widgets/scroll_view.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/rendering/viewport_offset.dart', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__infinite_listview__infinite_listview_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__widgets__scroll_view$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__rendering__viewport_offset$46dart, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const scroll_view = packages__flutter__src__widgets__scroll_view$46dart.src__widgets__scroll_view;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const scroll_physics = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_physics;
  const scrollable = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scrollable;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const viewport = packages__flutter__src__widgets__widget_span$46dart.src__widgets__viewport;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const sliver = packages__flutter__src__widgets__widget_span$46dart.src__widgets__sliver;
  const scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_controller;
  const scroll_position_with_single_context = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_position_with_single_context;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var infinite_listview = Object.create(dart.library);
  var $truncate = dartx.truncate;
  var $isOdd = dartx.isOdd;
  var $isEven = dartx.isEven;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextToStack: () => (T.BuildContextToStack = dart.constFn(dart.fnType(basic.Stack, [framework.BuildContext])))(),
    BuildContextAndViewportOffsetToBuilder: () => (T.BuildContextAndViewportOffsetToBuilder = dart.constFn(dart.fnType(basic.Builder, [framework.BuildContext, viewport_offset.ViewportOffset])))(),
    BuildContextAndintToWidget: () => (T.BuildContextAndintToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, core.int])))(),
    EnumPropertyOfAxis: () => (T.EnumPropertyOfAxis = dart.constFn(diagnostics.EnumProperty$(basic_types.Axis)))(),
    DiagnosticsPropertyOfScrollController: () => (T.DiagnosticsPropertyOfScrollController = dart.constFn(diagnostics.DiagnosticsProperty$(scroll_controller.ScrollController)))(),
    DiagnosticsPropertyOfScrollPhysics: () => (T.DiagnosticsPropertyOfScrollPhysics = dart.constFn(diagnostics.DiagnosticsProperty$(scroll_physics.ScrollPhysics)))(),
    DiagnosticsPropertyOfEdgeInsetsGeometry: () => (T.DiagnosticsPropertyOfEdgeInsetsGeometry = dart.constFn(diagnostics.DiagnosticsProperty$(edge_insets.EdgeInsetsGeometry)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: scroll_view.ScrollViewKeyboardDismissBehavior.prototype,
        [_name$0]: "ScrollViewKeyboardDismissBehavior.manual",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$1]: "Clip.hardEdge",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: scroll_physics.AlwaysScrollableScrollPhysics.prototype,
        [ScrollPhysics_parent]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 17,
        [_Location_line]: 180,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "anchor",
        [_Location_column]: 17,
        [_Location_line]: 181,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "offset",
        [_Location_column]: 17,
        [_Location_line]: 182,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "slivers",
        [_Location_column]: 17,
        [_Location_line]: 183,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cacheExtent",
        [_Location_column]: 17,
        [_Location_line]: 184,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11], T._LocationL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 179,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 17,
        [_Location_line]: 187,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "anchor",
        [_Location_column]: 17,
        [_Location_line]: 188,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "offset",
        [_Location_column]: 17,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "slivers",
        [_Location_column]: 17,
        [_Location_line]: 190,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cacheExtent",
        [_Location_column]: 17,
        [_Location_line]: 191,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.constList([C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18], T._LocationL());
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[13] || CT.C13,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 186,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 178,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.constList([C[21] || CT.C21], T._LocationL());
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[20] || CT.C20,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 177,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 24,
        [_Location_line]: 160,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.constList([C[24] || CT.C24], T._LocationL());
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[23] || CT.C23,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 160,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 7,
        [_Location_line]: 156,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 157,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "physics",
        [_Location_column]: 7,
        [_Location_line]: 158,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewportBuilder",
        [_Location_column]: 7,
        [_Location_line]: 159,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30], T._LocationL());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[26] || CT.C26,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 155,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 17,
        [_Location_line]: 215,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "itemExtent",
        [_Location_column]: 17,
        [_Location_line]: 216,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.constList([C[33] || CT.C33, C[34] || CT.C34], T._LocationL());
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[32] || CT.C32,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 214,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 17,
        [_Location_line]: 219,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.constList([C[37] || CT.C37], T._LocationL());
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[36] || CT.C36,
        [_Location_name]: null,
        [_Location_column]: 15,
        [_Location_line]: 218,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 9,
        [_Location_line]: 210,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "sliver",
        [_Location_column]: 9,
        [_Location_line]: 213,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.constList([C[40] || CT.C40, C[41] || CT.C41], T._LocationL());
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[39] || CT.C39,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 209,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart"
      });
    }
  }, false);
  var C = Array(42).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/infinite_listview-1.1.0/lib/infinite_listview.dart",
    "package:infinite_listview/infinite_listview.dart"
  ];
  var scrollDirection$ = dart.privateName(infinite_listview, "InfiniteListView.scrollDirection");
  var reverse$ = dart.privateName(infinite_listview, "InfiniteListView.reverse");
  var controller$ = dart.privateName(infinite_listview, "InfiniteListView.controller");
  var physics$ = dart.privateName(infinite_listview, "InfiniteListView.physics");
  var padding$ = dart.privateName(infinite_listview, "InfiniteListView.padding");
  var itemBuilder$ = dart.privateName(infinite_listview, "InfiniteListView.itemBuilder");
  var separatorBuilder$ = dart.privateName(infinite_listview, "InfiniteListView.separatorBuilder");
  var itemCount$ = dart.privateName(infinite_listview, "InfiniteListView.itemCount");
  var itemExtent$ = dart.privateName(infinite_listview, "InfiniteListView.itemExtent");
  var cacheExtent$ = dart.privateName(infinite_listview, "InfiniteListView.cacheExtent");
  var anchor$ = dart.privateName(infinite_listview, "InfiniteListView.anchor");
  var addAutomaticKeepAlives$ = dart.privateName(infinite_listview, "InfiniteListView.addAutomaticKeepAlives");
  var addRepaintBoundaries$ = dart.privateName(infinite_listview, "InfiniteListView.addRepaintBoundaries");
  var addSemanticIndexes$ = dart.privateName(infinite_listview, "InfiniteListView.addSemanticIndexes");
  var dragStartBehavior$ = dart.privateName(infinite_listview, "InfiniteListView.dragStartBehavior");
  var keyboardDismissBehavior$ = dart.privateName(infinite_listview, "InfiniteListView.keyboardDismissBehavior");
  var restorationId$ = dart.privateName(infinite_listview, "InfiniteListView.restorationId");
  var clipBehavior$ = dart.privateName(infinite_listview, "InfiniteListView.clipBehavior");
  var _name = dart.privateName(basic_types, "_name");
  var _name$ = dart.privateName(recognizer, "_name");
  var _name$0 = dart.privateName(scroll_view, "_name");
  var _name$1 = dart.privateName(ui, "_name");
  infinite_listview.InfiniteListView = class InfiniteListView extends framework.StatefulWidget {
    get scrollDirection() {
      return this[scrollDirection$];
    }
    set scrollDirection(value) {
      super.scrollDirection = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get physics() {
      return this[physics$];
    }
    set physics(value) {
      super.physics = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get separatorBuilder() {
      return this[separatorBuilder$];
    }
    set separatorBuilder(value) {
      super.separatorBuilder = value;
    }
    get itemCount() {
      return this[itemCount$];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    get itemExtent() {
      return this[itemExtent$];
    }
    set itemExtent(value) {
      super.itemExtent = value;
    }
    get cacheExtent() {
      return this[cacheExtent$];
    }
    set cacheExtent(value) {
      super.cacheExtent = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get addAutomaticKeepAlives() {
      return this[addAutomaticKeepAlives$];
    }
    set addAutomaticKeepAlives(value) {
      super.addAutomaticKeepAlives = value;
    }
    get addRepaintBoundaries() {
      return this[addRepaintBoundaries$];
    }
    set addRepaintBoundaries(value) {
      super.addRepaintBoundaries = value;
    }
    get addSemanticIndexes() {
      return this[addSemanticIndexes$];
    }
    set addSemanticIndexes(value) {
      super.addSemanticIndexes = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get keyboardDismissBehavior() {
      return this[keyboardDismissBehavior$];
    }
    set keyboardDismissBehavior(value) {
      super.keyboardDismissBehavior = value;
    }
    get restorationId() {
      return this[restorationId$];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    createState() {
      return new infinite_listview._InfiniteListViewState.new();
    }
  };
  (infinite_listview.InfiniteListView.builder = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[0] || CT.C0;
    if (scrollDirection == null) dart.nullFailed(I[0], 18, 10, "scrollDirection");
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    if (reverse == null) dart.nullFailed(I[0], 19, 10, "reverse");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemExtent = opts && 'itemExtent' in opts ? opts.itemExtent : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    if (itemBuilder == null) dart.nullFailed(I[0], 24, 19, "itemBuilder");
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let addAutomaticKeepAlives = opts && 'addAutomaticKeepAlives' in opts ? opts.addAutomaticKeepAlives : true;
    if (addAutomaticKeepAlives == null) dart.nullFailed(I[0], 26, 10, "addAutomaticKeepAlives");
    let addRepaintBoundaries = opts && 'addRepaintBoundaries' in opts ? opts.addRepaintBoundaries : true;
    if (addRepaintBoundaries == null) dart.nullFailed(I[0], 27, 10, "addRepaintBoundaries");
    let addSemanticIndexes = opts && 'addSemanticIndexes' in opts ? opts.addSemanticIndexes : true;
    if (addSemanticIndexes == null) dart.nullFailed(I[0], 28, 10, "addSemanticIndexes");
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    if (anchor == null) dart.nullFailed(I[0], 30, 10, "anchor");
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[1] || CT.C1;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 31, 10, "dragStartBehavior");
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[2] || CT.C2;
    if (keyboardDismissBehavior == null) dart.nullFailed(I[0], 32, 10, "keyboardDismissBehavior");
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[3] || CT.C3;
    if (clipBehavior == null) dart.nullFailed(I[0], 34, 10, "clipBehavior");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[controller$] = controller;
    this[physics$] = physics;
    this[padding$] = padding;
    this[itemExtent$] = itemExtent;
    this[itemBuilder$] = itemBuilder;
    this[itemCount$] = itemCount;
    this[addAutomaticKeepAlives$] = addAutomaticKeepAlives;
    this[addRepaintBoundaries$] = addRepaintBoundaries;
    this[addSemanticIndexes$] = addSemanticIndexes;
    this[cacheExtent$] = cacheExtent;
    this[anchor$] = anchor;
    this[dragStartBehavior$] = dragStartBehavior;
    this[keyboardDismissBehavior$] = keyboardDismissBehavior;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[separatorBuilder$] = null;
    infinite_listview.InfiniteListView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = infinite_listview.InfiniteListView.prototype;
  (infinite_listview.InfiniteListView.separated = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C[0] || CT.C0;
    if (scrollDirection == null) dart.nullFailed(I[0], 41, 10, "scrollDirection");
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    if (reverse == null) dart.nullFailed(I[0], 42, 10, "reverse");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    if (itemBuilder == null) dart.nullFailed(I[0], 46, 19, "itemBuilder");
    let separatorBuilder = opts && 'separatorBuilder' in opts ? opts.separatorBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    let addAutomaticKeepAlives = opts && 'addAutomaticKeepAlives' in opts ? opts.addAutomaticKeepAlives : true;
    if (addAutomaticKeepAlives == null) dart.nullFailed(I[0], 49, 10, "addAutomaticKeepAlives");
    let addRepaintBoundaries = opts && 'addRepaintBoundaries' in opts ? opts.addRepaintBoundaries : true;
    if (addRepaintBoundaries == null) dart.nullFailed(I[0], 50, 10, "addRepaintBoundaries");
    let addSemanticIndexes = opts && 'addSemanticIndexes' in opts ? opts.addSemanticIndexes : true;
    if (addSemanticIndexes == null) dart.nullFailed(I[0], 51, 10, "addSemanticIndexes");
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    if (anchor == null) dart.nullFailed(I[0], 53, 10, "anchor");
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[1] || CT.C1;
    if (dragStartBehavior == null) dart.nullFailed(I[0], 54, 10, "dragStartBehavior");
    let keyboardDismissBehavior = opts && 'keyboardDismissBehavior' in opts ? opts.keyboardDismissBehavior : C[2] || CT.C2;
    if (keyboardDismissBehavior == null) dart.nullFailed(I[0], 55, 10, "keyboardDismissBehavior");
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[3] || CT.C3;
    if (clipBehavior == null) dart.nullFailed(I[0], 57, 10, "clipBehavior");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[controller$] = controller;
    this[physics$] = physics;
    this[padding$] = padding;
    this[itemBuilder$] = itemBuilder;
    this[separatorBuilder$] = separatorBuilder;
    this[itemCount$] = itemCount;
    this[addAutomaticKeepAlives$] = addAutomaticKeepAlives;
    this[addRepaintBoundaries$] = addRepaintBoundaries;
    this[addSemanticIndexes$] = addSemanticIndexes;
    this[cacheExtent$] = cacheExtent;
    this[anchor$] = anchor;
    this[dragStartBehavior$] = dragStartBehavior;
    this[keyboardDismissBehavior$] = keyboardDismissBehavior;
    this[restorationId$] = restorationId;
    this[clipBehavior$] = clipBehavior;
    this[itemExtent$] = null;
    infinite_listview.InfiniteListView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = infinite_listview.InfiniteListView.prototype;
  dart.addTypeTests(infinite_listview.InfiniteListView);
  dart.addTypeCaches(infinite_listview.InfiniteListView);
  dart.setMethodSignature(infinite_listview.InfiniteListView, () => ({
    __proto__: dart.getMethods(infinite_listview.InfiniteListView.__proto__),
    createState: dart.fnType(infinite_listview._InfiniteListViewState, [])
  }));
  dart.setLibraryUri(infinite_listview.InfiniteListView, I[1]);
  dart.setFieldSignature(infinite_listview.InfiniteListView, () => ({
    __proto__: dart.getFields(infinite_listview.InfiniteListView.__proto__),
    scrollDirection: dart.finalFieldType(basic_types.Axis),
    reverse: dart.finalFieldType(core.bool),
    controller: dart.finalFieldType(dart.nullable(infinite_listview.InfiniteScrollController)),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsets)),
    itemBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, core.int])),
    separatorBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, core.int]))),
    itemCount: dart.finalFieldType(dart.nullable(core.int)),
    itemExtent: dart.finalFieldType(dart.nullable(core.double)),
    cacheExtent: dart.finalFieldType(dart.nullable(core.double)),
    anchor: dart.finalFieldType(core.double),
    addAutomaticKeepAlives: dart.finalFieldType(core.bool),
    addRepaintBoundaries: dart.finalFieldType(core.bool),
    addSemanticIndexes: dart.finalFieldType(core.bool),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    keyboardDismissBehavior: dart.finalFieldType(scroll_view.ScrollViewKeyboardDismissBehavior),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  var _controller = dart.privateName(infinite_listview, "_controller");
  var _effectiveController = dart.privateName(infinite_listview, "_effectiveController");
  var _buildSlivers = dart.privateName(infinite_listview, "_buildSlivers");
  var _getDirection = dart.privateName(infinite_listview, "_getDirection");
  var ScrollPhysics_parent = dart.privateName(scroll_physics, "ScrollPhysics.parent");
  var _forceNegativePixels = dart.privateName(infinite_listview, "_forceNegativePixels");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  infinite_listview._InfiniteListViewState = class _InfiniteListViewState extends framework.State$(infinite_listview.InfiniteListView) {
    get [_effectiveController]() {
      let t0;
      t0 = this.widget.controller;
      return t0 == null ? dart.nullCheck(this[_controller]) : t0;
    }
    initState() {
      super.initState();
      if (this.widget.controller == null) {
        this[_controller] = new infinite_listview.InfiniteScrollController.new();
      }
    }
    didUpdateWidget(oldWidget) {
      infinite_listview.InfiniteListView.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[0], 133, 41, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (this.widget.controller == null && oldWidget.controller != null) {
        this[_controller] = new infinite_listview.InfiniteScrollController.new();
      } else if (this.widget.controller != null && oldWidget.controller == null) {
        dart.nullCheck(this[_controller]).dispose();
        this[_controller] = null;
      }
    }
    dispose() {
      let t0;
      t0 = this[_controller];
      t0 == null ? null : t0.dispose();
      super.dispose();
    }
    build(context) {
      let t0;
      if (context == null) dart.nullFailed(I[0], 150, 29, "context");
      let slivers = this[_buildSlivers](context, {negative: false});
      let negativeSlivers = this[_buildSlivers](context, {negative: true});
      let axisDirection = this[_getDirection](context);
      let scrollPhysics = (t0 = this.widget.physics, t0 == null ? C[4] || CT.C4 : t0);
      return new scrollable.Scrollable.new({axisDirection: axisDirection, controller: this[_effectiveController], physics: scrollPhysics, viewportBuilder: dart.fn((context, offset) => {
          if (context == null) dart.nullFailed(I[0], 159, 38, "context");
          if (offset == null) dart.nullFailed(I[0], 159, 62, "offset");
          return new basic.Builder.new({builder: dart.fn(context => {
              if (context == null) dart.nullFailed(I[0], 160, 47, "context");
              let state = dart.nullCheck(scrollable.Scrollable.of(context));
              let negativeOffset = new infinite_listview._InfiniteScrollPosition.new({physics: scrollPhysics, context: state, initialPixels: -dart.notNull(offset.pixels), keepScrollOffset: this[_effectiveController].keepScrollOffset, negativeScroll: true});
              offset.addListener(dart.fn(() => {
                negativeOffset[_forceNegativePixels](offset.pixels);
              }, T.VoidTovoid()));
              return new basic.Stack.new({children: T.JSArrayOfWidget().of([new viewport.Viewport.new({axisDirection: basic_types.flipAxisDirection(axisDirection), anchor: 1.0 - dart.notNull(this.widget.anchor), offset: negativeOffset, slivers: negativeSlivers, cacheExtent: this.widget.cacheExtent, $creationLocationd_0dea112b090073317d4: C[5] || CT.C5}), new viewport.Viewport.new({axisDirection: axisDirection, anchor: this.widget.anchor, offset: offset, slivers: slivers, cacheExtent: this.widget.cacheExtent, $creationLocationd_0dea112b090073317d4: C[12] || CT.C12})]), $creationLocationd_0dea112b090073317d4: C[19] || CT.C19});
            }, T.BuildContextToStack()), $creationLocationd_0dea112b090073317d4: C[22] || CT.C22});
        }, T.BuildContextAndViewportOffsetToBuilder()), $creationLocationd_0dea112b090073317d4: C[25] || CT.C25});
    }
    [_getDirection](context) {
      if (context == null) dart.nullFailed(I[0], 200, 44, "context");
      return basic.getAxisDirectionFromAxisReverseAndDirectionality(context, this.widget.scrollDirection, this.widget.reverse);
    }
    [_buildSlivers](context, opts) {
      let t0;
      if (context == null) dart.nullFailed(I[0], 205, 43, "context");
      let negative = opts && 'negative' in opts ? opts.negative : false;
      if (negative == null) dart.nullFailed(I[0], 205, 58, "negative");
      let itemExtent = this.widget.itemExtent;
      let padding = (t0 = this.widget.padding, t0 == null ? edge_insets.EdgeInsets.zero : t0);
      return T.JSArrayOfWidget().of([new basic.SliverPadding.new({padding: dart.test(negative) ? padding['-'](new edge_insets.EdgeInsets.only({bottom: padding.bottom})) : padding['-'](new edge_insets.EdgeInsets.only({top: padding.top})), sliver: itemExtent != null ? new sliver.SliverFixedExtentList.new({delegate: dart.test(negative) ? this.negativeChildrenDelegate : this.positiveChildrenDelegate, itemExtent: itemExtent, $creationLocationd_0dea112b090073317d4: C[31] || CT.C31}) : new sliver.SliverList.new({delegate: dart.test(negative) ? this.negativeChildrenDelegate : this.positiveChildrenDelegate, $creationLocationd_0dea112b090073317d4: C[35] || CT.C35}), $creationLocationd_0dea112b090073317d4: C[38] || CT.C38})]);
    }
    get negativeChildrenDelegate() {
      return new sliver.SliverChildBuilderDelegate.new(dart.fn((context, index) => {
        let t2, t1, t0, t2$, t1$, t0$;
        if (context == null) dart.nullFailed(I[0], 227, 21, "context");
        if (index == null) dart.nullFailed(I[0], 227, 34, "index");
        let separatorBuilder = this.widget.separatorBuilder;
        if (separatorBuilder != null) {
          let itemIndex = ((-1 - dart.notNull(index)) / 2)[$truncate]();
          return index[$isOdd] ? (t0 = this.widget, t1 = context, t2 = itemIndex, t0.itemBuilder(t1, t2)) : separatorBuilder(context, itemIndex);
        } else {
          t0$ = this.widget;
          t1$ = context;
          t2$ = -1 - dart.notNull(index);
          return t0$.itemBuilder(t1$, t2$);
        }
      }, T.BuildContextAndintToWidget()), {childCount: this.widget.itemCount, addAutomaticKeepAlives: this.widget.addAutomaticKeepAlives, addRepaintBoundaries: this.widget.addRepaintBoundaries});
    }
    get positiveChildrenDelegate() {
      let separatorBuilder = this.widget.separatorBuilder;
      let itemCount = this.widget.itemCount;
      return new sliver.SliverChildBuilderDelegate.new(separatorBuilder != null ? dart.fn((context, index) => {
        let t2, t1, t0;
        if (context == null) dart.nullFailed(I[0], 249, 27, "context");
        if (index == null) dart.nullFailed(I[0], 249, 40, "index");
        let itemIndex = (dart.notNull(index) / 2)[$truncate]();
        return index[$isEven] ? (t0 = this.widget, t1 = context, t2 = itemIndex, t0.itemBuilder(t1, t2)) : separatorBuilder(context, itemIndex);
      }, T.BuildContextAndintToWidget()) : this.widget.itemBuilder, {childCount: separatorBuilder == null ? itemCount : itemCount != null ? math.max(core.int, 0, dart.notNull(itemCount) * 2 - 1) : null, addAutomaticKeepAlives: this.widget.addAutomaticKeepAlives, addRepaintBoundaries: this.widget.addRepaintBoundaries});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 265, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfAxis()).new("scrollDirection", this.widget.scrollDirection));
      properties.add(new diagnostics.FlagProperty.new("reverse", {value: this.widget.reverse, ifTrue: "reversed", showName: true}));
      properties.add(new (T.DiagnosticsPropertyOfScrollController()).new("controller", this.widget.controller, {showName: false, defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfScrollPhysics()).new("physics", this.widget.physics, {showName: false, defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfEdgeInsetsGeometry()).new("padding", this.widget.padding, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("itemExtent", this.widget.itemExtent, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("cacheExtent", this.widget.cacheExtent, {defaultValue: null}));
    }
  };
  (infinite_listview._InfiniteListViewState.new = function() {
    this[_controller] = null;
    infinite_listview._InfiniteListViewState.__proto__.new.call(this);
    ;
  }).prototype = infinite_listview._InfiniteListViewState.prototype;
  dart.addTypeTests(infinite_listview._InfiniteListViewState);
  dart.addTypeCaches(infinite_listview._InfiniteListViewState);
  dart.setMethodSignature(infinite_listview._InfiniteListViewState, () => ({
    __proto__: dart.getMethods(infinite_listview._InfiniteListViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getDirection]: dart.fnType(basic_types.AxisDirection, [framework.BuildContext]),
    [_buildSlivers]: dart.fnType(core.List$(framework.Widget), [framework.BuildContext], {negative: core.bool}, {})
  }));
  dart.setGetterSignature(infinite_listview._InfiniteListViewState, () => ({
    __proto__: dart.getGetters(infinite_listview._InfiniteListViewState.__proto__),
    [_effectiveController]: infinite_listview.InfiniteScrollController,
    negativeChildrenDelegate: sliver.SliverChildDelegate,
    positiveChildrenDelegate: sliver.SliverChildDelegate
  }));
  dart.setLibraryUri(infinite_listview._InfiniteListViewState, I[1]);
  dart.setFieldSignature(infinite_listview._InfiniteListViewState, () => ({
    __proto__: dart.getFields(infinite_listview._InfiniteListViewState.__proto__),
    [_controller]: dart.fieldType(dart.nullable(infinite_listview.InfiniteScrollController))
  }));
  infinite_listview.InfiniteScrollController = class InfiniteScrollController extends scroll_controller.ScrollController {
    createScrollPosition(physics, context, oldPosition) {
      if (physics == null) dart.nullFailed(I[0], 296, 21, "physics");
      if (context == null) dart.nullFailed(I[0], 296, 44, "context");
      return new infinite_listview._InfiniteScrollPosition.new({physics: physics, context: context, initialPixels: this.initialScrollOffset, keepScrollOffset: this.keepScrollOffset, oldPosition: oldPosition, debugLabel: this.debugLabel});
    }
  };
  (infinite_listview.InfiniteScrollController.new = function(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : 0;
    if (initialScrollOffset == null) dart.nullFailed(I[0], 285, 12, "initialScrollOffset");
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    if (keepScrollOffset == null) dart.nullFailed(I[0], 286, 10, "keepScrollOffset");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    infinite_listview.InfiniteScrollController.__proto__.new.call(this, {initialScrollOffset: initialScrollOffset, keepScrollOffset: keepScrollOffset, debugLabel: debugLabel});
    ;
  }).prototype = infinite_listview.InfiniteScrollController.prototype;
  dart.addTypeTests(infinite_listview.InfiniteScrollController);
  dart.addTypeCaches(infinite_listview.InfiniteScrollController);
  dart.setLibraryUri(infinite_listview.InfiniteScrollController, I[1]);
  infinite_listview._InfiniteScrollPosition = class _InfiniteScrollPosition extends scroll_position_with_single_context.ScrollPositionWithSingleContext {
    [_forceNegativePixels](value) {
      if (value == null) dart.nullFailed(I[0], 328, 36, "value");
      super.forcePixels(-dart.notNull(value));
    }
    saveScrollOffset() {
      if (!dart.test(this.negativeScroll)) {
        super.saveScrollOffset();
      }
    }
    restoreScrollOffset() {
      if (!dart.test(this.negativeScroll)) {
        super.restoreScrollOffset();
      }
    }
    get minScrollExtent() {
      return -1 / 0;
    }
    get maxScrollExtent() {
      return 1 / 0;
    }
  };
  (infinite_listview._InfiniteScrollPosition.new = function(opts) {
    let physics = opts && 'physics' in opts ? opts.physics : null;
    if (physics == null) dart.nullFailed(I[0], 310, 28, "physics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[0], 311, 28, "context");
    let initialPixels = opts && 'initialPixels' in opts ? opts.initialPixels : 0;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    if (keepScrollOffset == null) dart.nullFailed(I[0], 313, 10, "keepScrollOffset");
    let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let negativeScroll = opts && 'negativeScroll' in opts ? opts.negativeScroll : false;
    if (negativeScroll == null) dart.nullFailed(I[0], 316, 10, "negativeScroll");
    this.negativeScroll = negativeScroll;
    infinite_listview._InfiniteScrollPosition.__proto__.new.call(this, {physics: physics, context: context, initialPixels: initialPixels, keepScrollOffset: keepScrollOffset, oldPosition: oldPosition, debugLabel: debugLabel});
    ;
  }).prototype = infinite_listview._InfiniteScrollPosition.prototype;
  dart.addTypeTests(infinite_listview._InfiniteScrollPosition);
  dart.addTypeCaches(infinite_listview._InfiniteScrollPosition);
  dart.setMethodSignature(infinite_listview._InfiniteScrollPosition, () => ({
    __proto__: dart.getMethods(infinite_listview._InfiniteScrollPosition.__proto__),
    [_forceNegativePixels]: dart.fnType(dart.void, [core.double])
  }));
  dart.setLibraryUri(infinite_listview._InfiniteScrollPosition, I[1]);
  dart.setFieldSignature(infinite_listview._InfiniteScrollPosition, () => ({
    __proto__: dart.getFields(infinite_listview._InfiniteScrollPosition.__proto__),
    negativeScroll: dart.finalFieldType(core.bool)
  }));
  dart.trackLibraries("packages/infinite_listview/infinite_listview.dart", {
    "package:infinite_listview/infinite_listview.dart": infinite_listview
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["infinite_listview.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/infinite_listview/infinite_listview.dart.lib.js"}');
  // Exports:
  return {
    infinite_listview: infinite_listview
  };
}));

//# sourceMappingURL=infinite_listview.dart.lib.js.map
