define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/rendering/layout_helper.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/rendering/shifted_box.dart'], (function load__packages__flutter__src__material__toggle_buttons_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__rendering__layout_helper$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__rendering__shifted_box$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const toggle_buttons_theme = packages__flutter__src__material__icon_button$46dart.src__material__toggle_buttons_theme;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const debug = packages__flutter__src__material__icon_button$46dart.src__material__debug;
  const button = packages__flutter__src__material__icon_button$46dart.src__material__button;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const mouse_cursor = packages__flutter__src__rendering__layer$46dart.src__rendering__mouse_cursor;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const layout_helper = packages__flutter__src__rendering__layout_helper$46dart.src__rendering__layout_helper;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const shifted_box = packages__flutter__src__rendering__shifted_box$46dart.src__rendering__shifted_box;
  var toggle_buttons = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $any = dartx.any;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    boolTobool: () => (T.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    FocusNodeTobool: () => (T.FocusNodeTobool = dart.constFn(dart.fnType(core.bool, [focus_manager.FocusNode])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ListOfWidget: () => (T.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    intTo_ToggleButton: () => (T.intTo_ToggleButton = dart.constFn(dart.fnType(toggle_buttons._ToggleButton, [core.int])))(),
    DiagnosticsPropertyOfBorderRadius: () => (T.DiagnosticsPropertyOfBorderRadius = dart.constFn(diagnostics.DiagnosticsProperty$(border_radius.BorderRadius)))(),
    DiagnosticsPropertyOfAxis: () => (T.DiagnosticsPropertyOfAxis = dart.constFn(diagnostics.DiagnosticsProperty$(basic_types.Axis)))(),
    DiagnosticsPropertyOfVerticalDirection: () => (T.DiagnosticsPropertyOfVerticalDirection = dart.constFn(diagnostics.DiagnosticsProperty$(basic_types.VerticalDirection)))(),
    RenderBoxAndBoxConstraintsToSize: () => (T.RenderBoxAndBoxConstraintsToSize = dart.constFn(dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_name]: "VerticalDirection.down",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selected",
        [_Location_column]: 9,
        [_Location_line]: 651,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textStyle",
        [_Location_column]: 9,
        [_Location_line]: 652,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "constraints",
        [_Location_column]: 9,
        [_Location_line]: 653,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 654,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedColor",
        [_Location_column]: 9,
        [_Location_line]: 655,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "disabledColor",
        [_Location_column]: 9,
        [_Location_line]: 656,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fillColor",
        [_Location_column]: 9,
        [_Location_line]: 657,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusColor",
        [_Location_column]: 9,
        [_Location_line]: 658,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightColor",
        [_Location_column]: 9,
        [_Location_line]: 659,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 9,
        [_Location_line]: 660,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashColor",
        [_Location_column]: 9,
        [_Location_line]: 661,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 9,
        [_Location_line]: 662,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 9,
        [_Location_line]: 663,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseCursor",
        [_Location_column]: 9,
        [_Location_line]: 666,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "leadingBorderSide",
        [_Location_column]: 9,
        [_Location_line]: 667,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "borderSide",
        [_Location_column]: 9,
        [_Location_line]: 668,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "trailingBorderSide",
        [_Location_column]: 9,
        [_Location_line]: 669,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "borderRadius",
        [_Location_column]: 9,
        [_Location_line]: 670,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipRadius",
        [_Location_column]: 9,
        [_Location_line]: 671,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isFirstButton",
        [_Location_column]: 9,
        [_Location_line]: 672,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isLastButton",
        [_Location_column]: 9,
        [_Location_line]: 673,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "direction",
        [_Location_column]: 9,
        [_Location_line]: 674,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "verticalDirection",
        [_Location_column]: 9,
        [_Location_line]: 675,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 676,
        [_Location_file]: null
      });
    },
    get C3() {
      return C[3] = dart.constList([C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27], T._LocationL());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[3] || CT.C3,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 650,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisSize",
        [_Location_column]: 11,
        [_Location_line]: 683,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 684,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 685,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.constList([C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], T._LocationL());
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[29] || CT.C29,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 682,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 682,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35], T._LocationL());
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 681,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisSize",
        [_Location_column]: 11,
        [_Location_line]: 690,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 691,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "verticalDirection",
        [_Location_column]: 11,
        [_Location_line]: 692,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 693,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.constList([C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41], T._LocationL());
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[37] || CT.C37,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 689,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 689,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44], T._LocationL());
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[43] || CT.C43,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 688,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: box.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 48,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 48
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textStyle",
        [_Location_column]: 9,
        [_Location_line]: 908,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "constraints",
        [_Location_column]: 9,
        [_Location_line]: 911,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 9,
        [_Location_line]: 912,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightElevation",
        [_Location_column]: 9,
        [_Location_line]: 913,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fillColor",
        [_Location_column]: 9,
        [_Location_line]: 914,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusColor",
        [_Location_column]: 9,
        [_Location_line]: 915,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightColor",
        [_Location_column]: 9,
        [_Location_line]: 916,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 9,
        [_Location_line]: 918,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashColor",
        [_Location_column]: 9,
        [_Location_line]: 919,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 9,
        [_Location_line]: 920,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "materialTapTargetSize",
        [_Location_column]: 9,
        [_Location_line]: 921,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 9,
        [_Location_line]: 922,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseCursor",
        [_Location_column]: 9,
        [_Location_line]: 923,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 924,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.constList([C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61], T._LocationL());
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[47] || CT.C47,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 907,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "borderRadius",
        [_Location_column]: 7,
        [_Location_line]: 906,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 907,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.constList([C[64] || CT.C64, C[65] || CT.C65], T._LocationL());
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[63] || CT.C63,
        [_Location_name]: null,
        [_Location_column]: 27,
        [_Location_line]: 905,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 929,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "leadingBorderSide",
        [_Location_column]: 7,
        [_Location_line]: 930,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "borderSide",
        [_Location_column]: 7,
        [_Location_line]: 931,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "trailingBorderSide",
        [_Location_column]: 7,
        [_Location_line]: 932,
        [_Location_file]: null
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "borderRadius",
        [_Location_column]: 7,
        [_Location_line]: 933,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isFirstButton",
        [_Location_column]: 7,
        [_Location_line]: 934,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isLastButton",
        [_Location_column]: 7,
        [_Location_line]: 935,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "direction",
        [_Location_column]: 7,
        [_Location_line]: 936,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "verticalDirection",
        [_Location_column]: 7,
        [_Location_line]: 937,
        [_Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 938,
        [_Location_file]: null
      });
    },
    get C67() {
      return C[67] = dart.constList([C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77], T._LocationL());
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[67] || CT.C67,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 928,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C78() {
      return C[78] = dart.fn(layout_helper.ChildLayoutHelper.dryLayoutChild, T.RenderBoxAndBoxConstraintsToSize());
    },
    get C79() {
      return C[79] = dart.fn(layout_helper.ChildLayoutHelper.layoutChild, T.RenderBoxAndBoxConstraintsToSize());
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.ltr",
        index: 1
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.rtl",
        index: 0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_name]: "VerticalDirection.up",
        index: 0
      });
    }
  }, false);
  var C = Array(83).fill(void 0);
  var I = [
    "file:///C:/flutter/packages/flutter/lib/src/material/toggle_buttons.dart",
    "package:flutter/src/material/toggle_buttons.dart"
  ];
  var children$ = dart.privateName(toggle_buttons, "ToggleButtons.children");
  var isSelected$ = dart.privateName(toggle_buttons, "ToggleButtons.isSelected");
  var onPressed$ = dart.privateName(toggle_buttons, "ToggleButtons.onPressed");
  var mouseCursor$ = dart.privateName(toggle_buttons, "ToggleButtons.mouseCursor");
  var textStyle$ = dart.privateName(toggle_buttons, "ToggleButtons.textStyle");
  var constraints$ = dart.privateName(toggle_buttons, "ToggleButtons.constraints");
  var color$ = dart.privateName(toggle_buttons, "ToggleButtons.color");
  var selectedColor$ = dart.privateName(toggle_buttons, "ToggleButtons.selectedColor");
  var disabledColor$ = dart.privateName(toggle_buttons, "ToggleButtons.disabledColor");
  var fillColor$ = dart.privateName(toggle_buttons, "ToggleButtons.fillColor");
  var focusColor$ = dart.privateName(toggle_buttons, "ToggleButtons.focusColor");
  var highlightColor$ = dart.privateName(toggle_buttons, "ToggleButtons.highlightColor");
  var splashColor$ = dart.privateName(toggle_buttons, "ToggleButtons.splashColor");
  var hoverColor$ = dart.privateName(toggle_buttons, "ToggleButtons.hoverColor");
  var focusNodes$ = dart.privateName(toggle_buttons, "ToggleButtons.focusNodes");
  var renderBorder$ = dart.privateName(toggle_buttons, "ToggleButtons.renderBorder");
  var borderColor$ = dart.privateName(toggle_buttons, "ToggleButtons.borderColor");
  var selectedBorderColor$ = dart.privateName(toggle_buttons, "ToggleButtons.selectedBorderColor");
  var disabledBorderColor$ = dart.privateName(toggle_buttons, "ToggleButtons.disabledBorderColor");
  var borderWidth$ = dart.privateName(toggle_buttons, "ToggleButtons.borderWidth");
  var borderRadius$ = dart.privateName(toggle_buttons, "ToggleButtons.borderRadius");
  var direction$ = dart.privateName(toggle_buttons, "ToggleButtons.direction");
  var verticalDirection$ = dart.privateName(toggle_buttons, "ToggleButtons.verticalDirection");
  var _name = dart.privateName(basic_types, "_name");
  var _isFirstButton$ = dart.privateName(toggle_buttons, "_isFirstButton");
  var _isLastButton$ = dart.privateName(toggle_buttons, "_isLastButton");
  var _getEdgeBorderRadius = dart.privateName(toggle_buttons, "_getEdgeBorderRadius");
  var _getClipBorderRadius = dart.privateName(toggle_buttons, "_getClipBorderRadius");
  var _getLeadingBorderSide = dart.privateName(toggle_buttons, "_getLeadingBorderSide");
  var _getBorderSide = dart.privateName(toggle_buttons, "_getBorderSide");
  var _getTrailingBorderSide = dart.privateName(toggle_buttons, "_getTrailingBorderSide");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  toggle_buttons.ToggleButtons = class ToggleButtons extends framework.StatelessWidget {
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get isSelected() {
      return this[isSelected$];
    }
    set isSelected(value) {
      super.isSelected = value;
    }
    get onPressed() {
      return this[onPressed$];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get mouseCursor() {
      return this[mouseCursor$];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get selectedColor() {
      return this[selectedColor$];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get disabledColor() {
      return this[disabledColor$];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get focusColor() {
      return this[focusColor$];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get highlightColor() {
      return this[highlightColor$];
    }
    set highlightColor(value) {
      super.highlightColor = value;
    }
    get splashColor() {
      return this[splashColor$];
    }
    set splashColor(value) {
      super.splashColor = value;
    }
    get hoverColor() {
      return this[hoverColor$];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get focusNodes() {
      return this[focusNodes$];
    }
    set focusNodes(value) {
      super.focusNodes = value;
    }
    get renderBorder() {
      return this[renderBorder$];
    }
    set renderBorder(value) {
      super.renderBorder = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get selectedBorderColor() {
      return this[selectedBorderColor$];
    }
    set selectedBorderColor(value) {
      super.selectedBorderColor = value;
    }
    get disabledBorderColor() {
      return this[disabledBorderColor$];
    }
    set disabledBorderColor(value) {
      super.disabledBorderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get verticalDirection() {
      return this[verticalDirection$];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    [_isFirstButton$](index, length, textDirection) {
      if (index == null) dart.nullFailed(I[0], 401, 27, "index");
      if (length == null) dart.nullFailed(I[0], 401, 38, "length");
      if (textDirection == null) dart.nullFailed(I[0], 401, 60, "textDirection");
      return index === 0 && (this.direction == basic_types.Axis.horizontal && textDirection == ui.TextDirection.ltr || this.direction == basic_types.Axis.vertical && this.verticalDirection == basic_types.VerticalDirection.down) || index === dart.notNull(length) - 1 && (this.direction == basic_types.Axis.horizontal && textDirection == ui.TextDirection.rtl || this.direction == basic_types.Axis.vertical && this.verticalDirection == basic_types.VerticalDirection.up);
    }
    [_isLastButton$](index, length, textDirection) {
      if (index == null) dart.nullFailed(I[0], 410, 26, "index");
      if (length == null) dart.nullFailed(I[0], 410, 37, "length");
      if (textDirection == null) dart.nullFailed(I[0], 410, 59, "textDirection");
      return index === dart.notNull(length) - 1 && (this.direction == basic_types.Axis.horizontal && textDirection == ui.TextDirection.ltr || this.direction == basic_types.Axis.vertical && this.verticalDirection == basic_types.VerticalDirection.down) || index === 0 && (this.direction == basic_types.Axis.horizontal && textDirection == ui.TextDirection.rtl || this.direction == basic_types.Axis.vertical && this.verticalDirection == basic_types.VerticalDirection.up);
    }
    [_getEdgeBorderRadius](index, length, textDirection, toggleButtonsTheme) {
      let t0, t0$;
      if (index == null) dart.nullFailed(I[0], 418, 9, "index");
      if (length == null) dart.nullFailed(I[0], 419, 9, "length");
      if (textDirection == null) dart.nullFailed(I[0], 420, 19, "textDirection");
      if (toggleButtonsTheme == null) dart.nullFailed(I[0], 421, 28, "toggleButtonsTheme");
      let resultingBorderRadius = (t0$ = (t0 = this.borderRadius, t0 == null ? toggleButtonsTheme.borderRadius : t0), t0$ == null ? border_radius.BorderRadius.zero : t0$);
      if (length === 1) {
        return resultingBorderRadius;
      } else if (this.direction == basic_types.Axis.horizontal) {
        if (dart.test(this[_isFirstButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft, bottomLeft: resultingBorderRadius.bottomLeft});
        } else if (dart.test(this[_isLastButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({topRight: resultingBorderRadius.topRight, bottomRight: resultingBorderRadius.bottomRight});
        }
      } else {
        if (dart.test(this[_isFirstButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft, topRight: resultingBorderRadius.topRight});
        } else if (dart.test(this[_isLastButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({bottomLeft: resultingBorderRadius.bottomLeft, bottomRight: resultingBorderRadius.bottomRight});
        }
      }
      return border_radius.BorderRadius.zero;
    }
    [_getClipBorderRadius](index, length, textDirection, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1;
      if (index == null) dart.nullFailed(I[0], 459, 9, "index");
      if (length == null) dart.nullFailed(I[0], 460, 9, "length");
      if (textDirection == null) dart.nullFailed(I[0], 461, 19, "textDirection");
      if (toggleButtonsTheme == null) dart.nullFailed(I[0], 462, 28, "toggleButtonsTheme");
      let resultingBorderRadius = (t0$ = (t0 = this.borderRadius, t0 == null ? toggleButtonsTheme.borderRadius : t0), t0$ == null ? border_radius.BorderRadius.zero : t0$);
      let resultingBorderWidth = (t0$1 = (t0$0 = this.borderWidth, t0$0 == null ? toggleButtonsTheme.borderWidth : t0$0), t0$1 == null ? 1 : t0$1);
      if (length === 1) {
        return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), bottomLeft: resultingBorderRadius.bottomLeft['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), topRight: resultingBorderRadius.topRight['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), bottomRight: resultingBorderRadius.bottomRight['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0))});
      } else if (this.direction == basic_types.Axis.horizontal) {
        if (dart.test(this[_isFirstButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), bottomLeft: resultingBorderRadius.bottomLeft['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0))});
        } else if (dart.test(this[_isLastButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({topRight: resultingBorderRadius.topRight['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), bottomRight: resultingBorderRadius.bottomRight['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0))});
        }
      } else {
        if (dart.test(this[_isFirstButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), topRight: resultingBorderRadius.topRight['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0))});
        } else if (dart.test(this[_isLastButton$](index, length, textDirection))) {
          return new border_radius.BorderRadius.only({bottomLeft: resultingBorderRadius.bottomLeft['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0)), bottomRight: resultingBorderRadius.bottomRight['-'](new ui.Radius.circular(dart.notNull(resultingBorderWidth) / 2.0))});
        }
      }
      return border_radius.BorderRadius.zero;
    }
    [_getLeadingBorderSide](index, theme, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (index == null) dart.nullFailed(I[0], 507, 9, "index");
      if (theme == null) dart.nullFailed(I[0], 508, 15, "theme");
      if (toggleButtonsTheme == null) dart.nullFailed(I[0], 509, 28, "toggleButtonsTheme");
      if (!dart.test(this.renderBorder)) return borders.BorderSide.none;
      let resultingBorderWidth = (t0$ = (t0 = this.borderWidth, t0 == null ? toggleButtonsTheme.borderWidth : t0), t0$ == null ? 1 : t0$);
      if (this.onPressed != null && (dart.test(this.isSelected[$_get](index)) || index !== 0 && dart.test(this.isSelected[$_get](dart.notNull(index) - 1)))) {
        return new borders.BorderSide.new({color: (t0$1 = (t0$0 = this.selectedBorderColor, t0$0 == null ? toggleButtonsTheme.selectedBorderColor : t0$0), t0$1 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$1), width: resultingBorderWidth});
      } else if (this.onPressed != null && !dart.test(this.isSelected[$_get](index))) {
        return new borders.BorderSide.new({color: (t0$3 = (t0$2 = this.borderColor, t0$2 == null ? toggleButtonsTheme.borderColor : t0$2), t0$3 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$3), width: resultingBorderWidth});
      } else {
        return new borders.BorderSide.new({color: (t0$5 = (t0$4 = this.disabledBorderColor, t0$4 == null ? toggleButtonsTheme.disabledBorderColor : t0$4), t0$5 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$5), width: resultingBorderWidth});
      }
    }
    [_getBorderSide](index, theme, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (index == null) dart.nullFailed(I[0], 542, 9, "index");
      if (theme == null) dart.nullFailed(I[0], 543, 15, "theme");
      if (toggleButtonsTheme == null) dart.nullFailed(I[0], 544, 28, "toggleButtonsTheme");
      if (!dart.test(this.renderBorder)) return borders.BorderSide.none;
      let resultingBorderWidth = (t0$ = (t0 = this.borderWidth, t0 == null ? toggleButtonsTheme.borderWidth : t0), t0$ == null ? 1 : t0$);
      if (this.onPressed != null && dart.test(this.isSelected[$_get](index))) {
        return new borders.BorderSide.new({color: (t0$1 = (t0$0 = this.selectedBorderColor, t0$0 == null ? toggleButtonsTheme.selectedBorderColor : t0$0), t0$1 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$1), width: resultingBorderWidth});
      } else if (this.onPressed != null && !dart.test(this.isSelected[$_get](index))) {
        return new borders.BorderSide.new({color: (t0$3 = (t0$2 = this.borderColor, t0$2 == null ? toggleButtonsTheme.borderColor : t0$2), t0$3 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$3), width: resultingBorderWidth});
      } else {
        return new borders.BorderSide.new({color: (t0$5 = (t0$4 = this.disabledBorderColor, t0$4 == null ? toggleButtonsTheme.disabledBorderColor : t0$4), t0$5 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$5), width: resultingBorderWidth});
      }
    }
    [_getTrailingBorderSide](index, theme, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (index == null) dart.nullFailed(I[0], 577, 9, "index");
      if (theme == null) dart.nullFailed(I[0], 578, 15, "theme");
      if (toggleButtonsTheme == null) dart.nullFailed(I[0], 579, 28, "toggleButtonsTheme");
      if (!dart.test(this.renderBorder)) return borders.BorderSide.none;
      if (index !== dart.notNull(this.children[$length]) - 1) return borders.BorderSide.none;
      let resultingBorderWidth = (t0$ = (t0 = this.borderWidth, t0 == null ? toggleButtonsTheme.borderWidth : t0), t0$ == null ? 1 : t0$);
      if (this.onPressed != null && dart.test(this.isSelected[$_get](index))) {
        return new borders.BorderSide.new({color: (t0$1 = (t0$0 = this.selectedBorderColor, t0$0 == null ? toggleButtonsTheme.selectedBorderColor : t0$0), t0$1 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$1), width: resultingBorderWidth});
      } else if (this.onPressed != null && !dart.test(this.isSelected[$_get](index))) {
        return new borders.BorderSide.new({color: (t0$3 = (t0$2 = this.borderColor, t0$2 == null ? toggleButtonsTheme.borderColor : t0$2), t0$3 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$3), width: resultingBorderWidth});
      } else {
        return new borders.BorderSide.new({color: (t0$5 = (t0$4 = this.disabledBorderColor, t0$4 == null ? toggleButtonsTheme.disabledBorderColor : t0$4), t0$5 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$5), width: resultingBorderWidth});
      }
    }
    build(context) {
      if (context == null) dart.nullFailed(I[0], 615, 29, "context");
      if (!!dart.test(this.isSelected[$any](dart.fn(val => {
        if (val == null) dart.nullFailed(I[0], 617, 29, "val");
        return val == null;
      }, T.boolTobool())))) dart.assertFailed("All elements of isSelected must be non-null.\n" + "The current list of isSelected values is as follows:\n" + dart.str(this.isSelected), I[0], 617, 7, "!isSelected.any((bool val) => val == null)");
      if (!(this.focusNodes == null || !dart.test(dart.nullCheck(this.focusNodes)[$any](dart.fn(val => {
        if (val == null) dart.nullFailed(I[0], 623, 57, "val");
        return val == null;
      }, T.FocusNodeTobool()))))) dart.assertFailed("All elements of focusNodes must be non-null.\n" + "The current list of focus node values is as follows:\n" + dart.str(this.focusNodes), I[0], 623, 7, "focusNodes == null || !focusNodes!.any((FocusNode val) => val == null)");
      if (!dart.test(dart.fn(() => {
        if (this.focusNodes != null) return dart.nullCheck(this.focusNodes)[$length] == this.children[$length];
        return true;
      }, T.VoidTobool())())) dart.assertFailed("focusNodes.length must match children.length.\n" + "There are " + dart.str(dart.nullCheck(this.focusNodes)[$length]) + " focus nodes, while " + "there are " + dart.str(this.children[$length]) + " children.", I[0], 629, 7, "() {\r\n        if (focusNodes != null)\r\n          return focusNodes!.length == children.length;\r\n        return true;\r\n      }()");
      let theme = theme$.Theme.of(context);
      let toggleButtonsTheme = toggle_buttons_theme.ToggleButtonsTheme.of(context);
      let textDirection = basic.Directionality.of(context);
      let buttons = T.ListOfWidget().generate(this.children[$length], dart.fn(index => {
        let t0, t0$, t0$0, t0$1, t0$2;
        if (index == null) dart.nullFailed(I[0], 642, 78, "index");
        let edgeBorderRadius = this[_getEdgeBorderRadius](index, this.children[$length], textDirection, toggleButtonsTheme);
        let clipBorderRadius = this[_getClipBorderRadius](index, this.children[$length], textDirection, toggleButtonsTheme);
        let leadingBorderSide = this[_getLeadingBorderSide](index, theme, toggleButtonsTheme);
        let borderSide = this[_getBorderSide](index, theme, toggleButtonsTheme);
        let trailingBorderSide = this[_getTrailingBorderSide](index, theme, toggleButtonsTheme);
        return new toggle_buttons._ToggleButton.new({selected: this.isSelected[$_get](index), textStyle: this.textStyle, constraints: this.constraints, color: this.color, selectedColor: this.selectedColor, disabledColor: this.disabledColor, fillColor: (t0 = this.fillColor, t0 == null ? toggleButtonsTheme.fillColor : t0), focusColor: (t0$ = this.focusColor, t0$ == null ? toggleButtonsTheme.focusColor : t0$), highlightColor: (t0$0 = this.highlightColor, t0$0 == null ? toggleButtonsTheme.highlightColor : t0$0), hoverColor: (t0$1 = this.hoverColor, t0$1 == null ? toggleButtonsTheme.hoverColor : t0$1), splashColor: (t0$2 = this.splashColor, t0$2 == null ? toggleButtonsTheme.splashColor : t0$2), focusNode: this.focusNodes != null ? dart.nullCheck(this.focusNodes)[$_get](index) : null, onPressed: this.onPressed != null ? dart.fn(() => {
            dart.nullCheck(this.onPressed)(index);
          }, T.VoidTovoid()) : null, mouseCursor: this.mouseCursor, leadingBorderSide: leadingBorderSide, borderSide: borderSide, trailingBorderSide: trailingBorderSide, borderRadius: edgeBorderRadius, clipRadius: clipBorderRadius, isFirstButton: index === 0, isLastButton: index === dart.notNull(this.children[$length]) - 1, direction: this.direction, verticalDirection: this.verticalDirection, child: this.children[$_get](index), $creationLocationd_0dea112b090073317d4: C[2] || CT.C2});
      }, T.intTo_ToggleButton()));
      return this.direction == basic_types.Axis.horizontal ? new basic.IntrinsicHeight.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.min, crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: buttons, $creationLocationd_0dea112b090073317d4: C[28] || CT.C28}), $creationLocationd_0dea112b090073317d4: C[33] || CT.C33}) : new basic.IntrinsicWidth.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, crossAxisAlignment: flex.CrossAxisAlignment.stretch, verticalDirection: this.verticalDirection, children: buttons, $creationLocationd_0dea112b090073317d4: C[36] || CT.C36}), $creationLocationd_0dea112b090073317d4: C[42] || CT.C42});
    }
    debugFillProperties(properties) {
      let t0;
      if (properties == null) dart.nullFailed(I[0], 699, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("disabled", {value: this.onPressed == null, ifTrue: "Buttons are disabled", ifFalse: "Buttons are enabled"}));
      t0 = this.textStyle;
      t0 == null ? null : t0.debugFillProperties(properties, {prefix: "textStyle."});
      properties.add(new colors.ColorProperty.new("color", this.color, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("selectedColor", this.selectedColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("disabledColor", this.disabledColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("fillColor", this.fillColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("focusColor", this.focusColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("highlightColor", this.highlightColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("hoverColor", this.hoverColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("splashColor", this.splashColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("borderColor", this.borderColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("selectedBorderColor", this.selectedBorderColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("disabledBorderColor", this.disabledBorderColor, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfBorderRadius()).new("borderRadius", this.borderRadius, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("borderWidth", this.borderWidth, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfAxis()).new("direction", this.direction, {defaultValue: basic_types.Axis.horizontal}));
      properties.add(new (T.DiagnosticsPropertyOfVerticalDirection()).new("verticalDirection", this.verticalDirection, {defaultValue: basic_types.VerticalDirection.down}));
    }
  };
  (toggle_buttons.ToggleButtons.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : null;
    if (children == null) dart.nullFailed(I[0], 169, 19, "children");
    let isSelected = opts && 'isSelected' in opts ? opts.isSelected : null;
    if (isSelected == null) dart.nullFailed(I[0], 170, 19, "isSelected");
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
    let focusNodes = opts && 'focusNodes' in opts ? opts.focusNodes : null;
    let renderBorder = opts && 'renderBorder' in opts ? opts.renderBorder : true;
    if (renderBorder == null) dart.nullFailed(I[0], 184, 10, "renderBorder");
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let selectedBorderColor = opts && 'selectedBorderColor' in opts ? opts.selectedBorderColor : null;
    let disabledBorderColor = opts && 'disabledBorderColor' in opts ? opts.disabledBorderColor : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    let direction = opts && 'direction' in opts ? opts.direction : C[0] || CT.C0;
    if (direction == null) dart.nullFailed(I[0], 190, 10, "direction");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[1] || CT.C1;
    if (verticalDirection == null) dart.nullFailed(I[0], 191, 10, "verticalDirection");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[children$] = children;
    this[isSelected$] = isSelected;
    this[onPressed$] = onPressed;
    this[mouseCursor$] = mouseCursor;
    this[textStyle$] = textStyle;
    this[constraints$] = constraints;
    this[color$] = color;
    this[selectedColor$] = selectedColor;
    this[disabledColor$] = disabledColor;
    this[fillColor$] = fillColor;
    this[focusColor$] = focusColor;
    this[highlightColor$] = highlightColor;
    this[hoverColor$] = hoverColor;
    this[splashColor$] = splashColor;
    this[focusNodes$] = focusNodes;
    this[renderBorder$] = renderBorder;
    this[borderColor$] = borderColor;
    this[selectedBorderColor$] = selectedBorderColor;
    this[disabledBorderColor$] = disabledBorderColor;
    this[borderRadius$] = borderRadius;
    this[borderWidth$] = borderWidth;
    this[direction$] = direction;
    this[verticalDirection$] = verticalDirection;
    if (!(children != null)) dart.assertFailed(null, I[0], 193, 12, "children != null");
    if (!(isSelected != null)) dart.assertFailed(null, I[0], 194, 12, "isSelected != null");
    if (!(children[$length] == isSelected[$length])) dart.assertFailed(null, I[0], 195, 12, "children.length == isSelected.length");
    if (!(direction != null)) dart.assertFailed(null, I[0], 196, 12, "direction != null");
    if (!(direction == basic_types.Axis.horizontal || verticalDirection != null)) dart.assertFailed(null, I[0], 197, 12, "direction == Axis.horizontal || verticalDirection != null");
    toggle_buttons.ToggleButtons.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = toggle_buttons.ToggleButtons.prototype;
  dart.addTypeTests(toggle_buttons.ToggleButtons);
  dart.addTypeCaches(toggle_buttons.ToggleButtons);
  dart.setMethodSignature(toggle_buttons.ToggleButtons, () => ({
    __proto__: dart.getMethods(toggle_buttons.ToggleButtons.__proto__),
    [_isFirstButton$]: dart.fnType(core.bool, [core.int, core.int, ui.TextDirection]),
    [_isLastButton$]: dart.fnType(core.bool, [core.int, core.int, ui.TextDirection]),
    [_getEdgeBorderRadius]: dart.fnType(border_radius.BorderRadius, [core.int, core.int, ui.TextDirection, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getClipBorderRadius]: dart.fnType(border_radius.BorderRadius, [core.int, core.int, ui.TextDirection, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getLeadingBorderSide]: dart.fnType(borders.BorderSide, [core.int, theme_data.ThemeData, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getBorderSide]: dart.fnType(borders.BorderSide, [core.int, theme_data.ThemeData, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getTrailingBorderSide]: dart.fnType(borders.BorderSide, [core.int, theme_data.ThemeData, toggle_buttons_theme.ToggleButtonsThemeData]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(toggle_buttons.ToggleButtons, I[1]);
  dart.setFieldSignature(toggle_buttons.ToggleButtons, () => ({
    __proto__: dart.getFields(toggle_buttons.ToggleButtons.__proto__),
    children: dart.finalFieldType(core.List$(framework.Widget)),
    isSelected: dart.finalFieldType(core.List$(core.bool)),
    onPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    constraints: dart.finalFieldType(dart.nullable(box.BoxConstraints)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    fillColor: dart.finalFieldType(dart.nullable(ui.Color)),
    focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
    highlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    splashColor: dart.finalFieldType(dart.nullable(ui.Color)),
    hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
    focusNodes: dart.finalFieldType(dart.nullable(core.List$(focus_manager.FocusNode))),
    renderBorder: dart.finalFieldType(core.bool),
    borderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedBorderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    disabledBorderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    borderWidth: dart.finalFieldType(dart.nullable(core.double)),
    borderRadius: dart.finalFieldType(dart.nullable(border_radius.BorderRadius)),
    direction: dart.finalFieldType(basic_types.Axis),
    verticalDirection: dart.finalFieldType(basic_types.VerticalDirection)
  }));
  dart.defineLazy(toggle_buttons.ToggleButtons, {
    /*toggle_buttons.ToggleButtons._defaultBorderWidth*/get _defaultBorderWidth() {
      return 1;
    }
  }, false);
  var selected$ = dart.privateName(toggle_buttons, "_ToggleButton.selected");
  var textStyle$0 = dart.privateName(toggle_buttons, "_ToggleButton.textStyle");
  var constraints$0 = dart.privateName(toggle_buttons, "_ToggleButton.constraints");
  var color$0 = dart.privateName(toggle_buttons, "_ToggleButton.color");
  var selectedColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.selectedColor");
  var disabledColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.disabledColor");
  var fillColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.fillColor");
  var focusColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.focusColor");
  var hoverColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.hoverColor");
  var highlightColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.highlightColor");
  var splashColor$0 = dart.privateName(toggle_buttons, "_ToggleButton.splashColor");
  var focusNode$ = dart.privateName(toggle_buttons, "_ToggleButton.focusNode");
  var onPressed$0 = dart.privateName(toggle_buttons, "_ToggleButton.onPressed");
  var mouseCursor$0 = dart.privateName(toggle_buttons, "_ToggleButton.mouseCursor");
  var leadingBorderSide$ = dart.privateName(toggle_buttons, "_ToggleButton.leadingBorderSide");
  var borderSide$ = dart.privateName(toggle_buttons, "_ToggleButton.borderSide");
  var trailingBorderSide$ = dart.privateName(toggle_buttons, "_ToggleButton.trailingBorderSide");
  var borderRadius$0 = dart.privateName(toggle_buttons, "_ToggleButton.borderRadius");
  var clipRadius$ = dart.privateName(toggle_buttons, "_ToggleButton.clipRadius");
  var isFirstButton$ = dart.privateName(toggle_buttons, "_ToggleButton.isFirstButton");
  var isLastButton$ = dart.privateName(toggle_buttons, "_ToggleButton.isLastButton");
  var direction$0 = dart.privateName(toggle_buttons, "_ToggleButton.direction");
  var verticalDirection$0 = dart.privateName(toggle_buttons, "_ToggleButton.verticalDirection");
  var child$ = dart.privateName(toggle_buttons, "_ToggleButton.child");
  var BoxConstraints_maxHeight = dart.privateName(box, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box, "BoxConstraints.minWidth");
  toggle_buttons._ToggleButton = class _ToggleButton extends framework.StatelessWidget {
    get selected() {
      return this[selected$];
    }
    set selected(value) {
      super.selected = value;
    }
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get constraints() {
      return this[constraints$0];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get selectedColor() {
      return this[selectedColor$0];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get disabledColor() {
      return this[disabledColor$0];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get fillColor() {
      return this[fillColor$0];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get focusColor() {
      return this[focusColor$0];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get hoverColor() {
      return this[hoverColor$0];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get highlightColor() {
      return this[highlightColor$0];
    }
    set highlightColor(value) {
      super.highlightColor = value;
    }
    get splashColor() {
      return this[splashColor$0];
    }
    set splashColor(value) {
      super.splashColor = value;
    }
    get focusNode() {
      return this[focusNode$];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get onPressed() {
      return this[onPressed$0];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get mouseCursor() {
      return this[mouseCursor$0];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    get leadingBorderSide() {
      return this[leadingBorderSide$];
    }
    set leadingBorderSide(value) {
      super.leadingBorderSide = value;
    }
    get borderSide() {
      return this[borderSide$];
    }
    set borderSide(value) {
      super.borderSide = value;
    }
    get trailingBorderSide() {
      return this[trailingBorderSide$];
    }
    set trailingBorderSide(value) {
      super.trailingBorderSide = value;
    }
    get borderRadius() {
      return this[borderRadius$0];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get clipRadius() {
      return this[clipRadius$];
    }
    set clipRadius(value) {
      super.clipRadius = value;
    }
    get isFirstButton() {
      return this[isFirstButton$];
    }
    set isFirstButton(value) {
      super.isFirstButton = value;
    }
    get isLastButton() {
      return this[isLastButton$];
    }
    set isLastButton(value) {
      super.isLastButton = value;
    }
    get direction() {
      return this[direction$0];
    }
    set direction(value) {
      super.direction = value;
    }
    get verticalDirection() {
      return this[verticalDirection$0];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21;
      if (context == null) dart.nullFailed(I[0], 856, 29, "context");
      if (!dart.test(debug.debugCheckHasMaterial(context))) dart.assertFailed(null, I[0], 857, 12, "debugCheckHasMaterial(context)");
      let currentColor = null;
      let currentFillColor = null;
      let currentFocusColor = null;
      let currentHoverColor = null;
      let currentSplashColor = null;
      let theme = theme$.Theme.of(context);
      let toggleButtonsTheme = toggle_buttons_theme.ToggleButtonsTheme.of(context);
      if (this.onPressed != null && dart.test(this.selected)) {
        currentColor = (t0$ = (t0 = this.selectedColor, t0 == null ? toggleButtonsTheme.selectedColor : t0), t0$ == null ? theme.colorScheme.primary : t0$);
        currentFillColor = (t0$0 = this.fillColor, t0$0 == null ? theme.colorScheme.primary.withOpacity(0.12) : t0$0);
        currentFocusColor = (t0$2 = (t0$1 = this.focusColor, t0$1 == null ? toggleButtonsTheme.focusColor : t0$1), t0$2 == null ? theme.colorScheme.primary.withOpacity(0.12) : t0$2);
        currentHoverColor = (t0$4 = (t0$3 = this.hoverColor, t0$3 == null ? toggleButtonsTheme.hoverColor : t0$3), t0$4 == null ? theme.colorScheme.primary.withOpacity(0.04) : t0$4);
        currentSplashColor = (t0$6 = (t0$5 = this.splashColor, t0$5 == null ? toggleButtonsTheme.splashColor : t0$5), t0$6 == null ? theme.colorScheme.primary.withOpacity(0.16) : t0$6);
      } else if (this.onPressed != null && !dart.test(this.selected)) {
        currentColor = (t0$8 = (t0$7 = this.color, t0$7 == null ? toggleButtonsTheme.color : t0$7), t0$8 == null ? theme.colorScheme.onSurface.withOpacity(0.87) : t0$8);
        currentFillColor = theme.colorScheme.surface.withOpacity(0.0);
        currentFocusColor = (t0$10 = (t0$9 = this.focusColor, t0$9 == null ? toggleButtonsTheme.focusColor : t0$9), t0$10 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$10);
        currentHoverColor = (t0$12 = (t0$11 = this.hoverColor, t0$11 == null ? toggleButtonsTheme.hoverColor : t0$11), t0$12 == null ? theme.colorScheme.onSurface.withOpacity(0.04) : t0$12);
        currentSplashColor = (t0$14 = (t0$13 = this.splashColor, t0$13 == null ? toggleButtonsTheme.splashColor : t0$13), t0$14 == null ? theme.colorScheme.onSurface.withOpacity(0.16) : t0$14);
      } else {
        currentColor = (t0$16 = (t0$15 = this.disabledColor, t0$15 == null ? toggleButtonsTheme.disabledColor : t0$15), t0$16 == null ? theme.colorScheme.onSurface.withOpacity(0.38) : t0$16);
        currentFillColor = theme.colorScheme.surface.withOpacity(0.0);
      }
      let currentTextStyle = (t0$18 = (t0$17 = this.textStyle, t0$17 == null ? toggleButtonsTheme.textStyle : t0$17), t0$18 == null ? dart.nullCheck(theme.textTheme.bodyText2) : t0$18);
      let currentConstraints = (t0$20 = (t0$19 = this.constraints, t0$19 == null ? toggleButtonsTheme.constraints : t0$19), t0$20 == null ? C[45] || CT.C45 : t0$20);
      let result = new basic.ClipRRect.new({borderRadius: this.clipRadius, child: new button.RawMaterialButton.new({textStyle: currentTextStyle.copyWith({color: currentColor}), constraints: currentConstraints, elevation: 0.0, highlightElevation: 0.0, fillColor: currentFillColor, focusColor: currentFocusColor, highlightColor: (t0$21 = this.highlightColor, t0$21 == null ? theme.colorScheme.surface.withOpacity(0.0) : t0$21), hoverColor: currentHoverColor, splashColor: currentSplashColor, focusNode: this.focusNode, materialTapTargetSize: theme_data.MaterialTapTargetSize.shrinkWrap, onPressed: this.onPressed, mouseCursor: this.mouseCursor, child: this.child, $creationLocationd_0dea112b090073317d4: C[46] || CT.C46}), $creationLocationd_0dea112b090073317d4: C[62] || CT.C62});
      return new toggle_buttons._SelectToggleButton.new({key: this.key, leadingBorderSide: this.leadingBorderSide, borderSide: this.borderSide, trailingBorderSide: this.trailingBorderSide, borderRadius: this.borderRadius, isFirstButton: this.isFirstButton, isLastButton: this.isLastButton, direction: this.direction, verticalDirection: this.verticalDirection, child: result, $creationLocationd_0dea112b090073317d4: C[66] || CT.C66});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 943, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("selected", {value: this.selected, ifTrue: "Button is selected", ifFalse: "Button is unselected"}));
    }
  };
  (toggle_buttons._ToggleButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let selected = opts && 'selected' in opts ? opts.selected : false;
    if (selected == null) dart.nullFailed(I[0], 739, 10, "selected");
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let leadingBorderSide = opts && 'leadingBorderSide' in opts ? opts.leadingBorderSide : null;
    if (leadingBorderSide == null) dart.nullFailed(I[0], 753, 19, "leadingBorderSide");
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
    if (borderSide == null) dart.nullFailed(I[0], 754, 19, "borderSide");
    let trailingBorderSide = opts && 'trailingBorderSide' in opts ? opts.trailingBorderSide : null;
    if (trailingBorderSide == null) dart.nullFailed(I[0], 755, 19, "trailingBorderSide");
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    if (borderRadius == null) dart.nullFailed(I[0], 756, 19, "borderRadius");
    let clipRadius = opts && 'clipRadius' in opts ? opts.clipRadius : null;
    if (clipRadius == null) dart.nullFailed(I[0], 757, 19, "clipRadius");
    let isFirstButton = opts && 'isFirstButton' in opts ? opts.isFirstButton : null;
    if (isFirstButton == null) dart.nullFailed(I[0], 758, 19, "isFirstButton");
    let isLastButton = opts && 'isLastButton' in opts ? opts.isLastButton : null;
    if (isLastButton == null) dart.nullFailed(I[0], 759, 19, "isLastButton");
    let direction = opts && 'direction' in opts ? opts.direction : null;
    if (direction == null) dart.nullFailed(I[0], 760, 19, "direction");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : null;
    if (verticalDirection == null) dart.nullFailed(I[0], 761, 19, "verticalDirection");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[0], 762, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[selected$] = selected;
    this[textStyle$0] = textStyle;
    this[constraints$0] = constraints;
    this[color$0] = color;
    this[selectedColor$0] = selectedColor;
    this[disabledColor$0] = disabledColor;
    this[fillColor$0] = fillColor;
    this[focusColor$0] = focusColor;
    this[highlightColor$0] = highlightColor;
    this[hoverColor$0] = hoverColor;
    this[splashColor$0] = splashColor;
    this[focusNode$] = focusNode;
    this[onPressed$0] = onPressed;
    this[mouseCursor$0] = mouseCursor;
    this[leadingBorderSide$] = leadingBorderSide;
    this[borderSide$] = borderSide;
    this[trailingBorderSide$] = trailingBorderSide;
    this[borderRadius$0] = borderRadius;
    this[clipRadius$] = clipRadius;
    this[isFirstButton$] = isFirstButton;
    this[isLastButton$] = isLastButton;
    this[direction$0] = direction;
    this[verticalDirection$0] = verticalDirection;
    this[child$] = child;
    toggle_buttons._ToggleButton.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = toggle_buttons._ToggleButton.prototype;
  dart.addTypeTests(toggle_buttons._ToggleButton);
  dart.addTypeCaches(toggle_buttons._ToggleButton);
  dart.setMethodSignature(toggle_buttons._ToggleButton, () => ({
    __proto__: dart.getMethods(toggle_buttons._ToggleButton.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(toggle_buttons._ToggleButton, I[1]);
  dart.setFieldSignature(toggle_buttons._ToggleButton, () => ({
    __proto__: dart.getFields(toggle_buttons._ToggleButton.__proto__),
    selected: dart.finalFieldType(core.bool),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    constraints: dart.finalFieldType(dart.nullable(box.BoxConstraints)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    fillColor: dart.finalFieldType(dart.nullable(ui.Color)),
    focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
    hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
    highlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    splashColor: dart.finalFieldType(dart.nullable(ui.Color)),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    onPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
    leadingBorderSide: dart.finalFieldType(borders.BorderSide),
    borderSide: dart.finalFieldType(borders.BorderSide),
    trailingBorderSide: dart.finalFieldType(borders.BorderSide),
    borderRadius: dart.finalFieldType(border_radius.BorderRadius),
    clipRadius: dart.finalFieldType(border_radius.BorderRadius),
    isFirstButton: dart.finalFieldType(core.bool),
    isLastButton: dart.finalFieldType(core.bool),
    direction: dart.finalFieldType(basic_types.Axis),
    verticalDirection: dart.finalFieldType(basic_types.VerticalDirection),
    child: dart.finalFieldType(framework.Widget)
  }));
  var leadingBorderSide$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.leadingBorderSide");
  var borderSide$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.borderSide");
  var trailingBorderSide$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.trailingBorderSide");
  var borderRadius$1 = dart.privateName(toggle_buttons, "_SelectToggleButton.borderRadius");
  var isFirstButton$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.isFirstButton");
  var isLastButton$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.isLastButton");
  var direction$1 = dart.privateName(toggle_buttons, "_SelectToggleButton.direction");
  var verticalDirection$1 = dart.privateName(toggle_buttons, "_SelectToggleButton.verticalDirection");
  toggle_buttons._SelectToggleButton = class _SelectToggleButton extends framework.SingleChildRenderObjectWidget {
    get leadingBorderSide() {
      return this[leadingBorderSide$0];
    }
    set leadingBorderSide(value) {
      super.leadingBorderSide = value;
    }
    get borderSide() {
      return this[borderSide$0];
    }
    set borderSide(value) {
      super.borderSide = value;
    }
    get trailingBorderSide() {
      return this[trailingBorderSide$0];
    }
    set trailingBorderSide(value) {
      super.trailingBorderSide = value;
    }
    get borderRadius() {
      return this[borderRadius$1];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get isFirstButton() {
      return this[isFirstButton$0];
    }
    set isFirstButton(value) {
      super.isFirstButton = value;
    }
    get isLastButton() {
      return this[isLastButton$0];
    }
    set isLastButton(value) {
      super.isLastButton = value;
    }
    get direction() {
      return this[direction$1];
    }
    set direction(value) {
      super.direction = value;
    }
    get verticalDirection() {
      return this[verticalDirection$1];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 1002, 67, "context");
      return new toggle_buttons._SelectToggleButtonRenderObject.new(this.leadingBorderSide, this.borderSide, this.trailingBorderSide, this.borderRadius, this.isFirstButton, this.isLastButton, this.direction, this.verticalDirection, basic.Directionality.of(context));
    }
    updateRenderObject(context, renderObject) {
      let t0;
      if (context == null) dart.nullFailed(I[0], 1015, 40, "context");
      toggle_buttons._SelectToggleButtonRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 1015, 81, "renderObject");
      t0 = renderObject;
      (() => {
        t0.leadingBorderSide = this.leadingBorderSide;
        t0.borderSide = this.borderSide;
        t0.trailingBorderSide = this.trailingBorderSide;
        t0.borderRadius = this.borderRadius;
        t0.isFirstButton = this.isFirstButton;
        t0.isLastButton = this.isLastButton;
        t0.direction = this.direction;
        t0.verticalDirection = this.verticalDirection;
        t0.textDirection = basic.Directionality.of(context);
        return t0;
      })();
    }
  };
  (toggle_buttons._SelectToggleButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[0], 956, 21, "child");
    let leadingBorderSide = opts && 'leadingBorderSide' in opts ? opts.leadingBorderSide : null;
    if (leadingBorderSide == null) dart.nullFailed(I[0], 957, 19, "leadingBorderSide");
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
    if (borderSide == null) dart.nullFailed(I[0], 958, 19, "borderSide");
    let trailingBorderSide = opts && 'trailingBorderSide' in opts ? opts.trailingBorderSide : null;
    if (trailingBorderSide == null) dart.nullFailed(I[0], 959, 19, "trailingBorderSide");
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    if (borderRadius == null) dart.nullFailed(I[0], 960, 19, "borderRadius");
    let isFirstButton = opts && 'isFirstButton' in opts ? opts.isFirstButton : null;
    if (isFirstButton == null) dart.nullFailed(I[0], 961, 19, "isFirstButton");
    let isLastButton = opts && 'isLastButton' in opts ? opts.isLastButton : null;
    if (isLastButton == null) dart.nullFailed(I[0], 962, 19, "isLastButton");
    let direction = opts && 'direction' in opts ? opts.direction : null;
    if (direction == null) dart.nullFailed(I[0], 963, 19, "direction");
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : null;
    if (verticalDirection == null) dart.nullFailed(I[0], 964, 19, "verticalDirection");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[leadingBorderSide$0] = leadingBorderSide;
    this[borderSide$0] = borderSide;
    this[trailingBorderSide$0] = trailingBorderSide;
    this[borderRadius$1] = borderRadius;
    this[isFirstButton$0] = isFirstButton;
    this[isLastButton$0] = isLastButton;
    this[direction$1] = direction;
    this[verticalDirection$1] = verticalDirection;
    toggle_buttons._SelectToggleButton.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = toggle_buttons._SelectToggleButton.prototype;
  dart.addTypeTests(toggle_buttons._SelectToggleButton);
  dart.addTypeCaches(toggle_buttons._SelectToggleButton);
  dart.setMethodSignature(toggle_buttons._SelectToggleButton, () => ({
    __proto__: dart.getMethods(toggle_buttons._SelectToggleButton.__proto__),
    createRenderObject: dart.fnType(toggle_buttons._SelectToggleButtonRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(toggle_buttons._SelectToggleButton, I[1]);
  dart.setFieldSignature(toggle_buttons._SelectToggleButton, () => ({
    __proto__: dart.getFields(toggle_buttons._SelectToggleButton.__proto__),
    leadingBorderSide: dart.finalFieldType(borders.BorderSide),
    borderSide: dart.finalFieldType(borders.BorderSide),
    trailingBorderSide: dart.finalFieldType(borders.BorderSide),
    borderRadius: dart.finalFieldType(border_radius.BorderRadius),
    isFirstButton: dart.finalFieldType(core.bool),
    isLastButton: dart.finalFieldType(core.bool),
    direction: dart.finalFieldType(basic_types.Axis),
    verticalDirection: dart.finalFieldType(basic_types.VerticalDirection)
  }));
  var _leadingBorderSide$ = dart.privateName(toggle_buttons, "_leadingBorderSide");
  var _borderSide$ = dart.privateName(toggle_buttons, "_borderSide");
  var _trailingBorderSide$ = dart.privateName(toggle_buttons, "_trailingBorderSide");
  var _borderRadius$ = dart.privateName(toggle_buttons, "_borderRadius");
  var _direction$ = dart.privateName(toggle_buttons, "_direction");
  var _verticalDirection$ = dart.privateName(toggle_buttons, "_verticalDirection");
  var _textDirection$ = dart.privateName(toggle_buttons, "_textDirection");
  var _computeSize = dart.privateName(toggle_buttons, "_computeSize");
  var _name$ = dart.privateName(ui, "_name");
  toggle_buttons._SelectToggleButtonRenderObject = class _SelectToggleButtonRenderObject extends shifted_box.RenderShiftedBox {
    get direction() {
      return this[_direction$];
    }
    set direction(value) {
      if (value == null) dart.nullFailed(I[0], 1045, 22, "value");
      if (this[_direction$] == value) return;
      this[_direction$] = value;
      this.markNeedsLayout();
    }
    get verticalDirection() {
      return this[_verticalDirection$];
    }
    set verticalDirection(value) {
      if (value == null) dart.nullFailed(I[0], 1054, 43, "value");
      if (this[_verticalDirection$] == value) return;
      this[_verticalDirection$] = value;
      this.markNeedsLayout();
    }
    get leadingBorderSide() {
      return this[_leadingBorderSide$];
    }
    set leadingBorderSide(value) {
      if (value == null) dart.nullFailed(I[0], 1064, 36, "value");
      if (dart.equals(this[_leadingBorderSide$], value)) return;
      this[_leadingBorderSide$] = value;
      this.markNeedsLayout();
    }
    get borderSide() {
      return this[_borderSide$];
    }
    set borderSide(value) {
      if (value == null) dart.nullFailed(I[0], 1074, 29, "value");
      if (dart.equals(this[_borderSide$], value)) return;
      this[_borderSide$] = value;
      this.markNeedsLayout();
    }
    get trailingBorderSide() {
      return this[_trailingBorderSide$];
    }
    set trailingBorderSide(value) {
      if (value == null) dart.nullFailed(I[0], 1084, 37, "value");
      if (dart.equals(this[_trailingBorderSide$], value)) return;
      this[_trailingBorderSide$] = value;
      this.markNeedsLayout();
    }
    get borderRadius() {
      return this[_borderRadius$];
    }
    set borderRadius(value) {
      if (value == null) dart.nullFailed(I[0], 1094, 33, "value");
      if (dart.equals(this[_borderRadius$], value)) return;
      this[_borderRadius$] = value;
      this.markNeedsLayout();
    }
    get isFirstButton() {
      return this[_isFirstButton$];
    }
    set isFirstButton(value) {
      if (value == null) dart.nullFailed(I[0], 1104, 26, "value");
      if (this[_isFirstButton$] == value) return;
      this[_isFirstButton$] = value;
      this.markNeedsLayout();
    }
    get isLastButton() {
      return this[_isLastButton$];
    }
    set isLastButton(value) {
      if (value == null) dart.nullFailed(I[0], 1114, 25, "value");
      if (this[_isLastButton$] == value) return;
      this[_isLastButton$] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection$];
    }
    set textDirection(value) {
      if (value == null) dart.nullFailed(I[0], 1124, 35, "value");
      if (this[_textDirection$] == value) return;
      this[_textDirection$] = value;
      this.markNeedsLayout();
    }
    static _maxHeight(box, width) {
      if (width == null) dart.nullFailed(I[0], 1131, 51, "width");
      return box == null ? 0.0 : box.getMaxIntrinsicHeight(width);
    }
    static _minHeight(box, width) {
      if (width == null) dart.nullFailed(I[0], 1135, 51, "width");
      return box == null ? 0.0 : box.getMinIntrinsicHeight(width);
    }
    static _minWidth(box, height) {
      if (height == null) dart.nullFailed(I[0], 1139, 50, "height");
      return box == null ? 0.0 : box.getMinIntrinsicWidth(height);
    }
    static _maxWidth(box, height) {
      if (height == null) dart.nullFailed(I[0], 1143, 50, "height");
      return box == null ? 0.0 : box.getMaxIntrinsicWidth(height);
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[0], 1148, 55, "baseline");
      return this.direction == basic_types.Axis.horizontal ? dart.nullCheck(dart.nullCheck(this.child).computeDistanceToActualBaseline(baseline)) + dart.notNull(this.borderSide.width) : dart.nullCheck(dart.nullCheck(this.child).computeDistanceToActualBaseline(baseline)) + dart.notNull(this.leadingBorderSide.width);
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 1156, 43, "width");
      return this.direction == basic_types.Axis.horizontal ? dart.notNull(this.borderSide.width) * 2.0 + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._maxHeight(this.child, width)) : dart.notNull(this.leadingBorderSide.width) + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._maxHeight(this.child, width)) + dart.notNull(this.trailingBorderSide.width);
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[0], 1163, 43, "width");
      return this.direction == basic_types.Axis.horizontal ? dart.notNull(this.borderSide.width) * 2.0 + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._minHeight(this.child, width)) : dart.notNull(this.leadingBorderSide.width) + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._maxHeight(this.child, width)) + dart.notNull(this.trailingBorderSide.width);
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 1170, 42, "height");
      return this.direction == basic_types.Axis.horizontal ? dart.notNull(this.leadingBorderSide.width) + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._maxWidth(this.child, height)) + dart.notNull(this.trailingBorderSide.width) : dart.notNull(this.borderSide.width) * 2.0 + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._maxWidth(this.child, height));
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[0], 1177, 42, "height");
      return this.direction == basic_types.Axis.horizontal ? dart.notNull(this.leadingBorderSide.width) + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._minWidth(this.child, height)) + dart.notNull(this.trailingBorderSide.width) : dart.notNull(this.borderSide.width) * 2.0 + dart.notNull(toggle_buttons._SelectToggleButtonRenderObject._minWidth(this.child, height));
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[0], 1184, 40, "constraints");
      return this[_computeSize]({constraints: constraints, layoutChild: C[78] || CT.C78});
    }
    performLayout() {
      this.size = this[_computeSize]({constraints: this.constraints, layoutChild: C[79] || CT.C79});
      if (this.child == null) {
        return;
      }
      let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
      if (this.direction == basic_types.Axis.horizontal) {
        switch (this.textDirection) {
          case C[80] || CT.C80:
          {
            childParentData.offset = new ui.Offset.new(this.leadingBorderSide.width, this.borderSide.width);
            break;
          }
          case C[81] || CT.C81:
          {
            childParentData.offset = new ui.Offset.new(this.trailingBorderSide.width, this.borderSide.width);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      } else {
        switch (this.verticalDirection) {
          case C[1] || CT.C1:
          {
            childParentData.offset = new ui.Offset.new(this.borderSide.width, this.leadingBorderSide.width);
            break;
          }
          case C[82] || CT.C82:
          {
            childParentData.offset = new ui.Offset.new(this.borderSide.width, this.trailingBorderSide.width);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
    [_computeSize](opts) {
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      if (constraints == null) dart.nullFailed(I[0], 1222, 46, "constraints");
      let layoutChild = opts && 'layoutChild' in opts ? opts.layoutChild : null;
      if (layoutChild == null) dart.nullFailed(I[0], 1222, 82, "layoutChild");
      if (this.child == null) {
        if (this.direction == basic_types.Axis.horizontal) {
          return constraints.constrain(new ui.Size.new(dart.notNull(this.leadingBorderSide.width) + dart.notNull(this.trailingBorderSide.width), dart.notNull(this.borderSide.width) * 2.0));
        } else {
          return constraints.constrain(new ui.Size.new(dart.notNull(this.borderSide.width) * 2.0, dart.notNull(this.leadingBorderSide.width) + dart.notNull(this.trailingBorderSide.width)));
        }
      }
      let leftConstraint = null;
      let rightConstraint = null;
      let topConstraint = null;
      let bottomConstraint = null;
      if (this.direction == basic_types.Axis.horizontal) {
        rightConstraint = this.trailingBorderSide.width;
        leftConstraint = this.leadingBorderSide.width;
        topConstraint = this.borderSide.width;
        bottomConstraint = this.borderSide.width;
      } else {
        rightConstraint = this.borderSide.width;
        leftConstraint = this.borderSide.width;
        topConstraint = this.leadingBorderSide.width;
        bottomConstraint = this.trailingBorderSide.width;
      }
      let innerConstraints = constraints.deflate(new edge_insets.EdgeInsets.only({left: leftConstraint, top: topConstraint, right: rightConstraint, bottom: bottomConstraint}));
      let childSize = layoutChild(dart.nullCheck(this.child), innerConstraints);
      return constraints.constrain(new ui.Size.new(dart.notNull(leftConstraint) + dart.notNull(childSize.width) + dart.notNull(rightConstraint), dart.notNull(topConstraint) + dart.notNull(childSize.height) + dart.notNull(bottomConstraint)));
    }
    paint(context, offset) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18;
      if (context == null) dart.nullFailed(I[0], 1273, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 1273, 46, "offset");
      super.paint(context, offset);
      let bottomRight = this.size.bottomRight(offset);
      let outer = new ui.Rect.fromLTRB(offset.dx, offset.dy, bottomRight.dx, bottomRight.dy);
      let center = outer.deflate(dart.notNull(this.borderSide.width) / 2.0);
      let rrect = new ui.RRect.fromRectAndCorners(center, {topLeft: dart.notNull(this.borderRadius.topLeft.x) * dart.notNull(this.borderRadius.topLeft.y) !== 0.0 ? this.borderRadius.topLeft : ui.Radius.zero, topRight: dart.notNull(this.borderRadius.topRight.x) * dart.notNull(this.borderRadius.topRight.y) !== 0.0 ? this.borderRadius.topRight : ui.Radius.zero, bottomLeft: dart.notNull(this.borderRadius.bottomLeft.x) * dart.notNull(this.borderRadius.bottomLeft.y) !== 0.0 ? this.borderRadius.bottomLeft : ui.Radius.zero, bottomRight: dart.notNull(this.borderRadius.bottomRight.x) * dart.notNull(this.borderRadius.bottomRight.y) !== 0.0 ? this.borderRadius.bottomRight : ui.Radius.zero}).scaleRadii();
      let tlCorner = new ui.Rect.fromLTWH(rrect.left, rrect.top, dart.notNull(rrect.tlRadiusX) * 2.0, dart.notNull(rrect.tlRadiusY) * 2.0);
      let blCorner = new ui.Rect.fromLTWH(rrect.left, dart.notNull(rrect.bottom) - dart.notNull(rrect.blRadiusY) * 2.0, dart.notNull(rrect.blRadiusX) * 2.0, dart.notNull(rrect.blRadiusY) * 2.0);
      let trCorner = new ui.Rect.fromLTWH(dart.notNull(rrect.right) - dart.notNull(rrect.trRadiusX) * 2, rrect.top, dart.notNull(rrect.trRadiusX) * 2, dart.notNull(rrect.trRadiusY) * 2);
      let brCorner = new ui.Rect.fromLTWH(dart.notNull(rrect.right) - dart.notNull(rrect.brRadiusX) * 2, dart.notNull(rrect.bottom) - dart.notNull(rrect.brRadiusY) * 2, dart.notNull(rrect.brRadiusX) * 2, dart.notNull(rrect.brRadiusY) * 2);
      let leadingPaint = this.leadingBorderSide.toPaint();
      if (dart.test(this.isFirstButton) && dart.test(this.isLastButton)) {
        let leadingPath = ui.Path.new();
        let startX = rrect.brRadiusX === 0.0 ? outer.right : dart.notNull(rrect.right) - dart.notNull(rrect.brRadiusX);
        t0 = leadingPath;
        (() => {
          t0.moveTo(startX, rrect.bottom);
          t0.lineTo(dart.notNull(rrect.left) + dart.notNull(rrect.blRadiusX), rrect.bottom);
          t0.addArc(blCorner, 3.141592653589793 / 2.0, 1.5707963267948966);
          t0.lineTo(rrect.left, dart.notNull(rrect.top) + dart.notNull(rrect.tlRadiusY));
          t0.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
          t0.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.trRadiusX), rrect.top);
          t0.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
          t0.lineTo(rrect.right, dart.notNull(rrect.bottom) - dart.notNull(rrect.brRadiusY));
          t0.addArc(brCorner, 0.0, 1.5707963267948966);
          return t0;
        })();
        context.canvas.drawPath(leadingPath, leadingPaint);
        return;
      }
      if (this.direction == basic_types.Axis.horizontal) {
        switch (this.textDirection) {
          case C[80] || CT.C80:
          {
            if (dart.test(this.isLastButton)) {
              let leftPath = ui.Path.new();
              t0$ = leftPath;
              (() => {
                t0$.moveTo(rrect.left, dart.notNull(rrect.bottom) + dart.notNull(this.leadingBorderSide.width) / 2);
                t0$.lineTo(rrect.left, dart.notNull(rrect.top) - dart.notNull(this.leadingBorderSide.width) / 2);
                return t0$;
              })();
              context.canvas.drawPath(leftPath, leadingPaint);
              let endingPaint = this.trailingBorderSide.toPaint();
              let endingPath = ui.Path.new();
              t0$0 = endingPath;
              (() => {
                t0$0.moveTo(dart.notNull(rrect.left) + dart.notNull(this.borderSide.width) / 2.0, rrect.top);
                t0$0.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.trRadiusX), rrect.top);
                t0$0.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
                t0$0.lineTo(rrect.right, dart.notNull(rrect.bottom) - dart.notNull(rrect.brRadiusY));
                t0$0.addArc(brCorner, 0.0, 1.5707963267948966);
                t0$0.lineTo(dart.notNull(rrect.left) + dart.notNull(this.borderSide.width) / 2.0, rrect.bottom);
                return t0$0;
              })();
              context.canvas.drawPath(endingPath, endingPaint);
            } else if (dart.test(this.isFirstButton)) {
              let leadingPath = ui.Path.new();
              t0$1 = leadingPath;
              (() => {
                t0$1.moveTo(outer.right, rrect.bottom);
                t0$1.lineTo(dart.notNull(rrect.left) + dart.notNull(rrect.blRadiusX), rrect.bottom);
                t0$1.addArc(blCorner, 3.141592653589793 / 2.0, 1.5707963267948966);
                t0$1.lineTo(rrect.left, dart.notNull(rrect.top) + dart.notNull(rrect.tlRadiusY));
                t0$1.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
                t0$1.lineTo(outer.right, rrect.top);
                return t0$1;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
            } else {
              let leadingPath = ui.Path.new();
              t0$2 = leadingPath;
              (() => {
                t0$2.moveTo(rrect.left, dart.notNull(rrect.bottom) + dart.notNull(this.leadingBorderSide.width) / 2);
                t0$2.lineTo(rrect.left, dart.notNull(rrect.top) - dart.notNull(this.leadingBorderSide.width) / 2);
                return t0$2;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
              let horizontalPaint = this.borderSide.toPaint();
              let horizontalPaths = ui.Path.new();
              t0$3 = horizontalPaths;
              (() => {
                t0$3.moveTo(dart.notNull(rrect.left) + dart.notNull(this.borderSide.width) / 2.0, rrect.top);
                t0$3.lineTo(dart.notNull(outer.right) - dart.notNull(rrect.trRadiusX), rrect.top);
                t0$3.moveTo(dart.notNull(rrect.left) + dart.notNull(this.borderSide.width) / 2.0 + dart.notNull(rrect.tlRadiusX), rrect.bottom);
                t0$3.lineTo(dart.notNull(outer.right) - dart.notNull(rrect.trRadiusX), rrect.bottom);
                return t0$3;
              })();
              context.canvas.drawPath(horizontalPaths, horizontalPaint);
            }
            break;
          }
          case C[81] || CT.C81:
          {
            if (dart.test(this.isLastButton)) {
              let leadingPath = ui.Path.new();
              t0$4 = leadingPath;
              (() => {
                t0$4.moveTo(rrect.right, dart.notNull(rrect.bottom) + dart.notNull(this.leadingBorderSide.width) / 2);
                t0$4.lineTo(rrect.right, dart.notNull(rrect.top) - dart.notNull(this.leadingBorderSide.width) / 2);
                return t0$4;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
              let endingPaint = this.trailingBorderSide.toPaint();
              let endingPath = ui.Path.new();
              t0$5 = endingPath;
              (() => {
                t0$5.moveTo(dart.notNull(rrect.right) - dart.notNull(this.borderSide.width) / 2.0, rrect.top);
                t0$5.lineTo(dart.notNull(rrect.left) + dart.notNull(rrect.tlRadiusX), rrect.top);
                t0$5.addArc(tlCorner, 3.141592653589793 * 3.0 / 2.0, -1.5707963267948966);
                t0$5.lineTo(rrect.left, dart.notNull(rrect.bottom) - dart.notNull(rrect.blRadiusY));
                t0$5.addArc(blCorner, 3.141592653589793, -1.5707963267948966);
                t0$5.lineTo(dart.notNull(rrect.right) - dart.notNull(this.borderSide.width) / 2.0, rrect.bottom);
                return t0$5;
              })();
              context.canvas.drawPath(endingPath, endingPaint);
            } else if (dart.test(this.isFirstButton)) {
              let leadingPath = ui.Path.new();
              t0$6 = leadingPath;
              (() => {
                t0$6.moveTo(outer.left, rrect.bottom);
                t0$6.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.brRadiusX), rrect.bottom);
                t0$6.addArc(brCorner, 3.141592653589793 / 2.0, -1.5707963267948966);
                t0$6.lineTo(rrect.right, dart.notNull(rrect.top) + dart.notNull(rrect.trRadiusY));
                t0$6.addArc(trCorner, 0.0, -1.5707963267948966);
                t0$6.lineTo(outer.left, rrect.top);
                return t0$6;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
            } else {
              let leadingPath = ui.Path.new();
              t0$7 = leadingPath;
              (() => {
                t0$7.moveTo(rrect.right, dart.notNull(rrect.bottom) + dart.notNull(this.leadingBorderSide.width) / 2);
                t0$7.lineTo(rrect.right, dart.notNull(rrect.top) - dart.notNull(this.leadingBorderSide.width) / 2);
                return t0$7;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
              let horizontalPaint = this.borderSide.toPaint();
              let horizontalPaths = ui.Path.new();
              t0$8 = horizontalPaths;
              (() => {
                t0$8.moveTo(dart.notNull(rrect.right) - dart.notNull(this.borderSide.width) / 2.0, rrect.top);
                t0$8.lineTo(dart.notNull(outer.left) - dart.notNull(rrect.tlRadiusX), rrect.top);
                t0$8.moveTo(dart.notNull(rrect.right) - dart.notNull(this.borderSide.width) / 2.0 + dart.notNull(rrect.trRadiusX), rrect.bottom);
                t0$8.lineTo(dart.notNull(outer.left) - dart.notNull(rrect.tlRadiusX), rrect.bottom);
                return t0$8;
              })();
              context.canvas.drawPath(horizontalPaths, horizontalPaint);
            }
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      } else {
        switch (this.verticalDirection) {
          case C[1] || CT.C1:
          {
            if (dart.test(this.isLastButton)) {
              let topPath = ui.Path.new();
              t0$9 = topPath;
              (() => {
                t0$9.moveTo(outer.left, dart.notNull(outer.top) + dart.notNull(this.leadingBorderSide.width) / 2);
                t0$9.lineTo(outer.right, dart.notNull(outer.top) + dart.notNull(this.leadingBorderSide.width) / 2);
                return t0$9;
              })();
              context.canvas.drawPath(topPath, leadingPaint);
              let endingPaint = this.trailingBorderSide.toPaint();
              let endingPath = ui.Path.new();
              t0$10 = endingPath;
              (() => {
                t0$10.moveTo(rrect.left, dart.notNull(rrect.top) + dart.notNull(this.leadingBorderSide.width) / 2.0);
                t0$10.lineTo(rrect.left, dart.notNull(rrect.bottom) - dart.notNull(rrect.blRadiusY));
                t0$10.addArc(blCorner, 3.141592653589793 * 3.0, -1.5707963267948966);
                t0$10.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.blRadiusX), rrect.bottom);
                t0$10.addArc(brCorner, 3.141592653589793 / 2.0, -1.5707963267948966);
                t0$10.lineTo(rrect.right, dart.notNull(rrect.top) + dart.notNull(this.leadingBorderSide.width) / 2.0);
                return t0$10;
              })();
              context.canvas.drawPath(endingPath, endingPaint);
            } else if (dart.test(this.isFirstButton)) {
              let leadingPath = ui.Path.new();
              t0$11 = leadingPath;
              (() => {
                t0$11.moveTo(rrect.left, outer.bottom);
                t0$11.lineTo(rrect.left, dart.notNull(rrect.top) + dart.notNull(rrect.tlRadiusX));
                t0$11.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
                t0$11.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.trRadiusX), rrect.top);
                t0$11.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
                t0$11.lineTo(rrect.right, outer.bottom);
                return t0$11;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
            } else {
              let topPath = ui.Path.new();
              t0$12 = topPath;
              (() => {
                t0$12.moveTo(outer.left, dart.notNull(outer.top) + dart.notNull(this.leadingBorderSide.width) / 2);
                t0$12.lineTo(outer.right, dart.notNull(outer.top) + dart.notNull(this.leadingBorderSide.width) / 2);
                return t0$12;
              })();
              context.canvas.drawPath(topPath, leadingPaint);
              let paint = this.borderSide.toPaint();
              let paths = ui.Path.new();
              t0$13 = paths;
              (() => {
                t0$13.moveTo(rrect.left, dart.notNull(outer.top) + dart.notNull(this.leadingBorderSide.width));
                t0$13.lineTo(rrect.left, outer.bottom);
                t0$13.moveTo(rrect.right, dart.notNull(outer.top) + dart.notNull(this.leadingBorderSide.width));
                t0$13.lineTo(rrect.right, outer.bottom);
                return t0$13;
              })();
              context.canvas.drawPath(paths, paint);
            }
            break;
          }
          case C[82] || CT.C82:
          {
            if (dart.test(this.isLastButton)) {
              let bottomPath = ui.Path.new();
              t0$14 = bottomPath;
              (() => {
                t0$14.moveTo(outer.left, dart.notNull(outer.bottom) - dart.notNull(this.leadingBorderSide.width) / 2.0);
                t0$14.lineTo(outer.right, dart.notNull(outer.bottom) - dart.notNull(this.leadingBorderSide.width) / 2.0);
                return t0$14;
              })();
              context.canvas.drawPath(bottomPath, leadingPaint);
              let endingPaint = this.trailingBorderSide.toPaint();
              let endingPath = ui.Path.new();
              t0$15 = endingPath;
              (() => {
                t0$15.moveTo(rrect.left, dart.notNull(rrect.bottom) - dart.notNull(this.leadingBorderSide.width) / 2.0);
                t0$15.lineTo(rrect.left, dart.notNull(rrect.top) + dart.notNull(rrect.tlRadiusY));
                t0$15.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
                t0$15.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.trRadiusX), rrect.top);
                t0$15.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
                t0$15.lineTo(rrect.right, dart.notNull(rrect.bottom) - dart.notNull(this.leadingBorderSide.width) / 2.0);
                return t0$15;
              })();
              context.canvas.drawPath(endingPath, endingPaint);
            } else if (dart.test(this.isFirstButton)) {
              let leadingPath = ui.Path.new();
              t0$16 = leadingPath;
              (() => {
                t0$16.moveTo(rrect.left, outer.top);
                t0$16.lineTo(rrect.left, dart.notNull(rrect.bottom) - dart.notNull(rrect.blRadiusY));
                t0$16.addArc(blCorner, 3.141592653589793, -1.5707963267948966);
                t0$16.lineTo(dart.notNull(rrect.right) - dart.notNull(rrect.brRadiusX), rrect.bottom);
                t0$16.addArc(brCorner, 3.141592653589793 / 2.0, -1.5707963267948966);
                t0$16.lineTo(rrect.right, outer.top);
                return t0$16;
              })();
              context.canvas.drawPath(leadingPath, leadingPaint);
            } else {
              let bottomPath = ui.Path.new();
              t0$17 = bottomPath;
              (() => {
                t0$17.moveTo(outer.left, dart.notNull(outer.bottom) - dart.notNull(this.leadingBorderSide.width) / 2.0);
                t0$17.lineTo(outer.right, dart.notNull(outer.bottom) - dart.notNull(this.leadingBorderSide.width) / 2.0);
                return t0$17;
              })();
              context.canvas.drawPath(bottomPath, leadingPaint);
              let paint = this.borderSide.toPaint();
              let paths = ui.Path.new();
              t0$18 = paths;
              (() => {
                t0$18.moveTo(rrect.left, outer.top);
                t0$18.lineTo(rrect.left, dart.notNull(outer.bottom) - dart.notNull(this.leadingBorderSide.width));
                t0$18.moveTo(rrect.right, outer.top);
                t0$18.lineTo(rrect.right, dart.notNull(outer.bottom) - dart.notNull(this.leadingBorderSide.width));
                return t0$18;
              })();
              context.canvas.drawPath(paths, paint);
            }
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
  };
  (toggle_buttons._SelectToggleButtonRenderObject.new = function(_leadingBorderSide, _borderSide, _trailingBorderSide, _borderRadius, _isFirstButton, _isLastButton, _direction, _verticalDirection, _textDirection, child = null) {
    if (_leadingBorderSide == null) dart.nullFailed(I[0], 1031, 10, "_leadingBorderSide");
    if (_borderSide == null) dart.nullFailed(I[0], 1032, 10, "_borderSide");
    if (_trailingBorderSide == null) dart.nullFailed(I[0], 1033, 10, "_trailingBorderSide");
    if (_borderRadius == null) dart.nullFailed(I[0], 1034, 10, "_borderRadius");
    if (_isFirstButton == null) dart.nullFailed(I[0], 1035, 10, "_isFirstButton");
    if (_isLastButton == null) dart.nullFailed(I[0], 1036, 10, "_isLastButton");
    if (_direction == null) dart.nullFailed(I[0], 1037, 10, "_direction");
    if (_verticalDirection == null) dart.nullFailed(I[0], 1038, 10, "_verticalDirection");
    if (_textDirection == null) dart.nullFailed(I[0], 1039, 10, "_textDirection");
    this[_leadingBorderSide$] = _leadingBorderSide;
    this[_borderSide$] = _borderSide;
    this[_trailingBorderSide$] = _trailingBorderSide;
    this[_borderRadius$] = _borderRadius;
    this[_isFirstButton$] = _isFirstButton;
    this[_isLastButton$] = _isLastButton;
    this[_direction$] = _direction;
    this[_verticalDirection$] = _verticalDirection;
    this[_textDirection$] = _textDirection;
    toggle_buttons._SelectToggleButtonRenderObject.__proto__.new.call(this, child);
    ;
  }).prototype = toggle_buttons._SelectToggleButtonRenderObject.prototype;
  dart.addTypeTests(toggle_buttons._SelectToggleButtonRenderObject);
  dart.addTypeCaches(toggle_buttons._SelectToggleButtonRenderObject);
  dart.setMethodSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getMethods(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    computeDistanceToActualBaseline: dart.fnType(core.double, [ui.TextBaseline]),
    [_computeSize]: dart.fnType(ui.Size, [], {}, {constraints: box.BoxConstraints, layoutChild: dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])})
  }));
  dart.setGetterSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getGetters(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    direction: basic_types.Axis,
    verticalDirection: basic_types.VerticalDirection,
    leadingBorderSide: borders.BorderSide,
    borderSide: borders.BorderSide,
    trailingBorderSide: borders.BorderSide,
    borderRadius: border_radius.BorderRadius,
    isFirstButton: core.bool,
    isLastButton: core.bool,
    textDirection: ui.TextDirection
  }));
  dart.setSetterSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getSetters(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    direction: basic_types.Axis,
    verticalDirection: basic_types.VerticalDirection,
    leadingBorderSide: borders.BorderSide,
    borderSide: borders.BorderSide,
    trailingBorderSide: borders.BorderSide,
    borderRadius: border_radius.BorderRadius,
    isFirstButton: core.bool,
    isLastButton: core.bool,
    textDirection: ui.TextDirection
  }));
  dart.setLibraryUri(toggle_buttons._SelectToggleButtonRenderObject, I[1]);
  dart.setFieldSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getFields(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    [_direction$]: dart.fieldType(basic_types.Axis),
    [_verticalDirection$]: dart.fieldType(basic_types.VerticalDirection),
    [_leadingBorderSide$]: dart.fieldType(borders.BorderSide),
    [_borderSide$]: dart.fieldType(borders.BorderSide),
    [_trailingBorderSide$]: dart.fieldType(borders.BorderSide),
    [_borderRadius$]: dart.fieldType(border_radius.BorderRadius),
    [_isFirstButton$]: dart.fieldType(core.bool),
    [_isLastButton$]: dart.fieldType(core.bool),
    [_textDirection$]: dart.fieldType(ui.TextDirection)
  }));
  dart.trackLibraries("packages/flutter/src/material/toggle_buttons.dart", {
    "package:flutter/src/material/toggle_buttons.dart": toggle_buttons
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["toggle_buttons.dart"],"names":[],"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","file":"../../../../../../packages/flutter/src/material/toggle_buttons.dart.lib.js"}');
  // Exports:
  return {
    src__material__toggle_buttons: toggle_buttons
  };
}));

//# sourceMappingURL=toggle_buttons.dart.lib.js.map
