define(['dart_sdk', 'packages/flutter_inappwebview/src/web_storage/_static_channel.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter_inappwebview/src/util.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter_inappwebview/src/platform_util.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/widgets/platform_view.dart', 'packages/flutter/src/services/platform_views.dart', 'packages/flutter/src/rendering/platform_view.dart', 'packages/flutter_inappwebview/src/in_app_webview/_static_channel.dart', 'packages/flutter_inappwebview/src/x509_certificate/asn1_distinguished_names.dart'], (function load__packages__flutter_inappwebview__src__web_message__main_dart(dart_sdk, packages__flutter_inappwebview__src__web_storage___static_channel$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter_inappwebview__src__util$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter_inappwebview__src__platform_util$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__widgets__platform_view$46dart, packages__flutter__src__services__platform_views$46dart, packages__flutter__src__rendering__platform_view$46dart, packages__flutter_inappwebview__src__in_app_webview___static_channel$46dart, packages__flutter_inappwebview__src__x509_certificate__asn1_distinguished_names$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _http = dart_sdk._http;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const _static_channel = packages__flutter_inappwebview__src__web_storage___static_channel$46dart.src__web_storage___static_channel;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const util = packages__flutter_inappwebview__src__util$46dart.src__util;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const platform_util = packages__flutter_inappwebview__src__platform_util$46dart.src__platform_util;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const basic_types = packages__flutter__src__foundation__basic_types$46dart.src__foundation__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const platform_view = packages__flutter__src__widgets__platform_view$46dart.src__widgets__platform_view;
  const platform_views = packages__flutter__src__services__platform_views$46dart.src__services__platform_views;
  const platform_view$ = packages__flutter__src__rendering__platform_view$46dart.src__rendering__platform_view;
  const _static_channel$ = packages__flutter_inappwebview__src__in_app_webview___static_channel$46dart.src__in_app_webview___static_channel;
  const x509_certificate = packages__flutter_inappwebview__src__x509_certificate__asn1_distinguished_names$46dart.src__x509_certificate__x509_certificate;
  const asn1_distinguished_names = packages__flutter_inappwebview__src__x509_certificate__asn1_distinguished_names$46dart.src__x509_certificate__asn1_distinguished_names;
  var main = Object.create(dart.library);
  var main$ = Object.create(dart.library);
  var main$0 = Object.create(dart.library);
  var main$1 = Object.create(dart.library);
  var web_storage_manager = Object.create(dart.library);
  var web_storage_manager$ = Object.create(dart.library);
  var web_storage_manager$0 = Object.create(dart.library);
  var main$2 = Object.create(dart.library);
  var service_worker_controller = Object.create(dart.library);
  var main$3 = Object.create(dart.library);
  var main$4 = Object.create(dart.library);
  var main$5 = Object.create(dart.library);
  var safari_options = Object.create(dart.library);
  var chrome_custom_tabs_options = Object.create(dart.library);
  var chrome_safari_browser_options = Object.create(dart.library);
  var chrome_safari_browser = Object.create(dart.library);
  var main$6 = Object.create(dart.library);
  var main$7 = Object.create(dart.library);
  var main$8 = Object.create(dart.library);
  var main$9 = Object.create(dart.library);
  var main$10 = Object.create(dart.library);
  var main$11 = Object.create(dart.library);
  var cookie_manager = Object.create(dart.library);
  var http_auth_credentials_database = Object.create(dart.library);
  var in_app_webview = Object.create(dart.library);
  var pull_to_refresh_options = Object.create(dart.library);
  var content_blocker = Object.create(dart.library);
  var in_app_webview_options = Object.create(dart.library);
  var in_app_browser_options = Object.create(dart.library);
  var in_app_browser_options$ = Object.create(dart.library);
  var in_app_browser_options$0 = Object.create(dart.library);
  var in_app_webview_options$ = Object.create(dart.library);
  var in_app_webview_options$0 = Object.create(dart.library);
  var headless_in_app_webview = Object.create(dart.library);
  var web_message_listener = Object.create(dart.library);
  var web_message_channel = Object.create(dart.library);
  var web_storage = Object.create(dart.library);
  var in_app_webview_controller = Object.create(dart.library);
  var in_app_webview_controller$ = Object.create(dart.library);
  var in_app_webview_controller$0 = Object.create(dart.library);
  var types = Object.create(dart.library);
  var context_menu = Object.create(dart.library);
  var in_app_browser = Object.create(dart.library);
  var pull_to_refresh_controller = Object.create(dart.library);
  var webview = Object.create(dart.library);
  var main$12 = Object.create(dart.library);
  var main$13 = Object.create(dart.library);
  var flutter_inappwebview = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    JSArrayOfIOSWKWebsiteDataRecord: () => (T.JSArrayOfIOSWKWebsiteDataRecord = dart.constFn(_interceptors.JSArray$(types.IOSWKWebsiteDataRecord)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    VoidToListOfString: () => (T.VoidToListOfString = dart.constFn(dart.fnType(T.ListOfString(), [])))(),
    ListOfMap: () => (T.ListOfMap = dart.constFn(core.List$(core.Map)))(),
    _HashSetOfIOSWKWebsiteDataType: () => (T._HashSetOfIOSWKWebsiteDataType = dart.constFn(collection._HashSet$(types.IOSWKWebsiteDataType)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListOfIOSWKWebsiteDataRecord: () => (T.ListOfIOSWKWebsiteDataRecord = dart.constFn(core.List$(types.IOSWKWebsiteDataRecord)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    JSArrayOfMapOfString$dynamic: () => (T.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T.MapOfString$dynamic())))(),
    ListOfMapOfString$dynamic: () => (T.ListOfMapOfString$dynamic = dart.constFn(core.List$(T.MapOfString$dynamic())))(),
    VoidToListOfMapOfString$dynamic: () => (T.VoidToListOfMapOfString$dynamic = dart.constFn(dart.fnType(T.ListOfMapOfString$dynamic(), [])))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    JSArrayOfAndroidWebStorageOrigin: () => (T.JSArrayOfAndroidWebStorageOrigin = dart.constFn(_interceptors.JSArray$(types.AndroidWebStorageOrigin)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    ListOfAndroidWebStorageOrigin: () => (T.ListOfAndroidWebStorageOrigin = dart.constFn(core.List$(types.AndroidWebStorageOrigin)))(),
    VoidToString: () => (T.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    FutureOrOfint: () => (T.FutureOrOfint = dart.constFn(async.FutureOr$(core.int)))(),
    MethodCallToFuture: () => (T.MethodCallToFuture = dart.constFn(dart.fnType(async.Future, [message_codec.MethodCall])))(),
    FutureOrOfbool: () => (T.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    AndroidCacheModeN: () => (T.AndroidCacheModeN = dart.constFn(dart.nullable(types.AndroidCacheMode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IdentityMapOfint$ChromeSafariBrowserMenuItem: () => (T.IdentityMapOfint$ChromeSafariBrowserMenuItem = dart.constFn(_js_helper.IdentityMap$(core.int, chrome_safari_browser.ChromeSafariBrowserMenuItem)))(),
    intAndChromeSafariBrowserMenuItemTovoid: () => (T.intAndChromeSafariBrowserMenuItemTovoid = dart.constFn(dart.fnType(dart.void, [core.int, chrome_safari_browser.ChromeSafariBrowserMenuItem])))(),
    VoidToMap: () => (T.VoidToMap = dart.constFn(dart.fnType(core.Map, [])))(),
    ChromeSafariBrowserMenuItemTovoid: () => (T.ChromeSafariBrowserMenuItemTovoid = dart.constFn(dart.fnType(dart.void, [chrome_safari_browser.ChromeSafariBrowserMenuItem])))(),
    VoidToStringN: () => (T.VoidToStringN = dart.constFn(dart.fnType(T.StringN(), [])))(),
    VoidTointN: () => (T.VoidTointN = dart.constFn(dart.fnType(T.intN(), [])))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    VoidToboolN: () => (T.VoidToboolN = dart.constFn(dart.fnType(T.boolN(), [])))(),
    CompleterOfvoid: () => (T.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    UriN: () => (T.UriN = dart.constFn(dart.nullable(core.Uri)))(),
    InAppWebViewControllerAndUriNToFutureOfvoid: () => (T.InAppWebViewControllerAndUriNToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [in_app_webview_controller$0.InAppWebViewController, T.UriN()])))(),
    JSArrayOfCookie: () => (T.JSArrayOfCookie = dart.constFn(_interceptors.JSArray$(types.Cookie)))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    ListOfCookie: () => (T.ListOfCookie = dart.constFn(core.List$(types.Cookie)))(),
    StringToString: () => (T.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    CookieN: () => (T.CookieN = dart.constFn(dart.nullable(types.Cookie)))(),
    CookieNTobool: () => (T.CookieNTobool = dart.constFn(dart.fnType(core.bool, [T.CookieN()])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    JSArrayOfURLProtectionSpaceHttpAuthCredentials: () => (T.JSArrayOfURLProtectionSpaceHttpAuthCredentials = dart.constFn(_interceptors.JSArray$(types.URLProtectionSpaceHttpAuthCredentials)))(),
    ListOfURLProtectionSpaceHttpAuthCredentials: () => (T.ListOfURLProtectionSpaceHttpAuthCredentials = dart.constFn(core.List$(types.URLProtectionSpaceHttpAuthCredentials)))(),
    JSArrayOfURLCredential: () => (T.JSArrayOfURLCredential = dart.constFn(_interceptors.JSArray$(types.URLCredential)))(),
    ListOfURLCredential: () => (T.ListOfURLCredential = dart.constFn(core.List$(types.URLCredential)))(),
    OneSequenceGestureRecognizerL: () => (T.OneSequenceGestureRecognizerL = dart.constFn(dart.legacy(recognizer.OneSequenceGestureRecognizer)))(),
    FactoryOfOneSequenceGestureRecognizerL: () => (T.FactoryOfOneSequenceGestureRecognizerL = dart.constFn(basic_types.Factory$(T.OneSequenceGestureRecognizerL())))(),
    FactoryLOfOneSequenceGestureRecognizerL: () => (T.FactoryLOfOneSequenceGestureRecognizerL = dart.constFn(dart.legacy(T.FactoryOfOneSequenceGestureRecognizerL())))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    BuildContextAndPlatformViewControllerToAndroidViewSurface: () => (T.BuildContextAndPlatformViewControllerToAndroidViewSurface = dart.constFn(dart.fnType(platform_view.AndroidViewSurface, [framework.BuildContext, platform_views.PlatformViewController])))(),
    UserScriptToMapOfString$dynamic: () => (T.UserScriptToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [types.UserScript])))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    PlatformViewCreationParamsToSurfaceAndroidViewController: () => (T.PlatformViewCreationParamsToSurfaceAndroidViewController = dart.constFn(dart.fnType(platform_views.SurfaceAndroidViewController, [platform_view.PlatformViewCreationParams])))(),
    IdentityMapOfString$MapOfString$dynamic: () => (T.IdentityMapOfString$MapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T.MapOfString$dynamic())))(),
    LinkedHashMapOfString$dynamic: () => (T.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    ContentBlockerTriggerResourceTypeL: () => (T.ContentBlockerTriggerResourceTypeL = dart.constFn(dart.legacy(types.ContentBlockerTriggerResourceType)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ContentBlockerTriggerLoadTypeL: () => (T.ContentBlockerTriggerLoadTypeL = dart.constFn(dart.legacy(types.ContentBlockerTriggerLoadType)))(),
    ContentBlockerTriggerResourceTypeTovoid: () => (T.ContentBlockerTriggerResourceTypeTovoid = dart.constFn(dart.fnType(dart.void, [types.ContentBlockerTriggerResourceType])))(),
    ContentBlockerTriggerLoadTypeTovoid: () => (T.ContentBlockerTriggerLoadTypeTovoid = dart.constFn(dart.fnType(dart.void, [types.ContentBlockerTriggerLoadType])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    JSArrayOfContentBlockerTriggerResourceType: () => (T.JSArrayOfContentBlockerTriggerResourceType = dart.constFn(_interceptors.JSArray$(types.ContentBlockerTriggerResourceType)))(),
    JSArrayOfContentBlockerTriggerLoadType: () => (T.JSArrayOfContentBlockerTriggerLoadType = dart.constFn(_interceptors.JSArray$(types.ContentBlockerTriggerLoadType)))(),
    IOSWKDataDetectorTypesL: () => (T.IOSWKDataDetectorTypesL = dart.constFn(dart.legacy(types.IOSWKDataDetectorTypes)))(),
    IOSWKDataDetectorTypesTovoid: () => (T.IOSWKDataDetectorTypesTovoid = dart.constFn(dart.fnType(dart.void, [types.IOSWKDataDetectorTypes])))(),
    JSArrayOfIOSWKDataDetectorTypes: () => (T.JSArrayOfIOSWKDataDetectorTypes = dart.constFn(_interceptors.JSArray$(types.IOSWKDataDetectorTypes)))(),
    MapNOfString$dynamic: () => (T.MapNOfString$dynamic = dart.constFn(dart.nullable(T.MapOfString$dynamic())))(),
    ContentBlockerL: () => (T.ContentBlockerL = dart.constFn(dart.legacy(content_blocker.ContentBlocker)))(),
    MapOfString$MapOfString$dynamic: () => (T.MapOfString$MapOfString$dynamic = dart.constFn(core.Map$(core.String, T.MapOfString$dynamic())))(),
    JSArrayOfMapOfString$MapOfString$dynamic: () => (T.JSArrayOfMapOfString$MapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T.MapOfString$MapOfString$dynamic())))(),
    ContentBlockerTovoid: () => (T.ContentBlockerTovoid = dart.constFn(dart.fnType(dart.void, [content_blocker.ContentBlocker])))(),
    JSArrayOfContentBlocker: () => (T.JSArrayOfContentBlocker = dart.constFn(_interceptors.JSArray$(content_blocker.ContentBlocker)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    LinkedHashMapOfdynamic$Map: () => (T.LinkedHashMapOfdynamic$Map = dart.constFn(collection.LinkedHashMap$(dart.dynamic, core.Map)))(),
    VoidToMapOfString$dynamic: () => (T.VoidToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [])))(),
    MapOfString$double: () => (T.MapOfString$double = dart.constFn(core.Map$(core.String, core.double)))(),
    VoidToMapOfString$double: () => (T.VoidToMapOfString$double = dart.constFn(dart.fnType(T.MapOfString$double(), [])))(),
    SizeN: () => (T.SizeN = dart.constFn(dart.nullable(ui.Size)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    WebMessagePortToMapOfString$dynamic: () => (T.WebMessagePortToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [web_message_channel.WebMessagePort])))(),
    JSArrayOfWebStorageItem: () => (T.JSArrayOfWebStorageItem = dart.constFn(_interceptors.JSArray$(web_storage.WebStorageItem)))(),
    ListNOfMap: () => (T.ListNOfMap = dart.constFn(dart.nullable(T.ListOfMap())))(),
    ListOfWebStorageItem: () => (T.ListOfWebStorageItem = dart.constFn(core.List$(web_storage.WebStorageItem)))(),
    FutureOrOfString: () => (T.FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))(),
    VoidToMapNOfString$dynamic: () => (T.VoidToMapNOfString$dynamic = dart.constFn(dart.fnType(T.MapNOfString$dynamic(), [])))(),
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    AndroidWebViewPackageInfoN: () => (T.AndroidWebViewPackageInfoN = dart.constFn(dart.nullable(types.AndroidWebViewPackageInfo)))(),
    ListTodynamic: () => (T.ListTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.List])))(),
    IdentityMapOfString$ListTodynamic: () => (T.IdentityMapOfString$ListTodynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T.ListTodynamic())))(),
    JSArrayOfUserScript: () => (T.JSArrayOfUserScript = dart.constFn(_interceptors.JSArray$(types.UserScript)))(),
    _IdentityHashSetOfString: () => (T._IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))(),
    IdentityMapOfString$ScriptHtmlTagAttributes: () => (T.IdentityMapOfString$ScriptHtmlTagAttributes = dart.constFn(_js_helper.IdentityMap$(core.String, types.ScriptHtmlTagAttributes)))(),
    ListOfUserScript: () => (T.ListOfUserScript = dart.constFn(core.List$(types.UserScript)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfFavicon: () => (T.JSArrayOfFavicon = dart.constFn(_interceptors.JSArray$(types.Favicon)))(),
    JSArrayOfMap: () => (T.JSArrayOfMap = dart.constFn(_interceptors.JSArray$(core.Map)))(),
    ListOfFavicon: () => (T.ListOfFavicon = dart.constFn(core.List$(types.Favicon)))(),
    VoidToUint8List: () => (T.VoidToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [])))(),
    InAppWebViewGroupOptionsN: () => (T.InAppWebViewGroupOptionsN = dart.constFn(dart.nullable(in_app_webview_options$0.InAppWebViewGroupOptions)))(),
    WebHistoryN: () => (T.WebHistoryN = dart.constFn(dart.nullable(types.WebHistory)))(),
    VoidTodouble: () => (T.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    InAppWebViewHitTestResultN: () => (T.InAppWebViewHitTestResultN = dart.constFn(dart.nullable(types.InAppWebViewHitTestResult)))(),
    RequestFocusNodeHrefResultN: () => (T.RequestFocusNodeHrefResultN = dart.constFn(dart.nullable(types.RequestFocusNodeHrefResult)))(),
    RequestImageRefResultN: () => (T.RequestImageRefResultN = dart.constFn(dart.nullable(types.RequestImageRefResult)))(),
    JSArrayOfMetaTag: () => (T.JSArrayOfMetaTag = dart.constFn(_interceptors.JSArray$(types.MetaTag)))(),
    JSArrayOfMetaTagAttribute: () => (T.JSArrayOfMetaTagAttribute = dart.constFn(_interceptors.JSArray$(types.MetaTagAttribute)))(),
    ListOfMetaTag: () => (T.ListOfMetaTag = dart.constFn(core.List$(types.MetaTag)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    SslCertificateN: () => (T.SslCertificateN = dart.constFn(dart.nullable(types.SslCertificate)))(),
    CallAsyncJavaScriptResultN: () => (T.CallAsyncJavaScriptResultN = dart.constFn(dart.nullable(types.CallAsyncJavaScriptResult)))(),
    WebMessageChannelN: () => (T.WebMessageChannelN = dart.constFn(dart.nullable(web_message_channel.WebMessageChannel)))(),
    UnmodifiableListViewOfString: () => (T.UnmodifiableListViewOfString = dart.constFn(collection.UnmodifiableListView$(core.String)))(),
    ConsoleMessageLevelTobool: () => (T.ConsoleMessageLevelTobool = dart.constFn(dart.fnType(core.bool, [types.ConsoleMessageLevel])))(),
    JSArrayOfConsoleMessageLevel: () => (T.JSArrayOfConsoleMessageLevel = dart.constFn(_interceptors.JSArray$(types.ConsoleMessageLevel)))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    MapOfString$String: () => (T.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapNOfString$String: () => (T.MapNOfString$String = dart.constFn(dart.nullable(T.MapOfString$String())))(),
    ListOfLinkedHashMap: () => (T.ListOfLinkedHashMap = dart.constFn(core.List$(collection.LinkedHashMap)))(),
    ListNOfLinkedHashMap: () => (T.ListNOfLinkedHashMap = dart.constFn(dart.nullable(T.ListOfLinkedHashMap())))(),
    JSArrayOfWebHistoryItem: () => (T.JSArrayOfWebHistoryItem = dart.constFn(_interceptors.JSArray$(types.WebHistoryItem)))(),
    SafeBrowsingThreatTobool: () => (T.SafeBrowsingThreatTobool = dart.constFn(dart.fnType(core.bool, [types.SafeBrowsingThreat])))(),
    JSArrayOfSafeBrowsingThreat: () => (T.JSArrayOfSafeBrowsingThreat = dart.constFn(_interceptors.JSArray$(types.SafeBrowsingThreat)))(),
    IOSURLCredentialPersistenceTobool: () => (T.IOSURLCredentialPersistenceTobool = dart.constFn(dart.fnType(core.bool, [types.IOSURLCredentialPersistence])))(),
    JSArrayOfIOSURLCredentialPersistence: () => (T.JSArrayOfIOSURLCredentialPersistence = dart.constFn(_interceptors.JSArray$(types.IOSURLCredentialPersistence)))(),
    X509CertificateToMapOfString$dynamic: () => (T.X509CertificateToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [x509_certificate.X509Certificate])))(),
    JSArrayOfX509Certificate: () => (T.JSArrayOfX509Certificate = dart.constFn(_interceptors.JSArray$(x509_certificate.X509Certificate)))(),
    ListOfUint8List: () => (T.ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))(),
    Uint8ListTovoid: () => (T.Uint8ListTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List])))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    IOSNSURLProtectionSpaceProxyTypeTobool: () => (T.IOSNSURLProtectionSpaceProxyTypeTobool = dart.constFn(dart.fnType(core.bool, [types.IOSNSURLProtectionSpaceProxyType])))(),
    JSArrayOfIOSNSURLProtectionSpaceProxyType: () => (T.JSArrayOfIOSNSURLProtectionSpaceProxyType = dart.constFn(_interceptors.JSArray$(types.IOSNSURLProtectionSpaceProxyType)))(),
    IOSNSURLProtectionSpaceAuthenticationMethodTobool: () => (T.IOSNSURLProtectionSpaceAuthenticationMethodTobool = dart.constFn(dart.fnType(core.bool, [types.IOSNSURLProtectionSpaceAuthenticationMethod])))(),
    JSArrayOfIOSNSURLProtectionSpaceAuthenticationMethod: () => (T.JSArrayOfIOSNSURLProtectionSpaceAuthenticationMethod = dart.constFn(_interceptors.JSArray$(types.IOSNSURLProtectionSpaceAuthenticationMethod)))(),
    MapOfString$dynamicTovoid: () => (T.MapOfString$dynamicTovoid = dart.constFn(dart.fnType(dart.void, [T.MapOfString$dynamic()])))(),
    URLCredentialToMapOfString$dynamic: () => (T.URLCredentialToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [types.URLCredential])))(),
    AndroidCacheModeTobool: () => (T.AndroidCacheModeTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidCacheMode])))(),
    JSArrayOfAndroidCacheMode: () => (T.JSArrayOfAndroidCacheMode = dart.constFn(_interceptors.JSArray$(types.AndroidCacheMode)))(),
    AndroidActionModeMenuItemTobool: () => (T.AndroidActionModeMenuItemTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidActionModeMenuItem])))(),
    JSArrayOfAndroidActionModeMenuItem: () => (T.JSArrayOfAndroidActionModeMenuItem = dart.constFn(_interceptors.JSArray$(types.AndroidActionModeMenuItem)))(),
    AndroidForceDarkTobool: () => (T.AndroidForceDarkTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidForceDark])))(),
    JSArrayOfAndroidForceDark: () => (T.JSArrayOfAndroidForceDark = dart.constFn(_interceptors.JSArray$(types.AndroidForceDark)))(),
    AndroidLayoutAlgorithmTobool: () => (T.AndroidLayoutAlgorithmTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidLayoutAlgorithm])))(),
    JSArrayOfAndroidLayoutAlgorithm: () => (T.JSArrayOfAndroidLayoutAlgorithm = dart.constFn(_interceptors.JSArray$(types.AndroidLayoutAlgorithm)))(),
    AndroidMixedContentModeTobool: () => (T.AndroidMixedContentModeTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidMixedContentMode])))(),
    JSArrayOfAndroidMixedContentMode: () => (T.JSArrayOfAndroidMixedContentMode = dart.constFn(_interceptors.JSArray$(types.AndroidMixedContentMode)))(),
    IOSWKSelectionGranularityTobool: () => (T.IOSWKSelectionGranularityTobool = dart.constFn(dart.fnType(core.bool, [types.IOSWKSelectionGranularity])))(),
    JSArrayOfIOSWKSelectionGranularity: () => (T.JSArrayOfIOSWKSelectionGranularity = dart.constFn(_interceptors.JSArray$(types.IOSWKSelectionGranularity)))(),
    IOSWKDataDetectorTypesTobool: () => (T.IOSWKDataDetectorTypesTobool = dart.constFn(dart.fnType(core.bool, [types.IOSWKDataDetectorTypes])))(),
    IOSUIScrollViewDecelerationRateTobool: () => (T.IOSUIScrollViewDecelerationRateTobool = dart.constFn(dart.fnType(core.bool, [types.IOSUIScrollViewDecelerationRate])))(),
    JSArrayOfIOSUIScrollViewDecelerationRate: () => (T.JSArrayOfIOSUIScrollViewDecelerationRate = dart.constFn(_interceptors.JSArray$(types.IOSUIScrollViewDecelerationRate)))(),
    UserPreferredContentModeTobool: () => (T.UserPreferredContentModeTobool = dart.constFn(dart.fnType(core.bool, [types.UserPreferredContentMode])))(),
    JSArrayOfUserPreferredContentMode: () => (T.JSArrayOfUserPreferredContentMode = dart.constFn(_interceptors.JSArray$(types.UserPreferredContentMode)))(),
    IOSUIModalPresentationStyleTobool: () => (T.IOSUIModalPresentationStyleTobool = dart.constFn(dart.fnType(core.bool, [types.IOSUIModalPresentationStyle])))(),
    JSArrayOfIOSUIModalPresentationStyle: () => (T.JSArrayOfIOSUIModalPresentationStyle = dart.constFn(_interceptors.JSArray$(types.IOSUIModalPresentationStyle)))(),
    IOSUIModalTransitionStyleTobool: () => (T.IOSUIModalTransitionStyleTobool = dart.constFn(dart.fnType(core.bool, [types.IOSUIModalTransitionStyle])))(),
    JSArrayOfIOSUIModalTransitionStyle: () => (T.JSArrayOfIOSUIModalTransitionStyle = dart.constFn(_interceptors.JSArray$(types.IOSUIModalTransitionStyle)))(),
    IOSSafariDismissButtonStyleTobool: () => (T.IOSSafariDismissButtonStyleTobool = dart.constFn(dart.fnType(core.bool, [types.IOSSafariDismissButtonStyle])))(),
    JSArrayOfIOSSafariDismissButtonStyle: () => (T.JSArrayOfIOSSafariDismissButtonStyle = dart.constFn(_interceptors.JSArray$(types.IOSSafariDismissButtonStyle)))(),
    AjaxRequestEventTypeTobool: () => (T.AjaxRequestEventTypeTobool = dart.constFn(dart.fnType(core.bool, [types.AjaxRequestEventType])))(),
    JSArrayOfAjaxRequestEventType: () => (T.JSArrayOfAjaxRequestEventType = dart.constFn(_interceptors.JSArray$(types.AjaxRequestEventType)))(),
    AjaxRequestReadyStateTobool: () => (T.AjaxRequestReadyStateTobool = dart.constFn(dart.fnType(core.bool, [types.AjaxRequestReadyState])))(),
    JSArrayOfAjaxRequestReadyState: () => (T.JSArrayOfAjaxRequestReadyState = dart.constFn(_interceptors.JSArray$(types.AjaxRequestReadyState)))(),
    ContentBlockerTriggerResourceTypeTobool: () => (T.ContentBlockerTriggerResourceTypeTobool = dart.constFn(dart.fnType(core.bool, [types.ContentBlockerTriggerResourceType])))(),
    ContentBlockerTriggerLoadTypeTobool: () => (T.ContentBlockerTriggerLoadTypeTobool = dart.constFn(dart.fnType(core.bool, [types.ContentBlockerTriggerLoadType])))(),
    ContentBlockerActionTypeTobool: () => (T.ContentBlockerActionTypeTobool = dart.constFn(dart.fnType(core.bool, [types.ContentBlockerActionType])))(),
    JSArrayOfContentBlockerActionType: () => (T.JSArrayOfContentBlockerActionType = dart.constFn(_interceptors.JSArray$(types.ContentBlockerActionType)))(),
    IOSWKNavigationTypeTobool: () => (T.IOSWKNavigationTypeTobool = dart.constFn(dart.fnType(core.bool, [types.IOSWKNavigationType])))(),
    JSArrayOfIOSWKNavigationType: () => (T.JSArrayOfIOSWKNavigationType = dart.constFn(_interceptors.JSArray$(types.IOSWKNavigationType)))(),
    IOSURLRequestCachePolicyTobool: () => (T.IOSURLRequestCachePolicyTobool = dart.constFn(dart.fnType(core.bool, [types.IOSURLRequestCachePolicy])))(),
    JSArrayOfIOSURLRequestCachePolicy: () => (T.JSArrayOfIOSURLRequestCachePolicy = dart.constFn(_interceptors.JSArray$(types.IOSURLRequestCachePolicy)))(),
    IOSURLRequestNetworkServiceTypeTobool: () => (T.IOSURLRequestNetworkServiceTypeTobool = dart.constFn(dart.fnType(core.bool, [types.IOSURLRequestNetworkServiceType])))(),
    JSArrayOfIOSURLRequestNetworkServiceType: () => (T.JSArrayOfIOSURLRequestNetworkServiceType = dart.constFn(_interceptors.JSArray$(types.IOSURLRequestNetworkServiceType)))(),
    IOSWKWebsiteDataTypeTobool: () => (T.IOSWKWebsiteDataTypeTobool = dart.constFn(dart.fnType(core.bool, [types.IOSWKWebsiteDataType])))(),
    JSArrayOfIOSWKWebsiteDataType: () => (T.JSArrayOfIOSWKWebsiteDataType = dart.constFn(_interceptors.JSArray$(types.IOSWKWebsiteDataType)))(),
    InAppWebViewHitTestResultTypeTobool: () => (T.InAppWebViewHitTestResultTypeTobool = dart.constFn(dart.fnType(core.bool, [types.InAppWebViewHitTestResultType])))(),
    JSArrayOfInAppWebViewHitTestResultType: () => (T.JSArrayOfInAppWebViewHitTestResultType = dart.constFn(_interceptors.JSArray$(types.InAppWebViewHitTestResultType)))(),
    RendererPriorityTobool: () => (T.RendererPriorityTobool = dart.constFn(dart.fnType(core.bool, [types.RendererPriority])))(),
    JSArrayOfRendererPriority: () => (T.JSArrayOfRendererPriority = dart.constFn(_interceptors.JSArray$(types.RendererPriority)))(),
    AndroidOverScrollModeTobool: () => (T.AndroidOverScrollModeTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidOverScrollMode])))(),
    JSArrayOfAndroidOverScrollMode: () => (T.JSArrayOfAndroidOverScrollMode = dart.constFn(_interceptors.JSArray$(types.AndroidOverScrollMode)))(),
    AndroidScrollBarStyleTobool: () => (T.AndroidScrollBarStyleTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidScrollBarStyle])))(),
    JSArrayOfAndroidScrollBarStyle: () => (T.JSArrayOfAndroidScrollBarStyle = dart.constFn(_interceptors.JSArray$(types.AndroidScrollBarStyle)))(),
    AndroidVerticalScrollbarPositionTobool: () => (T.AndroidVerticalScrollbarPositionTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidVerticalScrollbarPosition])))(),
    JSArrayOfAndroidVerticalScrollbarPosition: () => (T.JSArrayOfAndroidVerticalScrollbarPosition = dart.constFn(_interceptors.JSArray$(types.AndroidVerticalScrollbarPosition)))(),
    WebStorageTypeTobool: () => (T.WebStorageTypeTobool = dart.constFn(dart.fnType(core.bool, [types.WebStorageType])))(),
    JSArrayOfWebStorageType: () => (T.JSArrayOfWebStorageType = dart.constFn(_interceptors.JSArray$(types.WebStorageType)))(),
    HTTPCookieSameSitePolicyTobool: () => (T.HTTPCookieSameSitePolicyTobool = dart.constFn(dart.fnType(core.bool, [types.HTTPCookieSameSitePolicy])))(),
    JSArrayOfHTTPCookieSameSitePolicy: () => (T.JSArrayOfHTTPCookieSameSitePolicy = dart.constFn(_interceptors.JSArray$(types.HTTPCookieSameSitePolicy)))(),
    AndroidSslErrorTobool: () => (T.AndroidSslErrorTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidSslError])))(),
    JSArrayOfAndroidSslError: () => (T.JSArrayOfAndroidSslError = dart.constFn(_interceptors.JSArray$(types.AndroidSslError)))(),
    IOSSslErrorTobool: () => (T.IOSSslErrorTobool = dart.constFn(dart.fnType(core.bool, [types.IOSSslError])))(),
    JSArrayOfIOSSslError: () => (T.JSArrayOfIOSSslError = dart.constFn(_interceptors.JSArray$(types.IOSSslError)))(),
    IOSUIScrollViewContentInsetAdjustmentBehaviorTobool: () => (T.IOSUIScrollViewContentInsetAdjustmentBehaviorTobool = dart.constFn(dart.fnType(core.bool, [types.IOSUIScrollViewContentInsetAdjustmentBehavior])))(),
    JSArrayOfIOSUIScrollViewContentInsetAdjustmentBehavior: () => (T.JSArrayOfIOSUIScrollViewContentInsetAdjustmentBehavior = dart.constFn(_interceptors.JSArray$(types.IOSUIScrollViewContentInsetAdjustmentBehavior)))(),
    UserScriptInjectionTimeTobool: () => (T.UserScriptInjectionTimeTobool = dart.constFn(dart.fnType(core.bool, [types.UserScriptInjectionTime])))(),
    JSArrayOfUserScriptInjectionTime: () => (T.JSArrayOfUserScriptInjectionTime = dart.constFn(_interceptors.JSArray$(types.UserScriptInjectionTime)))(),
    CompressFormatTobool: () => (T.CompressFormatTobool = dart.constFn(dart.fnType(core.bool, [types.CompressFormat])))(),
    JSArrayOfCompressFormat: () => (T.JSArrayOfCompressFormat = dart.constFn(_interceptors.JSArray$(types.CompressFormat)))(),
    WebArchiveFormatTobool: () => (T.WebArchiveFormatTobool = dart.constFn(dart.fnType(core.bool, [types.WebArchiveFormat])))(),
    JSArrayOfWebArchiveFormat: () => (T.JSArrayOfWebArchiveFormat = dart.constFn(_interceptors.JSArray$(types.WebArchiveFormat)))(),
    CrossOriginTobool: () => (T.CrossOriginTobool = dart.constFn(dart.fnType(core.bool, [types.CrossOrigin])))(),
    JSArrayOfCrossOrigin: () => (T.JSArrayOfCrossOrigin = dart.constFn(_interceptors.JSArray$(types.CrossOrigin)))(),
    ReferrerPolicyTobool: () => (T.ReferrerPolicyTobool = dart.constFn(dart.fnType(core.bool, [types.ReferrerPolicy])))(),
    JSArrayOfReferrerPolicy: () => (T.JSArrayOfReferrerPolicy = dart.constFn(_interceptors.JSArray$(types.ReferrerPolicy)))(),
    IOSNSUnderlineStyleTobool: () => (T.IOSNSUnderlineStyleTobool = dart.constFn(dart.fnType(core.bool, [types.IOSNSUnderlineStyle])))(),
    JSArrayOfIOSNSUnderlineStyle: () => (T.JSArrayOfIOSNSUnderlineStyle = dart.constFn(_interceptors.JSArray$(types.IOSNSUnderlineStyle)))(),
    IOSNSAttributedStringTextEffectStyleTobool: () => (T.IOSNSAttributedStringTextEffectStyleTobool = dart.constFn(dart.fnType(core.bool, [types.IOSNSAttributedStringTextEffectStyle])))(),
    JSArrayOfIOSNSAttributedStringTextEffectStyle: () => (T.JSArrayOfIOSNSAttributedStringTextEffectStyle = dart.constFn(_interceptors.JSArray$(types.IOSNSAttributedStringTextEffectStyle)))(),
    AndroidPullToRefreshSizeTobool: () => (T.AndroidPullToRefreshSizeTobool = dart.constFn(dart.fnType(core.bool, [types.AndroidPullToRefreshSize])))(),
    JSArrayOfAndroidPullToRefreshSize: () => (T.JSArrayOfAndroidPullToRefreshSize = dart.constFn(_interceptors.JSArray$(types.AndroidPullToRefreshSize)))(),
    ContextMenuItemL: () => (T.ContextMenuItemL = dart.constFn(dart.legacy(context_menu.ContextMenuItem)))(),
    ContextMenuItemToMapOfString$dynamic: () => (T.ContextMenuItemToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [context_menu.ContextMenuItem])))(),
    VoidToList: () => (T.VoidToList = dart.constFn(dart.fnType(core.List, [])))(),
    InAppBrowserClassOptionsN: () => (T.InAppBrowserClassOptionsN = dart.constFn(dart.nullable(in_app_browser_options$0.InAppBrowserClassOptions)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    $add: dartx.add,
    $putIfAbsent: dartx.putIfAbsent,
    $_get: dartx._get,
    android: dart.privateName(web_storage_manager$0, "WebStorageManager.android"),
    ios: dart.privateName(web_storage_manager$0, "WebStorageManager.ios"),
    MethodChannel__binaryMessenger: dart.privateName(platform_channel, "MethodChannel._binaryMessenger"),
    StandardMethodCodec_messageCodec: dart.privateName(message_codecs, "StandardMethodCodec.messageCodec"),
    MethodChannel_codec: dart.privateName(platform_channel, "MethodChannel.codec"),
    MethodChannel_name: dart.privateName(platform_channel, "MethodChannel.name"),
    serviceWorkerClient: dart.privateName(service_worker_controller, "AndroidServiceWorkerController.serviceWorkerClient"),
    shouldInterceptRequest: dart.privateName(service_worker_controller, "AndroidServiceWorkerClient.shouldInterceptRequest"),
    entersReaderIfAvailable: dart.privateName(safari_options, "IOSSafariOptions.entersReaderIfAvailable"),
    barCollapsingEnabled: dart.privateName(safari_options, "IOSSafariOptions.barCollapsingEnabled"),
    dismissButtonStyle: dart.privateName(safari_options, "IOSSafariOptions.dismissButtonStyle"),
    preferredBarTintColor: dart.privateName(safari_options, "IOSSafariOptions.preferredBarTintColor"),
    preferredControlTintColor: dart.privateName(safari_options, "IOSSafariOptions.preferredControlTintColor"),
    presentationStyle: dart.privateName(safari_options, "IOSSafariOptions.presentationStyle"),
    transitionStyle: dart.privateName(safari_options, "IOSSafariOptions.transitionStyle"),
    IOSSafariDismissButtonStyle__value: dart.privateName(types, "IOSSafariDismissButtonStyle._value"),
    IOSUIModalPresentationStyle__value: dart.privateName(types, "IOSUIModalPresentationStyle._value"),
    IOSUIModalTransitionStyle__value: dart.privateName(types, "IOSUIModalTransitionStyle._value"),
    $toString: dartx.toString,
    addDefaultShareMenuItem: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.addDefaultShareMenuItem"),
    showTitle: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.showTitle"),
    toolbarBackgroundColor: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.toolbarBackgroundColor"),
    enableUrlBarHiding: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.enableUrlBarHiding"),
    instantAppsEnabled: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.instantAppsEnabled"),
    packageName: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.packageName"),
    keepAliveEnabled: dart.privateName(chrome_custom_tabs_options, "AndroidChromeCustomTabsOptions.keepAliveEnabled"),
    android$1: dart.privateName(chrome_safari_browser_options, "ChromeSafariBrowserClassOptions.android"),
    ios$1: dart.privateName(chrome_safari_browser_options, "ChromeSafariBrowserClassOptions.ios"),
    $addAll: dartx.addAll,
    message: dart.privateName(chrome_safari_browser, "ChromeSafariBrowserAlreadyOpenedException.message"),
    message$1: dart.privateName(chrome_safari_browser, "ChromeSafariBrowserNotOpenedException.message"),
    __ChromeSafariBrowser_id: dart.privateName(chrome_safari_browser, "_#ChromeSafariBrowser#id"),
    __ChromeSafariBrowser_id_isSet: dart.privateName(chrome_safari_browser, "_#ChromeSafariBrowser#id#isSet"),
    _menuItems: dart.privateName(chrome_safari_browser, "_menuItems"),
    _isOpened: dart.privateName(chrome_safari_browser, "_isOpened"),
    __ChromeSafariBrowser__channel: dart.privateName(chrome_safari_browser, "_#ChromeSafariBrowser#_channel"),
    __ChromeSafariBrowser__channel_isSet: dart.privateName(chrome_safari_browser, "_#ChromeSafariBrowser#_channel#isSet"),
    _channel: dart.privateName(chrome_safari_browser, "_channel"),
    $isNotEmpty: dartx.isNotEmpty,
    $forEach: dartx.forEach,
    $_set: dartx._set,
    $isEmpty: dartx.isEmpty,
    id: dart.privateName(chrome_safari_browser, "ChromeSafariBrowserMenuItem.id"),
    label: dart.privateName(chrome_safari_browser, "ChromeSafariBrowserMenuItem.label"),
    action: dart.privateName(chrome_safari_browser, "ChromeSafariBrowserMenuItem.action"),
    __CookieManager_ios: dart.privateName(cookie_manager, "_#CookieManager#ios"),
    __CookieManager_ios_isSet: dart.privateName(cookie_manager, "_#CookieManager#ios#isSet"),
    _getDomainName: dart.privateName(cookie_manager, "_getDomainName"),
    _setCookieWithJavaScript: dart.privateName(cookie_manager, "_setCookieWithJavaScript"),
    _getCookieExpirationDate: dart.privateName(cookie_manager, "_getCookieExpirationDate"),
    _getCookiesWithJavaScript: dart.privateName(cookie_manager, "_getCookiesWithJavaScript"),
    $cast: dartx.cast,
    $split: dartx.split,
    $trim: dartx.trim,
    $map: dartx.map,
    $toList: dartx.toList,
    $firstWhere: dartx.firstWhere,
    $length: dartx.length,
    $startsWith: dartx.startsWith,
    $substring: dartx.substring,
    gestureRecognizers: dart.privateName(in_app_webview, "InAppWebView.gestureRecognizers"),
    windowId: dart.privateName(in_app_webview, "InAppWebView.windowId"),
    androidOnGeolocationPermissionsHidePrompt: dart.privateName(in_app_webview, "InAppWebView.androidOnGeolocationPermissionsHidePrompt"),
    androidOnGeolocationPermissionsShowPrompt: dart.privateName(in_app_webview, "InAppWebView.androidOnGeolocationPermissionsShowPrompt"),
    androidOnPermissionRequest: dart.privateName(in_app_webview, "InAppWebView.androidOnPermissionRequest"),
    androidOnSafeBrowsingHit: dart.privateName(in_app_webview, "InAppWebView.androidOnSafeBrowsingHit"),
    initialData: dart.privateName(in_app_webview, "InAppWebView.initialData"),
    initialFile: dart.privateName(in_app_webview, "InAppWebView.initialFile"),
    initialOptions: dart.privateName(in_app_webview, "InAppWebView.initialOptions"),
    initialUrlRequest: dart.privateName(in_app_webview, "InAppWebView.initialUrlRequest"),
    initialUserScripts: dart.privateName(in_app_webview, "InAppWebView.initialUserScripts"),
    pullToRefreshController: dart.privateName(in_app_webview, "InAppWebView.pullToRefreshController"),
    contextMenu: dart.privateName(in_app_webview, "InAppWebView.contextMenu"),
    onPageCommitVisible: dart.privateName(in_app_webview, "InAppWebView.onPageCommitVisible"),
    onTitleChanged: dart.privateName(in_app_webview, "InAppWebView.onTitleChanged"),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.privateName(in_app_webview, "InAppWebView.iosOnDidReceiveServerRedirectForProvisionalNavigation"),
    iosOnWebContentProcessDidTerminate: dart.privateName(in_app_webview, "InAppWebView.iosOnWebContentProcessDidTerminate"),
    iosOnNavigationResponse: dart.privateName(in_app_webview, "InAppWebView.iosOnNavigationResponse"),
    iosShouldAllowDeprecatedTLS: dart.privateName(in_app_webview, "InAppWebView.iosShouldAllowDeprecatedTLS"),
    onAjaxProgress: dart.privateName(in_app_webview, "InAppWebView.onAjaxProgress"),
    onAjaxReadyStateChange: dart.privateName(in_app_webview, "InAppWebView.onAjaxReadyStateChange"),
    onConsoleMessage: dart.privateName(in_app_webview, "InAppWebView.onConsoleMessage"),
    onCreateWindow: dart.privateName(in_app_webview, "InAppWebView.onCreateWindow"),
    onCloseWindow: dart.privateName(in_app_webview, "InAppWebView.onCloseWindow"),
    onWindowFocus: dart.privateName(in_app_webview, "InAppWebView.onWindowFocus"),
    onWindowBlur: dart.privateName(in_app_webview, "InAppWebView.onWindowBlur"),
    androidOnReceivedIcon: dart.privateName(in_app_webview, "InAppWebView.androidOnReceivedIcon"),
    androidOnReceivedTouchIconUrl: dart.privateName(in_app_webview, "InAppWebView.androidOnReceivedTouchIconUrl"),
    onDownloadStart: dart.privateName(in_app_webview, "InAppWebView.onDownloadStart"),
    onFindResultReceived: dart.privateName(in_app_webview, "InAppWebView.onFindResultReceived"),
    onJsAlert: dart.privateName(in_app_webview, "InAppWebView.onJsAlert"),
    onJsConfirm: dart.privateName(in_app_webview, "InAppWebView.onJsConfirm"),
    onJsPrompt: dart.privateName(in_app_webview, "InAppWebView.onJsPrompt"),
    onLoadError: dart.privateName(in_app_webview, "InAppWebView.onLoadError"),
    onLoadHttpError: dart.privateName(in_app_webview, "InAppWebView.onLoadHttpError"),
    onLoadResource: dart.privateName(in_app_webview, "InAppWebView.onLoadResource"),
    onLoadResourceCustomScheme: dart.privateName(in_app_webview, "InAppWebView.onLoadResourceCustomScheme"),
    onLoadStart: dart.privateName(in_app_webview, "InAppWebView.onLoadStart"),
    onLoadStop: dart.privateName(in_app_webview, "InAppWebView.onLoadStop"),
    onLongPressHitTestResult: dart.privateName(in_app_webview, "InAppWebView.onLongPressHitTestResult"),
    onPrint: dart.privateName(in_app_webview, "InAppWebView.onPrint"),
    onProgressChanged: dart.privateName(in_app_webview, "InAppWebView.onProgressChanged"),
    onReceivedClientCertRequest: dart.privateName(in_app_webview, "InAppWebView.onReceivedClientCertRequest"),
    onReceivedHttpAuthRequest: dart.privateName(in_app_webview, "InAppWebView.onReceivedHttpAuthRequest"),
    onReceivedServerTrustAuthRequest: dart.privateName(in_app_webview, "InAppWebView.onReceivedServerTrustAuthRequest"),
    onScrollChanged: dart.privateName(in_app_webview, "InAppWebView.onScrollChanged"),
    onUpdateVisitedHistory: dart.privateName(in_app_webview, "InAppWebView.onUpdateVisitedHistory"),
    onWebViewCreated: dart.privateName(in_app_webview, "InAppWebView.onWebViewCreated"),
    shouldInterceptAjaxRequest: dart.privateName(in_app_webview, "InAppWebView.shouldInterceptAjaxRequest"),
    shouldInterceptFetchRequest: dart.privateName(in_app_webview, "InAppWebView.shouldInterceptFetchRequest"),
    shouldOverrideUrlLoading: dart.privateName(in_app_webview, "InAppWebView.shouldOverrideUrlLoading"),
    onEnterFullscreen: dart.privateName(in_app_webview, "InAppWebView.onEnterFullscreen"),
    onExitFullscreen: dart.privateName(in_app_webview, "InAppWebView.onExitFullscreen"),
    onOverScrolled: dart.privateName(in_app_webview, "InAppWebView.onOverScrolled"),
    onZoomScaleChanged: dart.privateName(in_app_webview, "InAppWebView.onZoomScaleChanged"),
    androidShouldInterceptRequest: dart.privateName(in_app_webview, "InAppWebView.androidShouldInterceptRequest"),
    androidOnRenderProcessUnresponsive: dart.privateName(in_app_webview, "InAppWebView.androidOnRenderProcessUnresponsive"),
    androidOnRenderProcessResponsive: dart.privateName(in_app_webview, "InAppWebView.androidOnRenderProcessResponsive"),
    androidOnRenderProcessGone: dart.privateName(in_app_webview, "InAppWebView.androidOnRenderProcessGone"),
    androidOnFormResubmission: dart.privateName(in_app_webview, "InAppWebView.androidOnFormResubmission"),
    androidOnScaleChanged: dart.privateName(in_app_webview, "InAppWebView.androidOnScaleChanged"),
    androidOnJsBeforeUnload: dart.privateName(in_app_webview, "InAppWebView.androidOnJsBeforeUnload"),
    androidOnReceivedLoginRequest: dart.privateName(in_app_webview, "InAppWebView.androidOnReceivedLoginRequest"),
    ___InAppWebViewState__controller: dart.privateName(in_app_webview, "_#_InAppWebViewState#_controller"),
    ___InAppWebViewState__controller_isSet: dart.privateName(in_app_webview, "_#_InAppWebViewState#_controller#isSet"),
    _controller: dart.privateName(in_app_webview, "_controller"),
    _Location_parameterLocations: dart.privateName(widget_inspector, "_Location.parameterLocations"),
    _Location_name: dart.privateName(widget_inspector, "_Location.name"),
    _Location_column: dart.privateName(widget_inspector, "_Location.column"),
    _Location_line: dart.privateName(widget_inspector, "_Location.line"),
    _Location_file: dart.privateName(widget_inspector, "_Location.file"),
    _onPlatformViewCreated: dart.privateName(in_app_webview, "_onPlatformViewCreated"),
    enabled: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.enabled"),
    color: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.color"),
    backgroundColor: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.backgroundColor"),
    distanceToTriggerSync: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.distanceToTriggerSync"),
    slingshotDistance: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.slingshotDistance"),
    size: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.size"),
    attributedTitle: dart.privateName(pull_to_refresh_options, "PullToRefreshOptions.attributedTitle"),
    trigger: dart.privateName(content_blocker, "ContentBlocker.trigger"),
    action$1: dart.privateName(content_blocker, "ContentBlocker.action"),
    __ContentBlockerTrigger_urlFilter: dart.privateName(content_blocker, "_#ContentBlockerTrigger#urlFilter"),
    __ContentBlockerTrigger_urlFilter_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#urlFilter#isSet"),
    __ContentBlockerTrigger_urlFilterIsCaseSensitive: dart.privateName(content_blocker, "_#ContentBlockerTrigger#urlFilterIsCaseSensitive"),
    __ContentBlockerTrigger_urlFilterIsCaseSensitive_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#urlFilterIsCaseSensitive#isSet"),
    __ContentBlockerTrigger_resourceType: dart.privateName(content_blocker, "_#ContentBlockerTrigger#resourceType"),
    __ContentBlockerTrigger_resourceType_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#resourceType#isSet"),
    __ContentBlockerTrigger_ifDomain: dart.privateName(content_blocker, "_#ContentBlockerTrigger#ifDomain"),
    __ContentBlockerTrigger_ifDomain_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#ifDomain#isSet"),
    __ContentBlockerTrigger_unlessDomain: dart.privateName(content_blocker, "_#ContentBlockerTrigger#unlessDomain"),
    __ContentBlockerTrigger_unlessDomain_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#unlessDomain#isSet"),
    __ContentBlockerTrigger_loadType: dart.privateName(content_blocker, "_#ContentBlockerTrigger#loadType"),
    __ContentBlockerTrigger_loadType_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#loadType#isSet"),
    __ContentBlockerTrigger_ifTopUrl: dart.privateName(content_blocker, "_#ContentBlockerTrigger#ifTopUrl"),
    __ContentBlockerTrigger_ifTopUrl_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#ifTopUrl#isSet"),
    __ContentBlockerTrigger_unlessTopUrl: dart.privateName(content_blocker, "_#ContentBlockerTrigger#unlessTopUrl"),
    __ContentBlockerTrigger_unlessTopUrl_isSet: dart.privateName(content_blocker, "_#ContentBlockerTrigger#unlessTopUrl#isSet"),
    $keys: dartx.keys,
    $where: dartx.where,
    $remove: dartx.remove,
    selector: dart.privateName(content_blocker, "ContentBlockerAction.selector"),
    __ContentBlockerAction_type: dart.privateName(content_blocker, "_#ContentBlockerAction#type"),
    __ContentBlockerAction_type_isSet: dart.privateName(content_blocker, "_#ContentBlockerAction#type#isSet"),
    disallowOverScroll: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.disallowOverScroll"),
    enableViewportScale: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.enableViewportScale"),
    suppressesIncrementalRendering: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.suppressesIncrementalRendering"),
    allowsAirPlayForMediaPlayback: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.allowsAirPlayForMediaPlayback"),
    allowsBackForwardNavigationGestures: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.allowsBackForwardNavigationGestures"),
    allowsLinkPreview: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.allowsLinkPreview"),
    ignoresViewportScaleLimits: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.ignoresViewportScaleLimits"),
    allowsInlineMediaPlayback: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.allowsInlineMediaPlayback"),
    allowsPictureInPictureMediaPlayback: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.allowsPictureInPictureMediaPlayback"),
    isFraudulentWebsiteWarningEnabled: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.isFraudulentWebsiteWarningEnabled"),
    selectionGranularity: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.selectionGranularity"),
    dataDetectorTypes: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.dataDetectorTypes"),
    sharedCookiesEnabled: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.sharedCookiesEnabled"),
    automaticallyAdjustsScrollIndicatorInsets: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.automaticallyAdjustsScrollIndicatorInsets"),
    accessibilityIgnoresInvertColors: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.accessibilityIgnoresInvertColors"),
    decelerationRate: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.decelerationRate"),
    alwaysBounceVertical: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.alwaysBounceVertical"),
    alwaysBounceHorizontal: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.alwaysBounceHorizontal"),
    scrollsToTop: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.scrollsToTop"),
    isPagingEnabled: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.isPagingEnabled"),
    maximumZoomScale: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.maximumZoomScale"),
    minimumZoomScale: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.minimumZoomScale"),
    contentInsetAdjustmentBehavior: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.contentInsetAdjustmentBehavior"),
    isDirectionalLockEnabled: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.isDirectionalLockEnabled"),
    mediaType: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.mediaType"),
    pageZoom: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.pageZoom"),
    limitsNavigationsToAppBoundDomains: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.limitsNavigationsToAppBoundDomains"),
    useOnNavigationResponse: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.useOnNavigationResponse"),
    applePayAPIEnabled: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.applePayAPIEnabled"),
    allowingReadAccessTo: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.allowingReadAccessTo"),
    disableLongPressContextMenuOnLinks: dart.privateName(in_app_webview_options, "IOSInAppWebViewOptions.disableLongPressContextMenuOnLinks"),
    IOSWKSelectionGranularity__value: dart.privateName(types, "IOSWKSelectionGranularity._value"),
    IOSWKDataDetectorTypes__value: dart.privateName(types, "IOSWKDataDetectorTypes._value"),
    IOSUIScrollViewDecelerationRate__value: dart.privateName(types, "IOSUIScrollViewDecelerationRate._value"),
    IOSUIScrollViewContentInsetAdjustmentBehavior__value: dart.privateName(types, "IOSUIScrollViewContentInsetAdjustmentBehavior._value"),
    toolbarTopTranslucent: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.toolbarTopTranslucent"),
    toolbarTopBarTintColor: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.toolbarTopBarTintColor"),
    toolbarTopTintColor: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.toolbarTopTintColor"),
    hideToolbarBottom: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.hideToolbarBottom"),
    toolbarBottomBackgroundColor: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.toolbarBottomBackgroundColor"),
    toolbarBottomTintColor: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.toolbarBottomTintColor"),
    toolbarBottomTranslucent: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.toolbarBottomTranslucent"),
    closeButtonCaption: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.closeButtonCaption"),
    closeButtonColor: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.closeButtonColor"),
    presentationStyle$1: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.presentationStyle"),
    transitionStyle$1: dart.privateName(in_app_browser_options, "IOSInAppBrowserOptions.transitionStyle"),
    hideTitleBar: dart.privateName(in_app_browser_options$, "AndroidInAppBrowserOptions.hideTitleBar"),
    toolbarTopFixedTitle: dart.privateName(in_app_browser_options$, "AndroidInAppBrowserOptions.toolbarTopFixedTitle"),
    closeOnCannotGoBack: dart.privateName(in_app_browser_options$, "AndroidInAppBrowserOptions.closeOnCannotGoBack"),
    allowGoBackWithBackButton: dart.privateName(in_app_browser_options$, "AndroidInAppBrowserOptions.allowGoBackWithBackButton"),
    shouldCloseOnBackButtonPressed: dart.privateName(in_app_browser_options$, "AndroidInAppBrowserOptions.shouldCloseOnBackButtonPressed"),
    __InAppBrowserClassOptions_crossPlatform: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#crossPlatform"),
    __InAppBrowserClassOptions_crossPlatform_isSet: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#crossPlatform#isSet"),
    __InAppBrowserClassOptions_android: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#android"),
    __InAppBrowserClassOptions_android_isSet: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#android#isSet"),
    __InAppBrowserClassOptions_ios: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#ios"),
    __InAppBrowserClassOptions_ios_isSet: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#ios#isSet"),
    __InAppBrowserClassOptions_inAppWebViewGroupOptions: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#inAppWebViewGroupOptions"),
    __InAppBrowserClassOptions_inAppWebViewGroupOptions_isSet: dart.privateName(in_app_browser_options$0, "_#InAppBrowserClassOptions#inAppWebViewGroupOptions#isSet"),
    hidden: dart.privateName(in_app_browser_options$0, "InAppBrowserOptions.hidden"),
    hideToolbarTop: dart.privateName(in_app_browser_options$0, "InAppBrowserOptions.hideToolbarTop"),
    toolbarTopBackgroundColor: dart.privateName(in_app_browser_options$0, "InAppBrowserOptions.toolbarTopBackgroundColor"),
    hideUrlBar: dart.privateName(in_app_browser_options$0, "InAppBrowserOptions.hideUrlBar"),
    hideProgressBar: dart.privateName(in_app_browser_options$0, "InAppBrowserOptions.hideProgressBar"),
    textZoom: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.textZoom"),
    clearSessionCache: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.clearSessionCache"),
    builtInZoomControls: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.builtInZoomControls"),
    displayZoomControls: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.displayZoomControls"),
    databaseEnabled: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.databaseEnabled"),
    domStorageEnabled: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.domStorageEnabled"),
    useWideViewPort: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.useWideViewPort"),
    safeBrowsingEnabled: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.safeBrowsingEnabled"),
    mixedContentMode: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.mixedContentMode"),
    allowContentAccess: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.allowContentAccess"),
    allowFileAccess: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.allowFileAccess"),
    appCachePath: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.appCachePath"),
    blockNetworkImage: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.blockNetworkImage"),
    blockNetworkLoads: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.blockNetworkLoads"),
    cacheMode: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.cacheMode"),
    cursiveFontFamily: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.cursiveFontFamily"),
    defaultFixedFontSize: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.defaultFixedFontSize"),
    defaultFontSize: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.defaultFontSize"),
    defaultTextEncodingName: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.defaultTextEncodingName"),
    disabledActionModeMenuItems: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.disabledActionModeMenuItems"),
    fantasyFontFamily: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.fantasyFontFamily"),
    fixedFontFamily: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.fixedFontFamily"),
    forceDark: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.forceDark"),
    geolocationEnabled: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.geolocationEnabled"),
    layoutAlgorithm: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.layoutAlgorithm"),
    loadWithOverviewMode: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.loadWithOverviewMode"),
    loadsImagesAutomatically: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.loadsImagesAutomatically"),
    minimumLogicalFontSize: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.minimumLogicalFontSize"),
    initialScale: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.initialScale"),
    needInitialFocus: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.needInitialFocus"),
    offscreenPreRaster: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.offscreenPreRaster"),
    sansSerifFontFamily: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.sansSerifFontFamily"),
    serifFontFamily: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.serifFontFamily"),
    standardFontFamily: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.standardFontFamily"),
    saveFormData: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.saveFormData"),
    thirdPartyCookiesEnabled: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.thirdPartyCookiesEnabled"),
    hardwareAcceleration: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.hardwareAcceleration"),
    supportMultipleWindows: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.supportMultipleWindows"),
    regexToCancelSubFramesLoading: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.regexToCancelSubFramesLoading"),
    useHybridComposition: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.useHybridComposition"),
    useShouldInterceptRequest: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.useShouldInterceptRequest"),
    useOnRenderProcessGone: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.useOnRenderProcessGone"),
    overScrollMode: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.overScrollMode"),
    networkAvailable: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.networkAvailable"),
    scrollBarStyle: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.scrollBarStyle"),
    verticalScrollbarPosition: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.verticalScrollbarPosition"),
    scrollBarDefaultDelayBeforeFade: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.scrollBarDefaultDelayBeforeFade"),
    scrollbarFadingEnabled: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.scrollbarFadingEnabled"),
    scrollBarFadeDuration: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.scrollBarFadeDuration"),
    rendererPriorityPolicy: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.rendererPriorityPolicy"),
    disableDefaultErrorPage: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.disableDefaultErrorPage"),
    verticalScrollbarThumbColor: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.verticalScrollbarThumbColor"),
    verticalScrollbarTrackColor: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.verticalScrollbarTrackColor"),
    horizontalScrollbarThumbColor: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.horizontalScrollbarThumbColor"),
    horizontalScrollbarTrackColor: dart.privateName(in_app_webview_options$, "AndroidInAppWebViewOptions.horizontalScrollbarTrackColor"),
    AndroidCacheMode__value: dart.privateName(types, "AndroidCacheMode._value"),
    AndroidForceDark__value: dart.privateName(types, "AndroidForceDark._value"),
    AndroidOverScrollMode__value: dart.privateName(types, "AndroidOverScrollMode._value"),
    AndroidScrollBarStyle__value: dart.privateName(types, "AndroidScrollBarStyle._value"),
    AndroidVerticalScrollbarPosition__value: dart.privateName(types, "AndroidVerticalScrollbarPosition._value"),
    __InAppWebViewGroupOptions_crossPlatform: dart.privateName(in_app_webview_options$0, "_#InAppWebViewGroupOptions#crossPlatform"),
    __InAppWebViewGroupOptions_crossPlatform_isSet: dart.privateName(in_app_webview_options$0, "_#InAppWebViewGroupOptions#crossPlatform#isSet"),
    __InAppWebViewGroupOptions_android: dart.privateName(in_app_webview_options$0, "_#InAppWebViewGroupOptions#android"),
    __InAppWebViewGroupOptions_android_isSet: dart.privateName(in_app_webview_options$0, "_#InAppWebViewGroupOptions#android#isSet"),
    __InAppWebViewGroupOptions_ios: dart.privateName(in_app_webview_options$0, "_#InAppWebViewGroupOptions#ios"),
    __InAppWebViewGroupOptions_ios_isSet: dart.privateName(in_app_webview_options$0, "_#InAppWebViewGroupOptions#ios#isSet"),
    useShouldOverrideUrlLoading: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.useShouldOverrideUrlLoading"),
    useOnLoadResource: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.useOnLoadResource"),
    useOnDownloadStart: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.useOnDownloadStart"),
    clearCache: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.clearCache"),
    userAgent: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.userAgent"),
    applicationNameForUserAgent: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.applicationNameForUserAgent"),
    javaScriptEnabled: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.javaScriptEnabled"),
    javaScriptCanOpenWindowsAutomatically: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.javaScriptCanOpenWindowsAutomatically"),
    mediaPlaybackRequiresUserGesture: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.mediaPlaybackRequiresUserGesture"),
    minimumFontSize: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.minimumFontSize"),
    verticalScrollBarEnabled: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.verticalScrollBarEnabled"),
    horizontalScrollBarEnabled: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.horizontalScrollBarEnabled"),
    resourceCustomSchemes: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.resourceCustomSchemes"),
    contentBlockers: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.contentBlockers"),
    preferredContentMode: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.preferredContentMode"),
    useShouldInterceptAjaxRequest: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.useShouldInterceptAjaxRequest"),
    useShouldInterceptFetchRequest: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.useShouldInterceptFetchRequest"),
    incognito: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.incognito"),
    cacheEnabled: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.cacheEnabled"),
    transparentBackground: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.transparentBackground"),
    disableVerticalScroll: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.disableVerticalScroll"),
    disableHorizontalScroll: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.disableHorizontalScroll"),
    disableContextMenu: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.disableContextMenu"),
    supportZoom: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.supportZoom"),
    allowFileAccessFromFileURLs: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.allowFileAccessFromFileURLs"),
    allowUniversalAccessFromFileURLs: dart.privateName(in_app_webview_options$0, "InAppWebViewOptions.allowUniversalAccessFromFileURLs"),
    UserPreferredContentMode__value: dart.privateName(types, "UserPreferredContentMode._value"),
    $contains: dartx.contains,
    windowId$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.windowId"),
    initialSize: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialSize"),
    initialData$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialData"),
    initialFile$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialFile"),
    initialOptions$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialOptions"),
    contextMenu$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.contextMenu"),
    initialUrlRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialUrlRequest"),
    initialUserScripts$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.initialUserScripts"),
    pullToRefreshController$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.pullToRefreshController"),
    androidOnGeolocationPermissionsHidePrompt$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnGeolocationPermissionsHidePrompt"),
    androidOnGeolocationPermissionsShowPrompt$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnGeolocationPermissionsShowPrompt"),
    androidOnPermissionRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnPermissionRequest"),
    androidOnSafeBrowsingHit$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnSafeBrowsingHit"),
    onPageCommitVisible$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onPageCommitVisible"),
    onTitleChanged$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onTitleChanged"),
    iosOnDidReceiveServerRedirectForProvisionalNavigation$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.iosOnDidReceiveServerRedirectForProvisionalNavigation"),
    iosOnWebContentProcessDidTerminate$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.iosOnWebContentProcessDidTerminate"),
    iosOnNavigationResponse$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.iosOnNavigationResponse"),
    iosShouldAllowDeprecatedTLS$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.iosShouldAllowDeprecatedTLS"),
    onAjaxProgress$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onAjaxProgress"),
    onAjaxReadyStateChange$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onAjaxReadyStateChange"),
    onConsoleMessage$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onConsoleMessage"),
    onCreateWindow$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onCreateWindow"),
    onCloseWindow$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onCloseWindow"),
    onWindowFocus$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onWindowFocus"),
    onWindowBlur$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onWindowBlur"),
    onDownloadStart$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onDownloadStart"),
    onFindResultReceived$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onFindResultReceived"),
    onJsAlert$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onJsAlert"),
    onJsConfirm$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onJsConfirm"),
    onJsPrompt$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onJsPrompt"),
    onLoadError$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadError"),
    onLoadHttpError$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadHttpError"),
    onLoadResource$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadResource"),
    onLoadResourceCustomScheme$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadResourceCustomScheme"),
    onLoadStart$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadStart"),
    onLoadStop$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLoadStop"),
    onLongPressHitTestResult$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onLongPressHitTestResult"),
    onPrint$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onPrint"),
    onProgressChanged$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onProgressChanged"),
    onReceivedClientCertRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onReceivedClientCertRequest"),
    onReceivedHttpAuthRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onReceivedHttpAuthRequest"),
    onReceivedServerTrustAuthRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onReceivedServerTrustAuthRequest"),
    onScrollChanged$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onScrollChanged"),
    onUpdateVisitedHistory$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onUpdateVisitedHistory"),
    onWebViewCreated$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onWebViewCreated"),
    shouldInterceptAjaxRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.shouldInterceptAjaxRequest"),
    shouldInterceptFetchRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.shouldInterceptFetchRequest"),
    shouldOverrideUrlLoading$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.shouldOverrideUrlLoading"),
    onEnterFullscreen$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onEnterFullscreen"),
    onExitFullscreen$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onExitFullscreen"),
    onOverScrolled$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onOverScrolled"),
    onZoomScaleChanged$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.onZoomScaleChanged"),
    androidShouldInterceptRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidShouldInterceptRequest"),
    androidOnRenderProcessUnresponsive$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRenderProcessUnresponsive"),
    androidOnRenderProcessResponsive$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRenderProcessResponsive"),
    androidOnRenderProcessGone$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnRenderProcessGone"),
    androidOnFormResubmission$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnFormResubmission"),
    androidOnScaleChanged$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnScaleChanged"),
    androidOnReceivedIcon$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnReceivedIcon"),
    androidOnReceivedTouchIconUrl$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnReceivedTouchIconUrl"),
    androidOnJsBeforeUnload$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnJsBeforeUnload"),
    androidOnReceivedLoginRequest$1: dart.privateName(headless_in_app_webview, "HeadlessInAppWebView.androidOnReceivedLoginRequest"),
    OffsetBase__dy: dart.privateName(ui, "OffsetBase._dy"),
    OffsetBase__dx: dart.privateName(ui, "OffsetBase._dx"),
    __HeadlessInAppWebView_id: dart.privateName(headless_in_app_webview, "_#HeadlessInAppWebView#id"),
    __HeadlessInAppWebView_id_isSet: dart.privateName(headless_in_app_webview, "_#HeadlessInAppWebView#id#isSet"),
    _started: dart.privateName(headless_in_app_webview, "_started"),
    _running: dart.privateName(headless_in_app_webview, "_running"),
    __HeadlessInAppWebView__channel: dart.privateName(headless_in_app_webview, "_#HeadlessInAppWebView#_channel"),
    __HeadlessInAppWebView__channel_isSet: dart.privateName(headless_in_app_webview, "_#HeadlessInAppWebView#_channel#isSet"),
    __HeadlessInAppWebView_webViewController: dart.privateName(headless_in_app_webview, "_#HeadlessInAppWebView#webViewController"),
    __HeadlessInAppWebView_webViewController_isSet: dart.privateName(headless_in_app_webview, "_#HeadlessInAppWebView#webViewController#isSet"),
    _channel$1: dart.privateName(headless_in_app_webview, "_channel"),
    jsObjectName: dart.privateName(web_message_listener, "WebMessageListener.jsObjectName"),
    onPostMessage: dart.privateName(web_message_listener, "WebMessageListener.onPostMessage"),
    __WebMessageListener_allowedOriginRules: dart.privateName(web_message_listener, "_#WebMessageListener#allowedOriginRules"),
    __WebMessageListener_allowedOriginRules_isSet: dart.privateName(web_message_listener, "_#WebMessageListener#allowedOriginRules#isSet"),
    _replyProxy: dart.privateName(web_message_listener, "_replyProxy"),
    __WebMessageListener__channel: dart.privateName(web_message_listener, "_#WebMessageListener#_channel"),
    __WebMessageListener__channel_isSet: dart.privateName(web_message_listener, "_#WebMessageListener#_channel#isSet"),
    _channel$2: dart.privateName(web_message_listener, "_channel"),
    __JavaScriptReplyProxy__webMessageListener: dart.privateName(web_message_listener, "_#JavaScriptReplyProxy#_webMessageListener"),
    __JavaScriptReplyProxy__webMessageListener_isSet: dart.privateName(web_message_listener, "_#JavaScriptReplyProxy#_webMessageListener#isSet"),
    _webMessageListener: dart.privateName(web_message_listener, "_webMessageListener"),
    id$1: dart.privateName(web_message_channel, "WebMessageChannel.id"),
    port1: dart.privateName(web_message_channel, "WebMessageChannel.port1"),
    port2: dart.privateName(web_message_channel, "WebMessageChannel.port2"),
    __WebMessageChannel__channel: dart.privateName(web_message_channel, "_#WebMessageChannel#_channel"),
    __WebMessageChannel__channel_isSet: dart.privateName(web_message_channel, "_#WebMessageChannel#_channel#isSet"),
    _channel$3: dart.privateName(web_message_channel, "_channel"),
    _webMessageChannel: dart.privateName(web_message_channel, "_webMessageChannel"),
    _onMessage: dart.privateName(web_message_channel, "_onMessage"),
    __WebMessagePort__index: dart.privateName(web_message_channel, "_#WebMessagePort#_index"),
    __WebMessagePort__index_isSet: dart.privateName(web_message_channel, "_#WebMessagePort#_index#isSet"),
    __WebMessagePort__webMessageChannel: dart.privateName(web_message_channel, "_#WebMessagePort#_webMessageChannel"),
    __WebMessagePort__webMessageChannel_isSet: dart.privateName(web_message_channel, "_#WebMessagePort#_webMessageChannel#isSet"),
    _index: dart.privateName(web_message_channel, "_index"),
    data: dart.privateName(web_message_channel, "WebMessage.data"),
    ports: dart.privateName(web_message_channel, "WebMessage.ports"),
    localStorage: dart.privateName(web_storage, "WebStorage.localStorage"),
    sessionStorage: dart.privateName(web_storage, "WebStorage.sessionStorage"),
    key: dart.privateName(web_storage, "WebStorageItem.key"),
    value: dart.privateName(web_storage, "WebStorageItem.value"),
    webStorageType: dart.privateName(web_storage, "Storage.webStorageType"),
    __Storage__controller: dart.privateName(web_storage, "_#Storage#_controller"),
    __Storage__controller_isSet: dart.privateName(web_storage, "_#Storage#_controller#isSet"),
    _controller$1: dart.privateName(web_storage, "_controller"),
    __IOSInAppWebViewController__channel: dart.privateName(in_app_webview_controller, "_#IOSInAppWebViewController#_channel"),
    __IOSInAppWebViewController__channel_isSet: dart.privateName(in_app_webview_controller, "_#IOSInAppWebViewController#_channel#isSet"),
    _channel$4: dart.privateName(in_app_webview_controller, "_channel"),
    __AndroidInAppWebViewController__channel: dart.privateName(in_app_webview_controller$, "_#AndroidInAppWebViewController#_channel"),
    __AndroidInAppWebViewController__channel_isSet: dart.privateName(in_app_webview_controller$, "_#AndroidInAppWebViewController#_channel#isSet"),
    _channel$5: dart.privateName(in_app_webview_controller$, "_channel"),
    javaScriptHandlersMap: dart.privateName(in_app_webview_controller$0, "InAppWebViewController.javaScriptHandlersMap"),
    _webview: dart.privateName(in_app_webview_controller$0, "_webview"),
    __InAppWebViewController__channel: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#_channel"),
    __InAppWebViewController__channel_isSet: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#_channel#isSet"),
    _userScripts: dart.privateName(in_app_webview_controller$0, "_userScripts"),
    _webMessageListenerObjNames: dart.privateName(in_app_webview_controller$0, "_webMessageListenerObjNames"),
    _injectedScriptsFromURL: dart.privateName(in_app_webview_controller$0, "_injectedScriptsFromURL"),
    _id: dart.privateName(in_app_webview_controller$0, "_id"),
    _inAppBrowser: dart.privateName(in_app_webview_controller$0, "_inAppBrowser"),
    __InAppWebViewController_android: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#android"),
    __InAppWebViewController_android_isSet: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#android#isSet"),
    __InAppWebViewController_ios: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#ios"),
    __InAppWebViewController_ios_isSet: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#ios#isSet"),
    __InAppWebViewController_webStorage: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#webStorage"),
    __InAppWebViewController_webStorage_isSet: dart.privateName(in_app_webview_controller$0, "_#InAppWebViewController#webStorage#isSet"),
    _channel$6: dart.privateName(in_app_webview_controller$0, "_channel"),
    _init: dart.privateName(in_app_webview_controller$0, "_init"),
    $clear: dartx.clear,
    $containsKey: dartx.containsKey,
    $buffer: dartx.buffer,
    $asUint8List: dartx.asUint8List,
    _isUrlAbsolute: dart.privateName(in_app_webview_controller$0, "_isUrlAbsolute"),
    _createFavicons: dart.privateName(in_app_webview_controller$0, "_createFavicons"),
    $replaceFirst: dartx.replaceFirst,
    $indexOf: dartx.indexOf,
    $endsWith: dartx.endsWith,
    _value: dart.privateName(types, "ConsoleMessageLevel._value"),
    _value$1: dart.privateName(types, "_value"),
    $hashCode: dartx.hashCode,
    $toSet: dartx.toSet,
    initiatorType: dart.privateName(types, "LoadedResource.initiatorType"),
    url: dart.privateName(types, "LoadedResource.url"),
    startTime: dart.privateName(types, "LoadedResource.startTime"),
    duration: dart.privateName(types, "LoadedResource.duration"),
    data$1: dart.privateName(types, "InAppWebViewInitialData.data"),
    mimeType: dart.privateName(types, "InAppWebViewInitialData.mimeType"),
    encoding: dart.privateName(types, "InAppWebViewInitialData.encoding"),
    __InAppWebViewInitialData_baseUrl: dart.privateName(types, "_#InAppWebViewInitialData#baseUrl"),
    __InAppWebViewInitialData_baseUrl_isSet: dart.privateName(types, "_#InAppWebViewInitialData#baseUrl#isSet"),
    __InAppWebViewInitialData_androidHistoryUrl: dart.privateName(types, "_#InAppWebViewInitialData#androidHistoryUrl"),
    __InAppWebViewInitialData_androidHistoryUrl_isSet: dart.privateName(types, "_#InAppWebViewInitialData#androidHistoryUrl#isSet"),
    url$1: dart.privateName(types, "WebResourceRequest.url"),
    headers: dart.privateName(types, "WebResourceRequest.headers"),
    method: dart.privateName(types, "WebResourceRequest.method"),
    hasGesture: dart.privateName(types, "WebResourceRequest.hasGesture"),
    isForMainFrame: dart.privateName(types, "WebResourceRequest.isForMainFrame"),
    isRedirect: dart.privateName(types, "WebResourceRequest.isRedirect"),
    contentType: dart.privateName(types, "WebResourceResponse.contentType"),
    contentEncoding: dart.privateName(types, "WebResourceResponse.contentEncoding"),
    data$2: dart.privateName(types, "WebResourceResponse.data"),
    headers$1: dart.privateName(types, "WebResourceResponse.headers"),
    statusCode: dart.privateName(types, "WebResourceResponse.statusCode"),
    reasonPhrase: dart.privateName(types, "WebResourceResponse.reasonPhrase"),
    data$3: dart.privateName(types, "CustomSchemeResponse.data"),
    contentType$1: dart.privateName(types, "CustomSchemeResponse.contentType"),
    contentEncoding$1: dart.privateName(types, "CustomSchemeResponse.contentEncoding"),
    message$2: dart.privateName(types, "ConsoleMessage.message"),
    messageLevel: dart.privateName(types, "ConsoleMessage.messageLevel"),
    list: dart.privateName(types, "WebHistory.list"),
    currentIndex: dart.privateName(types, "WebHistory.currentIndex"),
    originalUrl: dart.privateName(types, "WebHistoryItem.originalUrl"),
    title: dart.privateName(types, "WebHistoryItem.title")
  };
  var S$ = {
    url$2: dart.privateName(types, "WebHistoryItem.url"),
    index: dart.privateName(types, "WebHistoryItem.index"),
    offset: dart.privateName(types, "WebHistoryItem.offset"),
    origin: dart.privateName(types, "GeolocationPermissionShowPromptResponse.origin"),
    allow: dart.privateName(types, "GeolocationPermissionShowPromptResponse.allow"),
    retain: dart.privateName(types, "GeolocationPermissionShowPromptResponse.retain"),
    url$3: dart.privateName(types, "JsAlertRequest.url"),
    message$3: dart.privateName(types, "JsAlertRequest.message"),
    iosIsMainFrame: dart.privateName(types, "JsAlertRequest.iosIsMainFrame"),
    _value$2: dart.privateName(types, "JsAlertResponseAction._value"),
    message$4: dart.privateName(types, "JsAlertResponse.message"),
    confirmButtonTitle: dart.privateName(types, "JsAlertResponse.confirmButtonTitle"),
    handledByClient: dart.privateName(types, "JsAlertResponse.handledByClient"),
    action$2: dart.privateName(types, "JsAlertResponse.action"),
    url$4: dart.privateName(types, "JsConfirmRequest.url"),
    message$5: dart.privateName(types, "JsConfirmRequest.message"),
    iosIsMainFrame$1: dart.privateName(types, "JsConfirmRequest.iosIsMainFrame"),
    _value$3: dart.privateName(types, "JsConfirmResponseAction._value"),
    message$6: dart.privateName(types, "JsConfirmResponse.message"),
    confirmButtonTitle$1: dart.privateName(types, "JsConfirmResponse.confirmButtonTitle"),
    cancelButtonTitle: dart.privateName(types, "JsConfirmResponse.cancelButtonTitle"),
    handledByClient$1: dart.privateName(types, "JsConfirmResponse.handledByClient"),
    action$3: dart.privateName(types, "JsConfirmResponse.action"),
    url$5: dart.privateName(types, "JsPromptRequest.url"),
    message$7: dart.privateName(types, "JsPromptRequest.message"),
    defaultValue: dart.privateName(types, "JsPromptRequest.defaultValue"),
    iosIsMainFrame$2: dart.privateName(types, "JsPromptRequest.iosIsMainFrame"),
    _value$4: dart.privateName(types, "JsPromptResponseAction._value"),
    message$8: dart.privateName(types, "JsPromptResponse.message"),
    defaultValue$1: dart.privateName(types, "JsPromptResponse.defaultValue"),
    confirmButtonTitle$2: dart.privateName(types, "JsPromptResponse.confirmButtonTitle"),
    cancelButtonTitle$1: dart.privateName(types, "JsPromptResponse.cancelButtonTitle"),
    handledByClient$2: dart.privateName(types, "JsPromptResponse.handledByClient"),
    value$1: dart.privateName(types, "JsPromptResponse.value"),
    action$4: dart.privateName(types, "JsPromptResponse.action"),
    url$6: dart.privateName(types, "JsBeforeUnloadRequest.url"),
    message$9: dart.privateName(types, "JsBeforeUnloadRequest.message"),
    _value$5: dart.privateName(types, "JsBeforeUnloadResponseAction._value"),
    message$10: dart.privateName(types, "JsBeforeUnloadResponse.message"),
    confirmButtonTitle$3: dart.privateName(types, "JsBeforeUnloadResponse.confirmButtonTitle"),
    cancelButtonTitle$2: dart.privateName(types, "JsBeforeUnloadResponse.cancelButtonTitle"),
    handledByClient$3: dart.privateName(types, "JsBeforeUnloadResponse.handledByClient"),
    action$5: dart.privateName(types, "JsBeforeUnloadResponse.action"),
    _value$6: dart.privateName(types, "SafeBrowsingThreat._value"),
    _value$7: dart.privateName(types, "SafeBrowsingResponseAction._value"),
    report: dart.privateName(types, "SafeBrowsingResponse.report"),
    action$6: dart.privateName(types, "SafeBrowsingResponse.action"),
    _value$8: dart.privateName(types, "HttpAuthResponseAction._value"),
    username: dart.privateName(types, "HttpAuthResponse.username"),
    password: dart.privateName(types, "HttpAuthResponse.password"),
    permanentPersistence: dart.privateName(types, "HttpAuthResponse.permanentPersistence"),
    action$7: dart.privateName(types, "HttpAuthResponse.action"),
    _value$9: dart.privateName(types, "IOSURLCredentialPersistence._value"),
    username$1: dart.privateName(types, "URLCredential.username"),
    password$1: dart.privateName(types, "URLCredential.password"),
    iosCertificates: dart.privateName(types, "URLCredential.iosCertificates"),
    iosPersistence: dart.privateName(types, "URLCredential.iosPersistence"),
    protectionSpace: dart.privateName(types, "URLAuthenticationChallenge.protectionSpace"),
    previousFailureCount: dart.privateName(types, "HttpAuthenticationChallenge.previousFailureCount"),
    proposedCredential: dart.privateName(types, "HttpAuthenticationChallenge.proposedCredential"),
    iosFailureResponse: dart.privateName(types, "HttpAuthenticationChallenge.iosFailureResponse"),
    iosError: dart.privateName(types, "HttpAuthenticationChallenge.iosError"),
    androidPrincipals: dart.privateName(types, "ClientCertChallenge.androidPrincipals"),
    androidKeyTypes: dart.privateName(types, "ClientCertChallenge.androidKeyTypes"),
    _value$10: dart.privateName(types, "IOSNSURLProtectionSpaceProxyType._value"),
    _value$11: dart.privateName(types, "IOSNSURLProtectionSpaceAuthenticationMethod._value"),
    androidError: dart.privateName(types, "SslError.androidError"),
    iosError$1: dart.privateName(types, "SslError.iosError"),
    message$11: dart.privateName(types, "SslError.message"),
    host: dart.privateName(types, "URLProtectionSpace.host"),
    protocol: dart.privateName(types, "URLProtectionSpace.protocol"),
    realm: dart.privateName(types, "URLProtectionSpace.realm"),
    port: dart.privateName(types, "URLProtectionSpace.port"),
    sslCertificate: dart.privateName(types, "URLProtectionSpace.sslCertificate"),
    sslError: dart.privateName(types, "URLProtectionSpace.sslError"),
    iosAuthenticationMethod: dart.privateName(types, "URLProtectionSpace.iosAuthenticationMethod"),
    iosDistinguishedNames: dart.privateName(types, "URLProtectionSpace.iosDistinguishedNames"),
    iosReceivesCredentialSecurely: dart.privateName(types, "URLProtectionSpace.iosReceivesCredentialSecurely"),
    iosIsProxy: dart.privateName(types, "URLProtectionSpace.iosIsProxy"),
    iosProxyType: dart.privateName(types, "URLProtectionSpace.iosProxyType"),
    protectionSpace$1: dart.privateName(types, "URLProtectionSpaceHttpAuthCredentials.protectionSpace"),
    credentials: dart.privateName(types, "URLProtectionSpaceHttpAuthCredentials.credentials"),
    _value$12: dart.privateName(types, "ServerTrustAuthResponseAction._value"),
    action$8: dart.privateName(types, "ServerTrustAuthResponse.action"),
    _value$13: dart.privateName(types, "ClientCertResponseAction._value"),
    certificatePath: dart.privateName(types, "ClientCertResponse.certificatePath"),
    certificatePassword: dart.privateName(types, "ClientCertResponse.certificatePassword"),
    androidKeyStoreType: dart.privateName(types, "ClientCertResponse.androidKeyStoreType"),
    action$9: dart.privateName(types, "ClientCertResponse.action"),
    url$7: dart.privateName(types, "Favicon.url"),
    rel: dart.privateName(types, "Favicon.rel"),
    width: dart.privateName(types, "Favicon.width"),
    height: dart.privateName(types, "Favicon.height"),
    _value$14: dart.privateName(types, "AndroidCacheMode._value"),
    _value$15: dart.privateName(types, "AndroidActionModeMenuItem._value"),
    _value$16: dart.privateName(types, "AndroidForceDark._value"),
    _value$17: dart.privateName(types, "AndroidLayoutAlgorithm._value"),
    _value$18: dart.privateName(types, "AndroidMixedContentMode._value"),
    _value$19: dart.privateName(types, "IOSWKSelectionGranularity._value"),
    _value$20: dart.privateName(types, "IOSWKDataDetectorTypes._value"),
    _value$21: dart.privateName(types, "IOSUIScrollViewDecelerationRate._value"),
    _value$22: dart.privateName(types, "UserPreferredContentMode._value"),
    _value$23: dart.privateName(types, "IOSUIModalPresentationStyle._value"),
    _value$24: dart.privateName(types, "IOSUIModalTransitionStyle._value"),
    _value$25: dart.privateName(types, "IOSSafariDismissButtonStyle._value"),
    _value$26: dart.privateName(types, "AjaxRequestAction._value"),
    _value$27: dart.privateName(types, "AjaxRequestEventType._value"),
    type: dart.privateName(types, "AjaxRequestEvent.type"),
    lengthComputable: dart.privateName(types, "AjaxRequestEvent.lengthComputable"),
    loaded: dart.privateName(types, "AjaxRequestEvent.loaded"),
    total: dart.privateName(types, "AjaxRequestEvent.total"),
    _value$28: dart.privateName(types, "AjaxRequestReadyState._value"),
    _newHeaders: dart.privateName(types, "_newHeaders"),
    _headers: dart.privateName(types, "_headers"),
    data$4: dart.privateName(types, "AjaxRequest.data"),
    method$1: dart.privateName(types, "AjaxRequest.method"),
    url$8: dart.privateName(types, "AjaxRequest.url"),
    isAsync: dart.privateName(types, "AjaxRequest.isAsync"),
    user: dart.privateName(types, "AjaxRequest.user"),
    password$2: dart.privateName(types, "AjaxRequest.password"),
    withCredentials: dart.privateName(types, "AjaxRequest.withCredentials"),
    headers$2: dart.privateName(types, "AjaxRequest.headers"),
    readyState: dart.privateName(types, "AjaxRequest.readyState"),
    status: dart.privateName(types, "AjaxRequest.status"),
    responseURL: dart.privateName(types, "AjaxRequest.responseURL"),
    responseType: dart.privateName(types, "AjaxRequest.responseType"),
    response: dart.privateName(types, "AjaxRequest.response"),
    responseText: dart.privateName(types, "AjaxRequest.responseText"),
    responseXML: dart.privateName(types, "AjaxRequest.responseXML"),
    statusText: dart.privateName(types, "AjaxRequest.statusText"),
    responseHeaders: dart.privateName(types, "AjaxRequest.responseHeaders"),
    event: dart.privateName(types, "AjaxRequest.event"),
    action$10: dart.privateName(types, "AjaxRequest.action"),
    _value$29: dart.privateName(types, "FetchRequestAction._value"),
    type$1: dart.privateName(types, "FetchRequestCredential.type"),
    value$2: dart.privateName(types, "FetchRequestCredentialDefault.value"),
    id$2: dart.privateName(types, "FetchRequestFederatedCredential.id"),
    name: dart.privateName(types, "FetchRequestFederatedCredential.name"),
    protocol$1: dart.privateName(types, "FetchRequestFederatedCredential.protocol"),
    provider: dart.privateName(types, "FetchRequestFederatedCredential.provider"),
    iconURL: dart.privateName(types, "FetchRequestFederatedCredential.iconURL"),
    id$3: dart.privateName(types, "FetchRequestPasswordCredential.id"),
    name$1: dart.privateName(types, "FetchRequestPasswordCredential.name"),
    password$3: dart.privateName(types, "FetchRequestPasswordCredential.password"),
    iconURL$1: dart.privateName(types, "FetchRequestPasswordCredential.iconURL"),
    url$9: dart.privateName(types, "FetchRequest.url"),
    method$2: dart.privateName(types, "FetchRequest.method"),
    headers$3: dart.privateName(types, "FetchRequest.headers"),
    body: dart.privateName(types, "FetchRequest.body"),
    mode: dart.privateName(types, "FetchRequest.mode"),
    credentials$1: dart.privateName(types, "FetchRequest.credentials"),
    cache: dart.privateName(types, "FetchRequest.cache"),
    redirect: dart.privateName(types, "FetchRequest.redirect"),
    referrer: dart.privateName(types, "FetchRequest.referrer"),
    referrerPolicy: dart.privateName(types, "FetchRequest.referrerPolicy"),
    integrity: dart.privateName(types, "FetchRequest.integrity"),
    keepalive: dart.privateName(types, "FetchRequest.keepalive"),
    action$11: dart.privateName(types, "FetchRequest.action"),
    _value$30: dart.privateName(types, "ContentBlockerTriggerResourceType._value"),
    _value$31: dart.privateName(types, "ContentBlockerTriggerLoadType._value"),
    _value$32: dart.privateName(types, "ContentBlockerActionType._value"),
    name$2: dart.privateName(types, "Cookie.name"),
    value$3: dart.privateName(types, "Cookie.value"),
    expiresDate: dart.privateName(types, "Cookie.expiresDate"),
    isSessionOnly: dart.privateName(types, "Cookie.isSessionOnly"),
    domain: dart.privateName(types, "Cookie.domain"),
    sameSite: dart.privateName(types, "Cookie.sameSite"),
    isSecure: dart.privateName(types, "Cookie.isSecure"),
    isHttpOnly: dart.privateName(types, "Cookie.isHttpOnly"),
    path: dart.privateName(types, "Cookie.path"),
    _value$33: dart.privateName(types, "PermissionRequestResponseAction._value"),
    resources: dart.privateName(types, "PermissionRequestResponse.resources"),
    action$12: dart.privateName(types, "PermissionRequestResponse.action"),
    _value$34: dart.privateName(types, "NavigationActionPolicy._value"),
    _value$35: dart.privateName(types, "IOSWKNavigationType._value"),
    _value$36: dart.privateName(types, "IOSURLRequestCachePolicy._value"),
    _value$37: dart.privateName(types, "IOSURLRequestNetworkServiceType._value"),
    host$1: dart.privateName(types, "IOSWKSecurityOrigin.host"),
    port$1: dart.privateName(types, "IOSWKSecurityOrigin.port"),
    protocol$2: dart.privateName(types, "IOSWKSecurityOrigin.protocol"),
    isMainFrame: dart.privateName(types, "IOSWKFrameInfo.isMainFrame"),
    request: dart.privateName(types, "IOSWKFrameInfo.request"),
    securityOrigin: dart.privateName(types, "IOSWKFrameInfo.securityOrigin"),
    request$1: dart.privateName(types, "NavigationAction.request"),
    isForMainFrame$1: dart.privateName(types, "NavigationAction.isForMainFrame"),
    androidHasGesture: dart.privateName(types, "NavigationAction.androidHasGesture"),
    androidIsRedirect: dart.privateName(types, "NavigationAction.androidIsRedirect"),
    iosWKNavigationType: dart.privateName(types, "NavigationAction.iosWKNavigationType"),
    iosSourceFrame: dart.privateName(types, "NavigationAction.iosSourceFrame"),
    iosTargetFrame: dart.privateName(types, "NavigationAction.iosTargetFrame"),
    windowId$2: dart.privateName(types, "CreateWindowAction.windowId"),
    androidIsDialog: dart.privateName(types, "CreateWindowAction.androidIsDialog"),
    iosWindowFeatures: dart.privateName(types, "CreateWindowAction.iosWindowFeatures"),
    origin$1: dart.privateName(types, "AndroidWebStorageOrigin.origin"),
    quota: dart.privateName(types, "AndroidWebStorageOrigin.quota"),
    usage: dart.privateName(types, "AndroidWebStorageOrigin.usage"),
    _value$38: dart.privateName(types, "IOSWKWebsiteDataType._value"),
    displayName: dart.privateName(types, "IOSWKWebsiteDataRecord.displayName"),
    dataTypes: dart.privateName(types, "IOSWKWebsiteDataRecord.dataTypes"),
    _value$39: dart.privateName(types, "InAppWebViewHitTestResultType._value"),
    type$2: dart.privateName(types, "InAppWebViewHitTestResult.type"),
    extra: dart.privateName(types, "InAppWebViewHitTestResult.extra"),
    _value$40: dart.privateName(types, "WebViewRenderProcessAction._value"),
    didCrash: dart.privateName(types, "RenderProcessGoneDetail.didCrash"),
    rendererPriorityAtExit: dart.privateName(types, "RenderProcessGoneDetail.rendererPriorityAtExit"),
    _value$41: dart.privateName(types, "RendererPriority._value"),
    rendererRequestedPriority: dart.privateName(types, "RendererPriorityPolicy.rendererRequestedPriority"),
    waivedWhenNotVisible: dart.privateName(types, "RendererPriorityPolicy.waivedWhenNotVisible"),
    _value$42: dart.privateName(types, "FormResubmissionAction._value"),
    _value$43: dart.privateName(types, "AndroidOverScrollMode._value"),
    _value$44: dart.privateName(types, "AndroidScrollBarStyle._value"),
    _value$45: dart.privateName(types, "AndroidVerticalScrollbarPosition._value"),
    versionName: dart.privateName(types, "AndroidWebViewPackageInfo.versionName"),
    packageName$1: dart.privateName(types, "AndroidWebViewPackageInfo.packageName"),
    url$10: dart.privateName(types, "RequestFocusNodeHrefResult.url"),
    title$1: dart.privateName(types, "RequestFocusNodeHrefResult.title"),
    src: dart.privateName(types, "RequestFocusNodeHrefResult.src"),
    url$11: dart.privateName(types, "RequestImageRefResult.url"),
    name$3: dart.privateName(types, "MetaTag.name"),
    content: dart.privateName(types, "MetaTag.content"),
    attrs: dart.privateName(types, "MetaTag.attrs"),
    name$4: dart.privateName(types, "MetaTagAttribute.name"),
    value$4: dart.privateName(types, "MetaTagAttribute.value"),
    _value$46: dart.privateName(types, "WebStorageType._value"),
    _value$47: dart.privateName(types, "HTTPCookieSameSitePolicy._value"),
    _value$48: dart.privateName(types, "AndroidSslError._value"),
    _value$49: dart.privateName(types, "IOSSslError._value"),
    _value$50: dart.privateName(types, "IOSUIScrollViewContentInsetAdjustmentBehavior._value"),
    issuedBy: dart.privateName(types, "SslCertificate.issuedBy"),
    issuedTo: dart.privateName(types, "SslCertificate.issuedTo"),
    validNotAfterDate: dart.privateName(types, "SslCertificate.validNotAfterDate"),
    validNotBeforeDate: dart.privateName(types, "SslCertificate.validNotBeforeDate"),
    x509Certificate: dart.privateName(types, "SslCertificate.x509Certificate"),
    CName: dart.privateName(types, "SslCertificateDName.CName"),
    DName: dart.privateName(types, "SslCertificateDName.DName"),
    OName: dart.privateName(types, "SslCertificateDName.OName"),
    UName: dart.privateName(types, "SslCertificateDName.UName"),
    realm$1: dart.privateName(types, "LoginRequest.realm"),
    account: dart.privateName(types, "LoginRequest.account"),
    args: dart.privateName(types, "LoginRequest.args"),
    _value$51: dart.privateName(types, "UserScriptInjectionTime._value"),
    groupName: dart.privateName(types, "UserScript.groupName"),
    source: dart.privateName(types, "UserScript.source"),
    injectionTime: dart.privateName(types, "UserScript.injectionTime"),
    iosForMainFrameOnly: dart.privateName(types, "UserScript.iosForMainFrameOnly"),
    __UserScript_contentWorld: dart.privateName(types, "_#UserScript#contentWorld"),
    __UserScript_contentWorld_isSet: dart.privateName(types, "_#UserScript#contentWorld#isSet"),
    name$5: dart.privateName(types, "ContentWorld.name"),
    value$5: dart.privateName(types, "CallAsyncJavaScriptResult.value"),
    error: dart.privateName(types, "CallAsyncJavaScriptResult.error"),
    x: dart.privateName(types, "InAppWebViewRect.x"),
    y: dart.privateName(types, "InAppWebViewRect.y"),
    width$1: dart.privateName(types, "InAppWebViewRect.width"),
    height$1: dart.privateName(types, "InAppWebViewRect.height"),
    _value$52: dart.privateName(types, "CompressFormat._value"),
    rect: dart.privateName(types, "ScreenshotConfiguration.rect"),
    snapshotWidth: dart.privateName(types, "ScreenshotConfiguration.snapshotWidth"),
    compressFormat: dart.privateName(types, "ScreenshotConfiguration.compressFormat"),
    quality: dart.privateName(types, "ScreenshotConfiguration.quality"),
    iosAfterScreenUpdates: dart.privateName(types, "ScreenshotConfiguration.iosAfterScreenUpdates"),
    rect$1: dart.privateName(types, "IOSWKPDFConfiguration.rect"),
    _value$53: dart.privateName(types, "WebArchiveFormat._value"),
    _value$54: dart.privateName(types, "CrossOrigin._value"),
    _value$55: dart.privateName(types, "ReferrerPolicy._value"),
    type$3: dart.privateName(types, "ScriptHtmlTagAttributes.type"),
    id$4: dart.privateName(types, "ScriptHtmlTagAttributes.id"),
    async: dart.privateName(types, "ScriptHtmlTagAttributes.async"),
    defer: dart.privateName(types, "ScriptHtmlTagAttributes.defer"),
    crossOrigin: dart.privateName(types, "ScriptHtmlTagAttributes.crossOrigin"),
    integrity$1: dart.privateName(types, "ScriptHtmlTagAttributes.integrity"),
    noModule: dart.privateName(types, "ScriptHtmlTagAttributes.noModule"),
    nonce: dart.privateName(types, "ScriptHtmlTagAttributes.nonce"),
    referrerPolicy$1: dart.privateName(types, "ScriptHtmlTagAttributes.referrerPolicy"),
    onLoad: dart.privateName(types, "ScriptHtmlTagAttributes.onLoad"),
    onError: dart.privateName(types, "ScriptHtmlTagAttributes.onError"),
    id$5: dart.privateName(types, "CSSLinkHtmlTagAttributes.id"),
    media: dart.privateName(types, "CSSLinkHtmlTagAttributes.media"),
    crossOrigin$1: dart.privateName(types, "CSSLinkHtmlTagAttributes.crossOrigin"),
    integrity$2: dart.privateName(types, "CSSLinkHtmlTagAttributes.integrity"),
    referrerPolicy$2: dart.privateName(types, "CSSLinkHtmlTagAttributes.referrerPolicy"),
    disabled: dart.privateName(types, "CSSLinkHtmlTagAttributes.disabled"),
    alternate: dart.privateName(types, "CSSLinkHtmlTagAttributes.alternate"),
    title$2: dart.privateName(types, "CSSLinkHtmlTagAttributes.title"),
    url$12: dart.privateName(types, "IOSURLResponse.url"),
    expectedContentLength: dart.privateName(types, "IOSURLResponse.expectedContentLength"),
    mimeType$1: dart.privateName(types, "IOSURLResponse.mimeType"),
    suggestedFilename: dart.privateName(types, "IOSURLResponse.suggestedFilename"),
    textEncodingName: dart.privateName(types, "IOSURLResponse.textEncodingName"),
    headers$4: dart.privateName(types, "IOSURLResponse.headers"),
    statusCode$1: dart.privateName(types, "IOSURLResponse.statusCode"),
    response$1: dart.privateName(types, "IOSWKNavigationResponse.response"),
    isForMainFrame$2: dart.privateName(types, "IOSWKNavigationResponse.isForMainFrame"),
    canShowMIMEType: dart.privateName(types, "IOSWKNavigationResponse.canShowMIMEType"),
    _value$56: dart.privateName(types, "IOSNavigationResponseAction._value"),
    _value$57: dart.privateName(types, "IOSShouldAllowDeprecatedTLSAction._value"),
    url$13: dart.privateName(types, "URLRequest.url"),
    method$3: dart.privateName(types, "URLRequest.method"),
    body$1: dart.privateName(types, "URLRequest.body"),
    headers$5: dart.privateName(types, "URLRequest.headers"),
    iosAllowsCellularAccess: dart.privateName(types, "URLRequest.iosAllowsCellularAccess"),
    iosAllowsConstrainedNetworkAccess: dart.privateName(types, "URLRequest.iosAllowsConstrainedNetworkAccess"),
    iosAllowsExpensiveNetworkAccess: dart.privateName(types, "URLRequest.iosAllowsExpensiveNetworkAccess"),
    iosCachePolicy: dart.privateName(types, "URLRequest.iosCachePolicy"),
    iosHttpShouldHandleCookies: dart.privateName(types, "URLRequest.iosHttpShouldHandleCookies"),
    iosHttpShouldUsePipelining: dart.privateName(types, "URLRequest.iosHttpShouldUsePipelining"),
    iosNetworkServiceType: dart.privateName(types, "URLRequest.iosNetworkServiceType"),
    iosTimeoutInterval: dart.privateName(types, "URLRequest.iosTimeoutInterval"),
    iosMainDocumentURL: dart.privateName(types, "URLRequest.iosMainDocumentURL"),
    allowsResizing: dart.privateName(types, "IOSWKWindowFeatures.allowsResizing"),
    height$2: dart.privateName(types, "IOSWKWindowFeatures.height"),
    menuBarVisibility: dart.privateName(types, "IOSWKWindowFeatures.menuBarVisibility"),
    statusBarVisibility: dart.privateName(types, "IOSWKWindowFeatures.statusBarVisibility"),
    toolbarsVisibility: dart.privateName(types, "IOSWKWindowFeatures.toolbarsVisibility"),
    width$2: dart.privateName(types, "IOSWKWindowFeatures.width"),
    x$1: dart.privateName(types, "IOSWKWindowFeatures.x"),
    y$1: dart.privateName(types, "IOSWKWindowFeatures.y"),
    string: dart.privateName(types, "IOSNSAttributedString.string"),
    backgroundColor$1: dart.privateName(types, "IOSNSAttributedString.backgroundColor"),
    baselineOffset: dart.privateName(types, "IOSNSAttributedString.baselineOffset"),
    expansion: dart.privateName(types, "IOSNSAttributedString.expansion"),
    foregroundColor: dart.privateName(types, "IOSNSAttributedString.foregroundColor"),
    kern: dart.privateName(types, "IOSNSAttributedString.kern"),
    ligature: dart.privateName(types, "IOSNSAttributedString.ligature"),
    obliqueness: dart.privateName(types, "IOSNSAttributedString.obliqueness"),
    strikethroughColor: dart.privateName(types, "IOSNSAttributedString.strikethroughColor"),
    strikethroughStyle: dart.privateName(types, "IOSNSAttributedString.strikethroughStyle"),
    strokeColor: dart.privateName(types, "IOSNSAttributedString.strokeColor"),
    strokeWidth: dart.privateName(types, "IOSNSAttributedString.strokeWidth"),
    textEffect: dart.privateName(types, "IOSNSAttributedString.textEffect"),
    underlineColor: dart.privateName(types, "IOSNSAttributedString.underlineColor"),
    underlineStyle: dart.privateName(types, "IOSNSAttributedString.underlineStyle"),
    _value$58: dart.privateName(types, "IOSNSUnderlineStyle._value"),
    _value$59: dart.privateName(types, "IOSNSAttributedStringTextEffectStyle._value"),
    _value$60: dart.privateName(types, "AndroidPullToRefreshSize._value"),
    onCreateContextMenu: dart.privateName(context_menu, "ContextMenu.onCreateContextMenu"),
    onHideContextMenu: dart.privateName(context_menu, "ContextMenu.onHideContextMenu"),
    onContextMenuActionItemClicked: dart.privateName(context_menu, "ContextMenu.onContextMenuActionItemClicked"),
    options: dart.privateName(context_menu, "ContextMenu.options"),
    menuItems: dart.privateName(context_menu, "ContextMenu.menuItems"),
    androidId: dart.privateName(context_menu, "ContextMenuItem.androidId"),
    iosId: dart.privateName(context_menu, "ContextMenuItem.iosId"),
    title$3: dart.privateName(context_menu, "ContextMenuItem.title"),
    action$13: dart.privateName(context_menu, "ContextMenuItem.action"),
    hideDefaultSystemContextMenuItems: dart.privateName(context_menu, "ContextMenuOptions.hideDefaultSystemContextMenuItems"),
    message$12: dart.privateName(in_app_browser, "InAppBrowserAlreadyOpenedException.message"),
    message$13: dart.privateName(in_app_browser, "InAppBrowserNotOpenedException.message"),
    contextMenu$2: dart.privateName(in_app_browser, "InAppBrowser.contextMenu"),
    pullToRefreshController$2: dart.privateName(in_app_browser, "InAppBrowser.pullToRefreshController"),
    initialUserScripts$2: dart.privateName(in_app_browser, "InAppBrowser.initialUserScripts"),
    windowId$3: dart.privateName(in_app_browser, "InAppBrowser.windowId"),
    __InAppBrowser_id: dart.privateName(in_app_browser, "_#InAppBrowser#id"),
    __InAppBrowser_id_isSet: dart.privateName(in_app_browser, "_#InAppBrowser#id#isSet"),
    _isOpened$1: dart.privateName(in_app_browser, "_isOpened"),
    __InAppBrowser__channel: dart.privateName(in_app_browser, "_#InAppBrowser#_channel"),
    __InAppBrowser__channel_isSet: dart.privateName(in_app_browser, "_#InAppBrowser#_channel#isSet"),
    __InAppBrowser_webViewController: dart.privateName(in_app_browser, "_#InAppBrowser#webViewController"),
    __InAppBrowser_webViewController_isSet: dart.privateName(in_app_browser, "_#InAppBrowser#webViewController#isSet"),
    _channel$7: dart.privateName(in_app_browser, "_channel"),
    onRefresh: dart.privateName(pull_to_refresh_controller, "PullToRefreshController.onRefresh"),
    __PullToRefreshController_options: dart.privateName(pull_to_refresh_controller, "_#PullToRefreshController#options"),
    __PullToRefreshController_options_isSet: dart.privateName(pull_to_refresh_controller, "_#PullToRefreshController#options#isSet"),
    _channel$8: dart.privateName(pull_to_refresh_controller, "_channel"),
    _setRefreshing: dart.privateName(pull_to_refresh_controller, "_setRefreshing"),
    windowId$4: dart.privateName(webview, "WebView.windowId"),
    onWebViewCreated$2: dart.privateName(webview, "WebView.onWebViewCreated"),
    onLoadStart$2: dart.privateName(webview, "WebView.onLoadStart"),
    onLoadStop$2: dart.privateName(webview, "WebView.onLoadStop"),
    onLoadError$2: dart.privateName(webview, "WebView.onLoadError"),
    onLoadHttpError$2: dart.privateName(webview, "WebView.onLoadHttpError"),
    onProgressChanged$2: dart.privateName(webview, "WebView.onProgressChanged"),
    onConsoleMessage$2: dart.privateName(webview, "WebView.onConsoleMessage"),
    shouldOverrideUrlLoading$2: dart.privateName(webview, "WebView.shouldOverrideUrlLoading"),
    onLoadResource$2: dart.privateName(webview, "WebView.onLoadResource"),
    onScrollChanged$2: dart.privateName(webview, "WebView.onScrollChanged"),
    onDownloadStart$2: dart.privateName(webview, "WebView.onDownloadStart"),
    onLoadResourceCustomScheme$2: dart.privateName(webview, "WebView.onLoadResourceCustomScheme"),
    onCreateWindow$2: dart.privateName(webview, "WebView.onCreateWindow"),
    onCloseWindow$2: dart.privateName(webview, "WebView.onCloseWindow"),
    onWindowFocus$2: dart.privateName(webview, "WebView.onWindowFocus"),
    onWindowBlur$2: dart.privateName(webview, "WebView.onWindowBlur"),
    onJsAlert$2: dart.privateName(webview, "WebView.onJsAlert"),
    onJsConfirm$2: dart.privateName(webview, "WebView.onJsConfirm"),
    onJsPrompt$2: dart.privateName(webview, "WebView.onJsPrompt"),
    onReceivedHttpAuthRequest$2: dart.privateName(webview, "WebView.onReceivedHttpAuthRequest"),
    onReceivedServerTrustAuthRequest$2: dart.privateName(webview, "WebView.onReceivedServerTrustAuthRequest"),
    onReceivedClientCertRequest$2: dart.privateName(webview, "WebView.onReceivedClientCertRequest"),
    onFindResultReceived$2: dart.privateName(webview, "WebView.onFindResultReceived"),
    shouldInterceptAjaxRequest$2: dart.privateName(webview, "WebView.shouldInterceptAjaxRequest"),
    onAjaxReadyStateChange$2: dart.privateName(webview, "WebView.onAjaxReadyStateChange"),
    onAjaxProgress$2: dart.privateName(webview, "WebView.onAjaxProgress"),
    shouldInterceptFetchRequest$2: dart.privateName(webview, "WebView.shouldInterceptFetchRequest"),
    onUpdateVisitedHistory$2: dart.privateName(webview, "WebView.onUpdateVisitedHistory"),
    onPrint$2: dart.privateName(webview, "WebView.onPrint"),
    onLongPressHitTestResult$2: dart.privateName(webview, "WebView.onLongPressHitTestResult"),
    onEnterFullscreen$2: dart.privateName(webview, "WebView.onEnterFullscreen"),
    onExitFullscreen$2: dart.privateName(webview, "WebView.onExitFullscreen"),
    onPageCommitVisible$2: dart.privateName(webview, "WebView.onPageCommitVisible"),
    onTitleChanged$2: dart.privateName(webview, "WebView.onTitleChanged"),
    onOverScrolled$2: dart.privateName(webview, "WebView.onOverScrolled"),
    onZoomScaleChanged$2: dart.privateName(webview, "WebView.onZoomScaleChanged"),
    androidOnSafeBrowsingHit$2: dart.privateName(webview, "WebView.androidOnSafeBrowsingHit"),
    androidOnPermissionRequest$2: dart.privateName(webview, "WebView.androidOnPermissionRequest"),
    androidOnGeolocationPermissionsShowPrompt$2: dart.privateName(webview, "WebView.androidOnGeolocationPermissionsShowPrompt"),
    androidOnGeolocationPermissionsHidePrompt$2: dart.privateName(webview, "WebView.androidOnGeolocationPermissionsHidePrompt"),
    androidShouldInterceptRequest$2: dart.privateName(webview, "WebView.androidShouldInterceptRequest"),
    androidOnRenderProcessUnresponsive$2: dart.privateName(webview, "WebView.androidOnRenderProcessUnresponsive"),
    androidOnRenderProcessResponsive$2: dart.privateName(webview, "WebView.androidOnRenderProcessResponsive"),
    androidOnRenderProcessGone$2: dart.privateName(webview, "WebView.androidOnRenderProcessGone"),
    androidOnFormResubmission$2: dart.privateName(webview, "WebView.androidOnFormResubmission"),
    androidOnScaleChanged$2: dart.privateName(webview, "WebView.androidOnScaleChanged"),
    androidOnReceivedIcon$2: dart.privateName(webview, "WebView.androidOnReceivedIcon"),
    androidOnReceivedTouchIconUrl$2: dart.privateName(webview, "WebView.androidOnReceivedTouchIconUrl"),
    androidOnJsBeforeUnload$2: dart.privateName(webview, "WebView.androidOnJsBeforeUnload"),
    androidOnReceivedLoginRequest$2: dart.privateName(webview, "WebView.androidOnReceivedLoginRequest"),
    iosOnWebContentProcessDidTerminate$2: dart.privateName(webview, "WebView.iosOnWebContentProcessDidTerminate"),
    iosOnDidReceiveServerRedirectForProvisionalNavigation$2: dart.privateName(webview, "WebView.iosOnDidReceiveServerRedirectForProvisionalNavigation"),
    iosOnNavigationResponse$2: dart.privateName(webview, "WebView.iosOnNavigationResponse"),
    iosShouldAllowDeprecatedTLS$2: dart.privateName(webview, "WebView.iosShouldAllowDeprecatedTLS"),
    initialUrlRequest$2: dart.privateName(webview, "WebView.initialUrlRequest"),
    initialFile$2: dart.privateName(webview, "WebView.initialFile"),
    initialData$2: dart.privateName(webview, "WebView.initialData"),
    initialOptions$2: dart.privateName(webview, "WebView.initialOptions"),
    contextMenu$3: dart.privateName(webview, "WebView.contextMenu"),
    initialUserScripts$3: dart.privateName(webview, "WebView.initialUserScripts"),
    pullToRefreshController$3: dart.privateName(webview, "WebView.pullToRefreshController")
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S, S$);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(web_storage_manager$0.WebStorageManager._handleMethod, T.MethodCallToFuture());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [S.StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_webstoragemanager"
      });
    },
    get C4() {
      return C[4] = dart.fn(service_worker_controller.AndroidServiceWorkerController._handleMethod, T.MethodCallToFuture());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_android_serviceworkercontroller"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: types.IOSSafariDismissButtonStyle.prototype,
        [S.IOSSafariDismissButtonStyle__value]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [S.IOSUIModalTransitionStyle__value]: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_chromesafaribrowser"
      });
    },
    get C10() {
      return C[10] = dart.fn(cookie_manager.CookieManager._handleMethod, T.MethodCallToFuture());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_cookiemanager"
      });
    },
    get C12() {
      return C[12] = dart.fn(http_auth_credentials_database.HttpAuthCredentialDatabase._handleMethod, T.MethodCallToFuture());
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_inappwebview_credential_database"
      });
    },
    get C14() {
      return C[14] = dart.constSet(T.FactoryLOfOneSequenceGestureRecognizerL(), []);
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "controller",
        [S._Location_column]: 15,
        [S._Location_line]: 386,
        [S._Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "gestureRecognizers",
        [S._Location_column]: 15,
        [S._Location_line]: 387,
        [S._Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "hitTestBehavior",
        [S._Location_column]: 15,
        [S._Location_line]: 389,
        [S._Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19], T._LocationL());
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: C[16] || CT.C16,
        [S._Location_name]: null,
        [S._Location_column]: 20,
        [S._Location_line]: 385,
        [S._Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview.dart"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "viewType",
        [S._Location_column]: 11,
        [S._Location_line]: 380,
        [S._Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "surfaceFactory",
        [S._Location_column]: 11,
        [S._Location_line]: 381,
        [S._Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "onCreatePlatformView",
        [S._Location_column]: 11,
        [S._Location_line]: 392,
        [S._Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.constList([C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24], T._LocationL());
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: C[21] || CT.C21,
        [S._Location_name]: null,
        [S._Location_column]: 16,
        [S._Location_line]: 379,
        [S._Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "viewType",
        [S._Location_column]: 11,
        [S._Location_line]: 423,
        [S._Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "onPlatformViewCreated",
        [S._Location_column]: 11,
        [S._Location_line]: 424,
        [S._Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "gestureRecognizers",
        [S._Location_column]: 11,
        [S._Location_line]: 425,
        [S._Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "layoutDirection",
        [S._Location_column]: 11,
        [S._Location_line]: 426,
        [S._Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "creationParams",
        [S._Location_column]: 11,
        [S._Location_line]: 427,
        [S._Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "creationParamsCodec",
        [S._Location_column]: 11,
        [S._Location_line]: 442,
        [S._Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], T._LocationL());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: C[26] || CT.C26,
        [S._Location_name]: null,
        [S._Location_column]: 16,
        [S._Location_line]: 422,
        [S._Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview.dart"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "viewType",
        [S._Location_column]: 9,
        [S._Location_line]: 447,
        [S._Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "onPlatformViewCreated",
        [S._Location_column]: 9,
        [S._Location_line]: 448,
        [S._Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "gestureRecognizers",
        [S._Location_column]: 9,
        [S._Location_line]: 449,
        [S._Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "creationParams",
        [S._Location_column]: 9,
        [S._Location_line]: 450,
        [S._Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "creationParamsCodec",
        [S._Location_column]: 9,
        [S._Location_line]: 465,
        [S._Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39], T._LocationL());
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: C[34] || CT.C34,
        [S._Location_name]: null,
        [S._Location_column]: 14,
        [S._Location_line]: 446,
        [S._Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview.dart"
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: null,
        [S._Location_name]: "data",
        [S._Location_column]: 89,
        [S._Location_line]: 469,
        [S._Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.constList([C[42] || CT.C42], T._LocationL());
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S._Location_parameterLocations]: C[41] || CT.C41,
        [S._Location_name]: null,
        [S._Location_column]: 12,
        [S._Location_line]: 468,
        [S._Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview.dart"
      });
    },
    get C43() {
      return C[43] = dart.constList([], T.ContentBlockerTriggerResourceTypeL());
    },
    get C44() {
      return C[44] = dart.constList([], T.StringL());
    },
    get C45() {
      return C[45] = dart.constList([], T.ContentBlockerTriggerLoadTypeL());
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: types.IOSWKSelectionGranularity.prototype,
        [S.IOSWKSelectionGranularity__value]: 0
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "NONE"
      });
    },
    get C47() {
      return C[47] = dart.constList([C[48] || CT.C48], T.IOSWKDataDetectorTypesL());
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: types.IOSUIScrollViewDecelerationRate.prototype,
        [S.IOSUIScrollViewDecelerationRate__value]: "NORMAL"
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [S.IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 2
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [S.AndroidCacheMode__value]: -1
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: types.AndroidForceDark.prototype,
        [S.AndroidForceDark__value]: 0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: types.AndroidOverScrollMode.prototype,
        [S.AndroidOverScrollMode__value]: 1
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [S.AndroidScrollBarStyle__value]: 0
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: types.AndroidVerticalScrollbarPosition.prototype,
        [S.AndroidVerticalScrollbarPosition__value]: 0
      });
    },
    get C56() {
      return C[56] = dart.constList([], T.ContentBlockerL());
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: types.UserPreferredContentMode.prototype,
        [S.UserPreferredContentMode__value]: 0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: ui.Size.prototype,
        [S.OffsetBase__dy]: -1,
        [S.OffsetBase__dx]: -1
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_headless_inappwebview"
      });
    },
    get C60() {
      return C[60] = dart.constMap(T.StringL(), dart.dynamic, []);
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [S._value]: 0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [S._value]: 1
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [S._value]: 2
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [S._value]: 3
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: types.ConsoleMessageLevel.prototype,
        [S._value]: 4
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: types.JsAlertResponseAction.prototype,
        [S$._value$2]: 0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: types.JsConfirmResponseAction.prototype,
        [S$._value$3]: 0
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: types.JsConfirmResponseAction.prototype,
        [S$._value$3]: 1
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: types.JsPromptResponseAction.prototype,
        [S$._value$4]: 0
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: types.JsPromptResponseAction.prototype,
        [S$._value$4]: 1
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: types.JsBeforeUnloadResponseAction.prototype,
        [S$._value$5]: 0
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: types.JsBeforeUnloadResponseAction.prototype,
        [S$._value$5]: 1
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [S$._value$6]: 0
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [S$._value$6]: 1
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [S$._value$6]: 2
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [S$._value$6]: 3
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: types.SafeBrowsingThreat.prototype,
        [S$._value$6]: 4
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: types.SafeBrowsingResponseAction.prototype,
        [S$._value$7]: 0
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: types.SafeBrowsingResponseAction.prototype,
        [S$._value$7]: 1
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: types.SafeBrowsingResponseAction.prototype,
        [S$._value$7]: 2
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: types.HttpAuthResponseAction.prototype,
        [S$._value$8]: 0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: types.HttpAuthResponseAction.prototype,
        [S$._value$8]: 1
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: types.HttpAuthResponseAction.prototype,
        [S$._value$8]: 2
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: types.IOSURLCredentialPersistence.prototype,
        [S$._value$9]: 0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: types.IOSURLCredentialPersistence.prototype,
        [S$._value$9]: 1
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: types.IOSURLCredentialPersistence.prototype,
        [S$._value$9]: 2
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: types.IOSURLCredentialPersistence.prototype,
        [S$._value$9]: 3
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceProxyType.prototype,
        [S$._value$10]: "NSURLProtectionSpaceHTTPProxy"
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceProxyType.prototype,
        [S$._value$10]: "NSURLProtectionSpaceHTTPSProxy"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceProxyType.prototype,
        [S$._value$10]: "NSURLProtectionSpaceFTPProxy"
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceProxyType.prototype,
        [S$._value$10]: "NSURLProtectionSpaceSOCKSProxy"
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceAuthenticationMethod.prototype,
        [S$._value$11]: "NSURLAuthenticationMethodClientCertificate"
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceAuthenticationMethod.prototype,
        [S$._value$11]: "NSURLAuthenticationMethodNegotiate"
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceAuthenticationMethod.prototype,
        [S$._value$11]: "NSURLAuthenticationMethodNTLM"
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: types.IOSNSURLProtectionSpaceAuthenticationMethod.prototype,
        [S$._value$11]: "NSURLAuthenticationMethodServerTrust"
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: types.ServerTrustAuthResponseAction.prototype,
        [S$._value$12]: 0
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: types.ServerTrustAuthResponseAction.prototype,
        [S$._value$12]: 1
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: types.ClientCertResponseAction.prototype,
        [S$._value$13]: 0
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: types.ClientCertResponseAction.prototype,
        [S$._value$13]: 1
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: types.ClientCertResponseAction.prototype,
        [S$._value$13]: 2
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [S.AndroidCacheMode__value]: 1
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [S.AndroidCacheMode__value]: 2
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: types.AndroidCacheMode.prototype,
        [S.AndroidCacheMode__value]: 3
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [S$._value$15]: 0
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [S$._value$15]: 1
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [S$._value$15]: 2
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: types.AndroidActionModeMenuItem.prototype,
        [S$._value$15]: 4
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: types.AndroidForceDark.prototype,
        [S.AndroidForceDark__value]: 1
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: types.AndroidForceDark.prototype,
        [S.AndroidForceDark__value]: 2
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: types.AndroidLayoutAlgorithm.prototype,
        [S$._value$17]: "NORMAL"
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: types.AndroidLayoutAlgorithm.prototype,
        [S$._value$17]: "TEXT_AUTOSIZING"
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: types.AndroidLayoutAlgorithm.prototype,
        [S$._value$17]: "NARROW_COLUMNS"
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: types.AndroidMixedContentMode.prototype,
        [S$._value$18]: 0
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: types.AndroidMixedContentMode.prototype,
        [S$._value$18]: 1
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: types.AndroidMixedContentMode.prototype,
        [S$._value$18]: 2
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: types.IOSWKSelectionGranularity.prototype,
        [S.IOSWKSelectionGranularity__value]: 1
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "PHONE_NUMBER"
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "LINK"
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "ADDRESS"
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "CALENDAR_EVENT"
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "TRACKING_NUMBER"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "FLIGHT_NUMBER"
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "LOOKUP_SUGGESTION"
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "SPOTLIGHT_SUGGESTION"
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: types.IOSWKDataDetectorTypes.prototype,
        [S.IOSWKDataDetectorTypes__value]: "ALL"
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: types.IOSUIScrollViewDecelerationRate.prototype,
        [S.IOSUIScrollViewDecelerationRate__value]: "FAST"
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: types.UserPreferredContentMode.prototype,
        [S.UserPreferredContentMode__value]: 1
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: types.UserPreferredContentMode.prototype,
        [S.UserPreferredContentMode__value]: 2
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 1
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 2
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 3
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 4
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 5
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 6
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 7
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 8
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: types.IOSUIModalPresentationStyle.prototype,
        [S.IOSUIModalPresentationStyle__value]: 9
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [S.IOSUIModalTransitionStyle__value]: 1
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [S.IOSUIModalTransitionStyle__value]: 2
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: types.IOSUIModalTransitionStyle.prototype,
        [S.IOSUIModalTransitionStyle__value]: 3
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: types.IOSSafariDismissButtonStyle.prototype,
        [S.IOSSafariDismissButtonStyle__value]: 1
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: types.IOSSafariDismissButtonStyle.prototype,
        [S.IOSSafariDismissButtonStyle__value]: 2
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: types.AjaxRequestAction.prototype,
        [S$._value$26]: 0
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: types.AjaxRequestAction.prototype,
        [S$._value$26]: 1
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "loadstart"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "load"
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "loadend"
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "progress"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "error"
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "abort"
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: types.AjaxRequestEventType.prototype,
        [S$._value$27]: "timeout"
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [S$._value$28]: 0
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [S$._value$28]: 1
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [S$._value$28]: 2
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [S$._value$28]: 3
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: types.AjaxRequestReadyState.prototype,
        [S$._value$28]: 4
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: types.FetchRequestAction.prototype,
        [S$._value$29]: 0
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: types.FetchRequestAction.prototype,
        [S$._value$29]: 1
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "document"
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "image"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "style-sheet"
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "script"
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "font"
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "media"
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "svg-document"
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: types.ContentBlockerTriggerResourceType.prototype,
        [S$._value$30]: "raw"
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: types.ContentBlockerTriggerLoadType.prototype,
        [S$._value$31]: "first-party"
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: types.ContentBlockerTriggerLoadType.prototype,
        [S$._value$31]: "third-party"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: types.ContentBlockerActionType.prototype,
        [S$._value$32]: "block"
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: types.ContentBlockerActionType.prototype,
        [S$._value$32]: "css-display-none"
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: types.ContentBlockerActionType.prototype,
        [S$._value$32]: "make-https"
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: types.PermissionRequestResponseAction.prototype,
        [S$._value$33]: 0
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: types.PermissionRequestResponseAction.prototype,
        [S$._value$33]: 1
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: types.NavigationActionPolicy.prototype,
        [S$._value$34]: 0
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: types.NavigationActionPolicy.prototype,
        [S$._value$34]: 1
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [S$._value$35]: 0
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [S$._value$35]: 1
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [S$._value$35]: 2
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [S$._value$35]: 3
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [S$._value$35]: 4
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: types.IOSWKNavigationType.prototype,
        [S$._value$35]: -1
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: types.IOSURLRequestCachePolicy.prototype,
        [S$._value$36]: 0
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: types.IOSURLRequestCachePolicy.prototype,
        [S$._value$36]: 1
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: types.IOSURLRequestCachePolicy.prototype,
        [S$._value$36]: 2
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: types.IOSURLRequestCachePolicy.prototype,
        [S$._value$36]: 3
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: types.IOSURLRequestCachePolicy.prototype,
        [S$._value$36]: 4
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: types.IOSURLRequestCachePolicy.prototype,
        [S$._value$36]: 5
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 0
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 2
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 3
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 4
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 6
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 8
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 9
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: types.IOSURLRequestNetworkServiceType.prototype,
        [S$._value$37]: 11
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeFetchCache"
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeDiskCache"
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeMemoryCache"
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeOfflineWebApplicationCache"
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeCookies"
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeSessionStorage"
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeLocalStorage"
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeWebSQLDatabases"
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeIndexedDBDatabases"
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: types.IOSWKWebsiteDataType.prototype,
        [S$._value$38]: "WKWebsiteDataTypeServiceWorkerRegistrations"
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 0
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 2
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 3
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 4
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 5
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 7
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 8
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: types.InAppWebViewHitTestResultType.prototype,
        [S$._value$39]: 9
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: types.WebViewRenderProcessAction.prototype,
        [S$._value$40]: 0
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: types.RendererPriority.prototype,
        [S$._value$41]: 0
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: types.RendererPriority.prototype,
        [S$._value$41]: 1
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: types.RendererPriority.prototype,
        [S$._value$41]: 2
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: types.FormResubmissionAction.prototype,
        [S$._value$42]: 0
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: types.FormResubmissionAction.prototype,
        [S$._value$42]: 1
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: types.AndroidOverScrollMode.prototype,
        [S.AndroidOverScrollMode__value]: 0
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: types.AndroidOverScrollMode.prototype,
        [S.AndroidOverScrollMode__value]: 2
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [S.AndroidScrollBarStyle__value]: 16777216
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [S.AndroidScrollBarStyle__value]: 33554432
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: types.AndroidScrollBarStyle.prototype,
        [S.AndroidScrollBarStyle__value]: 50331648
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: types.AndroidVerticalScrollbarPosition.prototype,
        [S.AndroidVerticalScrollbarPosition__value]: 1
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: types.AndroidVerticalScrollbarPosition.prototype,
        [S.AndroidVerticalScrollbarPosition__value]: 2
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: types.WebStorageType.prototype,
        [S$._value$46]: "localStorage"
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: types.WebStorageType.prototype,
        [S$._value$46]: "sessionStorage"
      });
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: types.HTTPCookieSameSitePolicy.prototype,
        [S$._value$47]: "Lax"
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: types.HTTPCookieSameSitePolicy.prototype,
        [S$._value$47]: "Strict"
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: types.HTTPCookieSameSitePolicy.prototype,
        [S$._value$47]: "None"
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [S$._value$48]: 0
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [S$._value$48]: 1
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [S$._value$48]: 2
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [S$._value$48]: 3
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [S$._value$48]: 4
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: types.AndroidSslError.prototype,
        [S$._value$48]: 5
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [S$._value$49]: 0
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [S$._value$49]: 3
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [S$._value$49]: 4
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [S$._value$49]: 5
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [S$._value$49]: 6
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: types.IOSSslError.prototype,
        [S$._value$49]: 7
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [S.IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 0
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [S.IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 1
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype,
        [S.IOSUIScrollViewContentInsetAdjustmentBehavior__value]: 3
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: types.UserScriptInjectionTime.prototype,
        [S$._value$51]: 0
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: types.UserScriptInjectionTime.prototype,
        [S$._value$51]: 1
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: types.CompressFormat.prototype,
        [S$._value$52]: "PNG"
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: types.CompressFormat.prototype,
        [S$._value$52]: "JPEG"
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: types.CompressFormat.prototype,
        [S$._value$52]: "WEBP"
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: types.CompressFormat.prototype,
        [S$._value$52]: "WEBP_LOSSY"
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: types.CompressFormat.prototype,
        [S$._value$52]: "WEBP_LOSSLESS"
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: types.WebArchiveFormat.prototype,
        [S$._value$53]: "mht"
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: types.WebArchiveFormat.prototype,
        [S$._value$53]: "webarchive"
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: types.CrossOrigin.prototype,
        [S$._value$54]: "anonymous"
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: types.CrossOrigin.prototype,
        [S$._value$54]: "use-credentials"
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "no-referrer"
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "no-referrer-when-downgrade"
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "origin"
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "origin-when-cross-origin"
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "same-origin"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "strict-origin"
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "strict-origin-when-cross-origin"
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: types.ReferrerPolicy.prototype,
        [S$._value$55]: "unsafe-url"
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: types.IOSNavigationResponseAction.prototype,
        [S$._value$56]: 0
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: types.IOSNavigationResponseAction.prototype,
        [S$._value$56]: 1
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: types.IOSShouldAllowDeprecatedTLSAction.prototype,
        [S$._value$57]: 0
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: types.IOSShouldAllowDeprecatedTLSAction.prototype,
        [S$._value$57]: 1
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 0
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 1
      });
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 2
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 9
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 256
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 512
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 768
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 1024
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: types.IOSNSUnderlineStyle.prototype,
        [S$._value$58]: 32768
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: types.IOSNSAttributedStringTextEffectStyle.prototype,
        [S$._value$59]: "letterpressStyle"
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: types.AndroidPullToRefreshSize.prototype,
        [S$._value$60]: 1
      });
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: types.AndroidPullToRefreshSize.prototype,
        [S$._value$60]: 0
      });
    },
    get C282() {
      return C[282] = dart.constList([], T.ContextMenuItemL());
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S.MethodChannel__binaryMessenger]: null,
        [S.MethodChannel_codec]: C[2] || CT.C2,
        [S.MethodChannel_name]: "com.pichillilorenzo/flutter_inappbrowser"
      });
    }
  }, false);
  var C = Array(284).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/web_storage/ios/web_storage_manager.dart",
    "package:flutter_inappwebview/src/web_storage/ios/web_storage_manager.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/web_storage/android/web_storage_manager.dart",
    "package:flutter_inappwebview/src/web_storage/android/web_storage_manager.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/web_storage/web_storage_manager.dart",
    "package:flutter_inappwebview/src/web_storage/web_storage_manager.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/android/service_worker_controller.dart",
    "package:flutter_inappwebview/src/android/service_worker_controller.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/chrome_safari_browser/ios/safari_options.dart",
    "package:flutter_inappwebview/src/chrome_safari_browser/ios/safari_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/chrome_safari_browser/android/chrome_custom_tabs_options.dart",
    "package:flutter_inappwebview/src/chrome_safari_browser/android/chrome_custom_tabs_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/chrome_safari_browser/chrome_safari_browser_options.dart",
    "package:flutter_inappwebview/src/chrome_safari_browser/chrome_safari_browser_options.dart",
    "package:flutter_inappwebview/src/chrome_safari_browser/chrome_safari_browser.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/chrome_safari_browser/chrome_safari_browser.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/cookie_manager.dart",
    "package:flutter_inappwebview/src/cookie_manager.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/http_auth_credentials_database.dart",
    "package:flutter_inappwebview/src/http_auth_credentials_database.dart",
    "package:flutter_inappwebview/src/in_app_webview/in_app_webview.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/pull_to_refresh/pull_to_refresh_options.dart",
    "package:flutter_inappwebview/src/pull_to_refresh/pull_to_refresh_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/content_blocker.dart",
    "package:flutter_inappwebview/src/content_blocker.dart",
    "package:flutter_inappwebview/src/in_app_webview/ios/in_app_webview_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/ios/in_app_webview_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_browser/ios/in_app_browser_options.dart",
    "package:flutter_inappwebview/src/in_app_browser/ios/in_app_browser_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_browser/android/in_app_browser_options.dart",
    "package:flutter_inappwebview/src/in_app_browser/android/in_app_browser_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_browser/in_app_browser_options.dart",
    "package:flutter_inappwebview/src/in_app_browser/in_app_browser_options.dart",
    "package:flutter_inappwebview/src/in_app_webview/android/in_app_webview_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/android/in_app_webview_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview_options.dart",
    "package:flutter_inappwebview/src/in_app_webview/in_app_webview_options.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/headless_in_app_webview.dart",
    "package:flutter_inappwebview/src/in_app_webview/headless_in_app_webview.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/web_message/web_message_listener.dart",
    "package:flutter_inappwebview/src/web_message/web_message_listener.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/web_message/web_message_channel.dart",
    "package:flutter_inappwebview/src/web_message/web_message_channel.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/web_storage/web_storage.dart",
    "package:flutter_inappwebview/src/web_storage/web_storage.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/ios/in_app_webview_controller.dart",
    "package:flutter_inappwebview/src/in_app_webview/ios/in_app_webview_controller.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/android/in_app_webview_controller.dart",
    "package:flutter_inappwebview/src/in_app_webview/android/in_app_webview_controller.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_webview/in_app_webview_controller.dart",
    "package:flutter_inappwebview/src/in_app_webview/in_app_webview_controller.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/types.dart",
    "package:flutter_inappwebview/src/types.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/context_menu.dart",
    "package:flutter_inappwebview/src/context_menu.dart",
    "package:flutter_inappwebview/src/in_app_browser/in_app_browser.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/in_app_browser/in_app_browser.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_inappwebview-5.3.2/lib/src/pull_to_refresh/pull_to_refresh_controller.dart",
    "package:flutter_inappwebview/src/pull_to_refresh/pull_to_refresh_controller.dart",
    "package:flutter_inappwebview/src/in_app_webview/webview.dart"
  ];
  web_storage_manager.IOSWebStorageManager = class IOSWebStorageManager extends core.Object {
    fetchDataRecords(opts) {
      let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
      if (dataTypes == null) dart.nullFailed(I[0], 19, 43, "dataTypes");
      return async.async(T.ListOfIOSWKWebsiteDataRecord(), function* fetchDataRecords() {
        let recordList = T.JSArrayOfIOSWKWebsiteDataRecord().of([]);
        let dataTypesList = T.JSArrayOfString().of([]);
        for (let dataType of dataTypes) {
          dataTypesList[S.$add](dataType.toValue());
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("dataTypes", dart.fn(() => dataTypesList, T.VoidToListOfString()));
        let records = T.ListOfMap().as(dart.dgsend(yield web_storage_manager.IOSWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "fetchDataRecords", args), [core.Map], 'cast', []));
        for (let record of records) {
          let dataTypesString = T.ListOfString().as(dart.dgsend(record[S.$_get]("dataTypes"), [core.String], 'cast', []));
          let dataTypes = new (T._HashSetOfIOSWKWebsiteDataType()).new();
          for (let dataTypeValue of dataTypesString) {
            let dataType = types.IOSWKWebsiteDataType.fromValue(dataTypeValue);
            if (dataType != null) {
              dataTypes.add(dataType);
            }
          }
          recordList[S.$add](new types.IOSWKWebsiteDataRecord.new({displayName: T.StringN().as(record[S.$_get]("displayName")), dataTypes: dataTypes}));
        }
        return recordList;
      });
    }
    removeDataFor(opts) {
      let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
      if (dataTypes == null) dart.nullFailed(I[0], 51, 43, "dataTypes");
      let dataRecords = opts && 'dataRecords' in opts ? opts.dataRecords : null;
      if (dataRecords == null) dart.nullFailed(I[0], 52, 45, "dataRecords");
      return async.async(dart.void, function* removeDataFor() {
        let dataTypesList = T.JSArrayOfString().of([]);
        for (let dataType of dataTypes) {
          dataTypesList[S.$add](dataType.toValue());
        }
        let recordList = T.JSArrayOfMapOfString$dynamic().of([]);
        for (let record of dataRecords) {
          recordList[S.$add](record.toMap());
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("dataTypes", dart.fn(() => dataTypesList, T.VoidToListOfString()));
        args[S.$putIfAbsent]("recordList", dart.fn(() => recordList, T.VoidToListOfMapOfString$dynamic()));
        yield web_storage_manager.IOSWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "removeDataFor", args);
      });
    }
    removeDataModifiedSince(opts) {
      let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
      if (dataTypes == null) dart.nullFailed(I[0], 75, 43, "dataTypes");
      let date = opts && 'date' in opts ? opts.date : null;
      if (date == null) dart.nullFailed(I[0], 76, 25, "date");
      return async.async(dart.void, function* removeDataModifiedSince() {
        let dataTypesList = T.JSArrayOfString().of([]);
        for (let dataType of dataTypes) {
          dataTypesList[S.$add](dataType.toValue());
        }
        let timestamp = date.millisecondsSinceEpoch;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("dataTypes", dart.fn(() => dataTypesList, T.VoidToListOfString()));
        args[S.$putIfAbsent]("timestamp", dart.fn(() => timestamp, T.VoidToint()));
        yield web_storage_manager.IOSWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "removeDataModifiedSince", args);
      });
    }
  };
  (web_storage_manager.IOSWebStorageManager.new = function() {
    ;
  }).prototype = web_storage_manager.IOSWebStorageManager.prototype;
  dart.addTypeTests(web_storage_manager.IOSWebStorageManager);
  dart.addTypeCaches(web_storage_manager.IOSWebStorageManager);
  dart.setMethodSignature(web_storage_manager.IOSWebStorageManager, () => ({
    __proto__: dart.getMethods(web_storage_manager.IOSWebStorageManager.__proto__),
    fetchDataRecords: dart.fnType(async.Future$(core.List$(types.IOSWKWebsiteDataRecord)), [], {}, {dataTypes: core.Set$(types.IOSWKWebsiteDataType)}),
    removeDataFor: dart.fnType(async.Future$(dart.void), [], {}, {dataRecords: core.List$(types.IOSWKWebsiteDataRecord), dataTypes: core.Set$(types.IOSWKWebsiteDataType)}),
    removeDataModifiedSince: dart.fnType(async.Future$(dart.void), [], {}, {dataTypes: core.Set$(types.IOSWKWebsiteDataType), date: core.DateTime})
  }));
  dart.setLibraryUri(web_storage_manager.IOSWebStorageManager, I[1]);
  dart.defineLazy(web_storage_manager.IOSWebStorageManager, {
    /*web_storage_manager.IOSWebStorageManager._staticChannel*/get _staticChannel() {
      return _static_channel.WEB_STORAGE_STATIC_CHANNEL;
    },
    set _staticChannel(_) {}
  }, false);
  web_storage_manager$.AndroidWebStorageManager = class AndroidWebStorageManager extends core.Object {
    getOrigins() {
      return async.async(T.ListOfAndroidWebStorageOrigin(), function* getOrigins() {
        let originsList = T.JSArrayOfAndroidWebStorageOrigin().of([]);
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let origins = T.ListOfMap().as(dart.dgsend(yield web_storage_manager$.AndroidWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "getOrigins", args), [core.Map], 'cast', []));
        for (let origin of origins) {
          originsList[S.$add](new types.AndroidWebStorageOrigin.new({origin: T.StringN().as(origin[S.$_get]("origin")), quota: T.intN().as(origin[S.$_get]("quota")), usage: T.intN().as(origin[S.$_get]("usage"))}));
        }
        return originsList;
      });
    }
    deleteAllData() {
      return async.async(dart.void, function* deleteAllData() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield web_storage_manager$.AndroidWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "deleteAllData", args);
      });
    }
    deleteOrigin(opts) {
      let origin = opts && 'origin' in opts ? opts.origin : null;
      if (origin == null) dart.nullFailed(I[2], 41, 46, "origin");
      return async.async(dart.void, function* deleteOrigin() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("origin", dart.fn(() => origin, T.VoidToString()));
        yield web_storage_manager$.AndroidWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "deleteOrigin", args);
      });
    }
    getQuotaForOrigin(opts) {
      let origin = opts && 'origin' in opts ? opts.origin : null;
      if (origin == null) dart.nullFailed(I[2], 50, 50, "origin");
      return async.async(core.int, function* getQuotaForOrigin() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("origin", dart.fn(() => origin, T.VoidToString()));
        return T.FutureOrOfint().as(yield web_storage_manager$.AndroidWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "getQuotaForOrigin", args));
      });
    }
    getUsageForOrigin(opts) {
      let origin = opts && 'origin' in opts ? opts.origin : null;
      if (origin == null) dart.nullFailed(I[2], 58, 50, "origin");
      return async.async(core.int, function* getUsageForOrigin() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("origin", dart.fn(() => origin, T.VoidToString()));
        return T.FutureOrOfint().as(yield web_storage_manager$.AndroidWebStorageManager._staticChannel.invokeMethod(dart.dynamic, "getUsageForOrigin", args));
      });
    }
  };
  (web_storage_manager$.AndroidWebStorageManager.new = function() {
    ;
  }).prototype = web_storage_manager$.AndroidWebStorageManager.prototype;
  dart.addTypeTests(web_storage_manager$.AndroidWebStorageManager);
  dart.addTypeCaches(web_storage_manager$.AndroidWebStorageManager);
  dart.setMethodSignature(web_storage_manager$.AndroidWebStorageManager, () => ({
    __proto__: dart.getMethods(web_storage_manager$.AndroidWebStorageManager.__proto__),
    getOrigins: dart.fnType(async.Future$(core.List$(types.AndroidWebStorageOrigin)), []),
    deleteAllData: dart.fnType(async.Future$(dart.void), []),
    deleteOrigin: dart.fnType(async.Future$(dart.void), [], {}, {origin: core.String}),
    getQuotaForOrigin: dart.fnType(async.Future$(core.int), [], {}, {origin: core.String}),
    getUsageForOrigin: dart.fnType(async.Future$(core.int), [], {}, {origin: core.String})
  }));
  dart.setLibraryUri(web_storage_manager$.AndroidWebStorageManager, I[3]);
  dart.defineLazy(web_storage_manager$.AndroidWebStorageManager, {
    /*web_storage_manager$.AndroidWebStorageManager._staticChannel*/get _staticChannel() {
      return _static_channel.WEB_STORAGE_STATIC_CHANNEL;
    },
    set _staticChannel(_) {}
  }, false);
  web_storage_manager$0.WebStorageManager = class WebStorageManager extends core.Object {
    get android() {
      return this[S.android];
    }
    set android(value) {
      this[S.android] = value;
    }
    get ios() {
      return this[S.ios];
    }
    set ios(value) {
      this[S.ios] = value;
    }
    static instance() {
      return web_storage_manager$0.WebStorageManager._instance != null ? dart.nullCheck(web_storage_manager$0.WebStorageManager._instance) : web_storage_manager$0.WebStorageManager._init();
    }
    static _init() {
      web_storage_manager$0.WebStorageManager._staticChannel.setMethodCallHandler(C[0] || CT.C0);
      web_storage_manager$0.WebStorageManager._instance = new web_storage_manager$0.WebStorageManager.new();
      return dart.nullCheck(web_storage_manager$0.WebStorageManager._instance);
    }
    static _handleMethod(call) {
      if (call == null) dart.nullFailed(I[4], 32, 51, "call");
      return async.async(dart.dynamic, function* _handleMethod() {
      });
    }
  };
  (web_storage_manager$0.WebStorageManager.new = function() {
    this[S.android] = new web_storage_manager$.AndroidWebStorageManager.new();
    this[S.ios] = new web_storage_manager.IOSWebStorageManager.new();
    ;
  }).prototype = web_storage_manager$0.WebStorageManager.prototype;
  dart.addTypeTests(web_storage_manager$0.WebStorageManager);
  dart.addTypeCaches(web_storage_manager$0.WebStorageManager);
  dart.setLibraryUri(web_storage_manager$0.WebStorageManager, I[5]);
  dart.setFieldSignature(web_storage_manager$0.WebStorageManager, () => ({
    __proto__: dart.getFields(web_storage_manager$0.WebStorageManager.__proto__),
    android: dart.fieldType(web_storage_manager$.AndroidWebStorageManager),
    ios: dart.fieldType(web_storage_manager.IOSWebStorageManager)
  }));
  dart.defineLazy(web_storage_manager$0.WebStorageManager, {
    /*web_storage_manager$0.WebStorageManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*web_storage_manager$0.WebStorageManager._staticChannel*/get _staticChannel() {
      return C[1] || CT.C1;
    }
  }, false);
  service_worker_controller.AndroidServiceWorkerController = class AndroidServiceWorkerController extends core.Object {
    get serviceWorkerClient() {
      return this[S.serviceWorkerClient];
    }
    set serviceWorkerClient(value) {
      this[S.serviceWorkerClient] = value;
    }
    static instance() {
      return service_worker_controller.AndroidServiceWorkerController._instance != null ? dart.nullCheck(service_worker_controller.AndroidServiceWorkerController._instance) : service_worker_controller.AndroidServiceWorkerController._init();
    }
    static _init() {
      service_worker_controller.AndroidServiceWorkerController._channel.setMethodCallHandler(C[4] || CT.C4);
      service_worker_controller.AndroidServiceWorkerController._instance = new service_worker_controller.AndroidServiceWorkerController.new();
      return dart.nullCheck(service_worker_controller.AndroidServiceWorkerController._instance);
    }
    static _handleMethod(call) {
      if (call == null) dart.nullFailed(I[6], 29, 51, "call");
      return async.async(dart.dynamic, function* _handleMethod() {
        let t0;
        let controller = service_worker_controller.AndroidServiceWorkerController.instance();
        let serviceWorkerClient = controller.serviceWorkerClient;
        switch (call.method) {
          case "shouldInterceptRequest":
          {
            if (serviceWorkerClient != null && serviceWorkerClient.shouldInterceptRequest != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let request = dart.nullCheck(types.WebResourceRequest.fromMap($arguments));
              t0 = (yield dart.nullCheck(serviceWorkerClient.shouldInterceptRequest)(request));
              return t0 == null ? null : t0.toMap();
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
        return null;
      });
    }
    static getAllowContentAccess() {
      return async.async(core.bool, function* getAllowContentAccess() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "getAllowContentAccess", args));
      });
    }
    static getAllowFileAccess() {
      return async.async(core.bool, function* getAllowFileAccess() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "getAllowFileAccess", args));
      });
    }
    static getBlockNetworkLoads() {
      return async.async(core.bool, function* getBlockNetworkLoads() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "getBlockNetworkLoads", args));
      });
    }
    static getCacheMode() {
      return async.async(T.AndroidCacheModeN(), function* getCacheMode() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return types.AndroidCacheMode.fromValue(yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(core.int, "getCacheMode", args));
      });
    }
    static setAllowContentAccess(allow) {
      if (allow == null) dart.nullFailed(I[6], 105, 50, "allow");
      return async.async(dart.void, function* setAllowContentAccess() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("allow", dart.fn(() => allow, T.VoidTobool()));
        yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "setAllowContentAccess", args);
      });
    }
    static setAllowFileAccess(allow) {
      if (allow == null) dart.nullFailed(I[6], 117, 47, "allow");
      return async.async(dart.void, function* setAllowFileAccess() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("allow", dart.fn(() => allow, T.VoidTobool()));
        yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "setAllowFileAccess", args);
      });
    }
    static setBlockNetworkLoads(flag) {
      if (flag == null) dart.nullFailed(I[6], 129, 49, "flag");
      return async.async(dart.void, function* setBlockNetworkLoads() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("flag", dart.fn(() => flag, T.VoidTobool()));
        yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "setBlockNetworkLoads", args);
      });
    }
    static setCacheMode(mode) {
      if (mode == null) dart.nullFailed(I[6], 141, 53, "mode");
      return async.async(dart.void, function* setCacheMode() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("mode", dart.fn(() => mode.toValue(), T.VoidToint()));
        yield service_worker_controller.AndroidServiceWorkerController._channel.invokeMethod(dart.dynamic, "setCacheMode", args);
      });
    }
  };
  (service_worker_controller.AndroidServiceWorkerController.new = function() {
    this[S.serviceWorkerClient] = null;
    ;
  }).prototype = service_worker_controller.AndroidServiceWorkerController.prototype;
  dart.addTypeTests(service_worker_controller.AndroidServiceWorkerController);
  dart.addTypeCaches(service_worker_controller.AndroidServiceWorkerController);
  dart.setLibraryUri(service_worker_controller.AndroidServiceWorkerController, I[7]);
  dart.setFieldSignature(service_worker_controller.AndroidServiceWorkerController, () => ({
    __proto__: dart.getFields(service_worker_controller.AndroidServiceWorkerController.__proto__),
    serviceWorkerClient: dart.fieldType(dart.nullable(service_worker_controller.AndroidServiceWorkerClient))
  }));
  dart.defineLazy(service_worker_controller.AndroidServiceWorkerController, {
    /*service_worker_controller.AndroidServiceWorkerController._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*service_worker_controller.AndroidServiceWorkerController._channel*/get _channel() {
      return C[5] || CT.C5;
    }
  }, false);
  service_worker_controller.AndroidServiceWorkerClient = class AndroidServiceWorkerClient extends core.Object {
    get shouldInterceptRequest() {
      return this[S.shouldInterceptRequest];
    }
    set shouldInterceptRequest(value) {
      super.shouldInterceptRequest = value;
    }
  };
  (service_worker_controller.AndroidServiceWorkerClient.new = function(opts) {
    let shouldInterceptRequest = opts && 'shouldInterceptRequest' in opts ? opts.shouldInterceptRequest : null;
    this[S.shouldInterceptRequest] = shouldInterceptRequest;
    ;
  }).prototype = service_worker_controller.AndroidServiceWorkerClient.prototype;
  dart.addTypeTests(service_worker_controller.AndroidServiceWorkerClient);
  dart.addTypeCaches(service_worker_controller.AndroidServiceWorkerClient);
  dart.setLibraryUri(service_worker_controller.AndroidServiceWorkerClient, I[7]);
  dart.setFieldSignature(service_worker_controller.AndroidServiceWorkerClient, () => ({
    __proto__: dart.getFields(service_worker_controller.AndroidServiceWorkerClient.__proto__),
    shouldInterceptRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebResourceResponse)), [types.WebResourceRequest])))
  }));
  safari_options.IOSSafariOptions = class IOSSafariOptions extends core.Object {
    get entersReaderIfAvailable() {
      return this[S.entersReaderIfAvailable];
    }
    set entersReaderIfAvailable(value) {
      this[S.entersReaderIfAvailable] = value;
    }
    get barCollapsingEnabled() {
      return this[S.barCollapsingEnabled];
    }
    set barCollapsingEnabled(value) {
      this[S.barCollapsingEnabled] = value;
    }
    get dismissButtonStyle() {
      return this[S.dismissButtonStyle];
    }
    set dismissButtonStyle(value) {
      this[S.dismissButtonStyle] = value;
    }
    get preferredBarTintColor() {
      return this[S.preferredBarTintColor];
    }
    set preferredBarTintColor(value) {
      this[S.preferredBarTintColor] = value;
    }
    get preferredControlTintColor() {
      return this[S.preferredControlTintColor];
    }
    set preferredControlTintColor(value) {
      this[S.preferredControlTintColor] = value;
    }
    get presentationStyle() {
      return this[S.presentationStyle];
    }
    set presentationStyle(value) {
      this[S.presentationStyle] = value;
    }
    get transitionStyle() {
      return this[S.transitionStyle];
    }
    set transitionStyle(value) {
      this[S.transitionStyle] = value;
    }
    toMap() {
      let t0, t0$;
      return new (T.IdentityMapOfString$dynamic()).from(["entersReaderIfAvailable", this.entersReaderIfAvailable, "barCollapsingEnabled", this.barCollapsingEnabled, "dismissButtonStyle", this.dismissButtonStyle.toValue(), "preferredBarTintColor", (t0 = this.preferredBarTintColor, t0 == null ? null : util['HexColor|toHex'](t0)), "preferredControlTintColor", (t0$ = this.preferredControlTintColor, t0$ == null ? null : util['HexColor|toHex'](t0$)), "presentationStyle", this.presentationStyle.toValue(), "transitionStyle", this.transitionStyle.toValue()]);
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[8], 62, 56, "map");
      let options = new safari_options.IOSSafariOptions.new();
      options.entersReaderIfAvailable = core.bool.as(map[S.$_get]("entersReaderIfAvailable"));
      options.barCollapsingEnabled = core.bool.as(map[S.$_get]("barCollapsingEnabled"));
      options.dismissButtonStyle = dart.nullCheck(types.IOSSafariDismissButtonStyle.fromValue(T.intN().as(map[S.$_get]("dismissButtonStyle"))));
      options.preferredBarTintColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("preferredBarTintColor")));
      options.preferredControlTintColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("preferredControlTintColor")));
      options.presentationStyle = dart.nullCheck(types.IOSUIModalPresentationStyle.fromValue(T.intN().as(map[S.$_get]("presentationStyle"))));
      options.transitionStyle = dart.nullCheck(types.IOSUIModalTransitionStyle.fromValue(T.intN().as(map[S.$_get]("transitionStyle"))));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return safari_options.IOSSafariOptions.fromMap(this.toMap());
    }
  };
  (safari_options.IOSSafariOptions.new = function(opts) {
    let entersReaderIfAvailable = opts && 'entersReaderIfAvailable' in opts ? opts.entersReaderIfAvailable : false;
    if (entersReaderIfAvailable == null) dart.nullFailed(I[8], 41, 13, "entersReaderIfAvailable");
    let barCollapsingEnabled = opts && 'barCollapsingEnabled' in opts ? opts.barCollapsingEnabled : false;
    if (barCollapsingEnabled == null) dart.nullFailed(I[8], 42, 12, "barCollapsingEnabled");
    let dismissButtonStyle = opts && 'dismissButtonStyle' in opts ? opts.dismissButtonStyle : C[6] || CT.C6;
    if (dismissButtonStyle == null) dart.nullFailed(I[8], 43, 12, "dismissButtonStyle");
    let preferredBarTintColor = opts && 'preferredBarTintColor' in opts ? opts.preferredBarTintColor : null;
    let preferredControlTintColor = opts && 'preferredControlTintColor' in opts ? opts.preferredControlTintColor : null;
    let presentationStyle = opts && 'presentationStyle' in opts ? opts.presentationStyle : C[7] || CT.C7;
    if (presentationStyle == null) dart.nullFailed(I[8], 46, 12, "presentationStyle");
    let transitionStyle = opts && 'transitionStyle' in opts ? opts.transitionStyle : C[8] || CT.C8;
    if (transitionStyle == null) dart.nullFailed(I[8], 47, 12, "transitionStyle");
    this[S.entersReaderIfAvailable] = entersReaderIfAvailable;
    this[S.barCollapsingEnabled] = barCollapsingEnabled;
    this[S.dismissButtonStyle] = dismissButtonStyle;
    this[S.preferredBarTintColor] = preferredBarTintColor;
    this[S.preferredControlTintColor] = preferredControlTintColor;
    this[S.presentationStyle] = presentationStyle;
    this[S.transitionStyle] = transitionStyle;
    ;
  }).prototype = safari_options.IOSSafariOptions.prototype;
  dart.addTypeTests(safari_options.IOSSafariOptions);
  dart.addTypeCaches(safari_options.IOSSafariOptions);
  safari_options.IOSSafariOptions[dart.implements] = () => [chrome_safari_browser_options.ChromeSafariBrowserOptions, in_app_webview_options.IosOptions];
  dart.setMethodSignature(safari_options.IOSSafariOptions, () => ({
    __proto__: dart.getMethods(safari_options.IOSSafariOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(safari_options.IOSSafariOptions, [])
  }));
  dart.setLibraryUri(safari_options.IOSSafariOptions, I[9]);
  dart.setFieldSignature(safari_options.IOSSafariOptions, () => ({
    __proto__: dart.getFields(safari_options.IOSSafariOptions.__proto__),
    entersReaderIfAvailable: dart.fieldType(core.bool),
    barCollapsingEnabled: dart.fieldType(core.bool),
    dismissButtonStyle: dart.fieldType(types.IOSSafariDismissButtonStyle),
    preferredBarTintColor: dart.fieldType(dart.nullable(ui.Color)),
    preferredControlTintColor: dart.fieldType(dart.nullable(ui.Color)),
    presentationStyle: dart.fieldType(types.IOSUIModalPresentationStyle),
    transitionStyle: dart.fieldType(types.IOSUIModalTransitionStyle)
  }));
  dart.defineExtensionMethods(safari_options.IOSSafariOptions, ['toString']);
  chrome_custom_tabs_options.AndroidChromeCustomTabsOptions = class AndroidChromeCustomTabsOptions extends core.Object {
    get addDefaultShareMenuItem() {
      return this[S.addDefaultShareMenuItem];
    }
    set addDefaultShareMenuItem(value) {
      this[S.addDefaultShareMenuItem] = value;
    }
    get showTitle() {
      return this[S.showTitle];
    }
    set showTitle(value) {
      this[S.showTitle] = value;
    }
    get toolbarBackgroundColor() {
      return this[S.toolbarBackgroundColor];
    }
    set toolbarBackgroundColor(value) {
      this[S.toolbarBackgroundColor] = value;
    }
    get enableUrlBarHiding() {
      return this[S.enableUrlBarHiding];
    }
    set enableUrlBarHiding(value) {
      this[S.enableUrlBarHiding] = value;
    }
    get instantAppsEnabled() {
      return this[S.instantAppsEnabled];
    }
    set instantAppsEnabled(value) {
      this[S.instantAppsEnabled] = value;
    }
    get packageName() {
      return this[S.packageName];
    }
    set packageName(value) {
      this[S.packageName] = value;
    }
    get keepAliveEnabled() {
      return this[S.keepAliveEnabled];
    }
    set keepAliveEnabled(value) {
      this[S.keepAliveEnabled] = value;
    }
    toMap() {
      let t0;
      return new (T.IdentityMapOfString$dynamic()).from(["addDefaultShareMenuItem", this.addDefaultShareMenuItem, "showTitle", this.showTitle, "toolbarBackgroundColor", (t0 = this.toolbarBackgroundColor, t0 == null ? null : util['HexColor|toHex'](t0)), "enableUrlBarHiding", this.enableUrlBarHiding, "instantAppsEnabled", this.instantAppsEnabled, "packageName", this.packageName, "keepAliveEnabled", this.keepAliveEnabled]);
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[10], 60, 70, "map");
      let options = new chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.new();
      options.addDefaultShareMenuItem = core.bool.as(map[S.$_get]("addDefaultShareMenuItem"));
      options.showTitle = core.bool.as(map[S.$_get]("showTitle"));
      options.toolbarBackgroundColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("toolbarBackgroundColor")));
      options.enableUrlBarHiding = core.bool.as(map[S.$_get]("enableUrlBarHiding"));
      options.instantAppsEnabled = core.bool.as(map[S.$_get]("instantAppsEnabled"));
      options.packageName = T.StringN().as(map[S.$_get]("packageName"));
      options.keepAliveEnabled = core.bool.as(map[S.$_get]("keepAliveEnabled"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.fromMap(this.toMap());
    }
  };
  (chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.new = function(opts) {
    let addDefaultShareMenuItem = opts && 'addDefaultShareMenuItem' in opts ? opts.addDefaultShareMenuItem : true;
    if (addDefaultShareMenuItem == null) dart.nullFailed(I[10], 39, 13, "addDefaultShareMenuItem");
    let showTitle = opts && 'showTitle' in opts ? opts.showTitle : true;
    if (showTitle == null) dart.nullFailed(I[10], 40, 12, "showTitle");
    let toolbarBackgroundColor = opts && 'toolbarBackgroundColor' in opts ? opts.toolbarBackgroundColor : null;
    let enableUrlBarHiding = opts && 'enableUrlBarHiding' in opts ? opts.enableUrlBarHiding : false;
    if (enableUrlBarHiding == null) dart.nullFailed(I[10], 42, 12, "enableUrlBarHiding");
    let instantAppsEnabled = opts && 'instantAppsEnabled' in opts ? opts.instantAppsEnabled : false;
    if (instantAppsEnabled == null) dart.nullFailed(I[10], 43, 12, "instantAppsEnabled");
    let packageName = opts && 'packageName' in opts ? opts.packageName : null;
    let keepAliveEnabled = opts && 'keepAliveEnabled' in opts ? opts.keepAliveEnabled : false;
    if (keepAliveEnabled == null) dart.nullFailed(I[10], 45, 12, "keepAliveEnabled");
    this[S.addDefaultShareMenuItem] = addDefaultShareMenuItem;
    this[S.showTitle] = showTitle;
    this[S.toolbarBackgroundColor] = toolbarBackgroundColor;
    this[S.enableUrlBarHiding] = enableUrlBarHiding;
    this[S.instantAppsEnabled] = instantAppsEnabled;
    this[S.packageName] = packageName;
    this[S.keepAliveEnabled] = keepAliveEnabled;
    ;
  }).prototype = chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.prototype;
  dart.addTypeTests(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions);
  dart.addTypeCaches(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions);
  chrome_custom_tabs_options.AndroidChromeCustomTabsOptions[dart.implements] = () => [chrome_safari_browser_options.ChromeSafariBrowserOptions, in_app_webview_options$.AndroidOptions];
  dart.setMethodSignature(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions, () => ({
    __proto__: dart.getMethods(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions, [])
  }));
  dart.setLibraryUri(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions, I[11]);
  dart.setFieldSignature(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions, () => ({
    __proto__: dart.getFields(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.__proto__),
    addDefaultShareMenuItem: dart.fieldType(core.bool),
    showTitle: dart.fieldType(core.bool),
    toolbarBackgroundColor: dart.fieldType(dart.nullable(ui.Color)),
    enableUrlBarHiding: dart.fieldType(core.bool),
    instantAppsEnabled: dart.fieldType(core.bool),
    packageName: dart.fieldType(dart.nullable(core.String)),
    keepAliveEnabled: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions, ['toString']);
  chrome_safari_browser_options.ChromeSafariBrowserOptions = class ChromeSafariBrowserOptions extends core.Object {
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).new();
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[12], 11, 66, "map");
      return new chrome_safari_browser_options.ChromeSafariBrowserOptions.new();
    }
    copy() {
      return chrome_safari_browser_options.ChromeSafariBrowserOptions.fromMap(this.toMap());
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (chrome_safari_browser_options.ChromeSafariBrowserOptions.new = function() {
    ;
  }).prototype = chrome_safari_browser_options.ChromeSafariBrowserOptions.prototype;
  dart.addTypeTests(chrome_safari_browser_options.ChromeSafariBrowserOptions);
  dart.addTypeCaches(chrome_safari_browser_options.ChromeSafariBrowserOptions);
  dart.setMethodSignature(chrome_safari_browser_options.ChromeSafariBrowserOptions, () => ({
    __proto__: dart.getMethods(chrome_safari_browser_options.ChromeSafariBrowserOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(chrome_safari_browser_options.ChromeSafariBrowserOptions, []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(chrome_safari_browser_options.ChromeSafariBrowserOptions, I[13]);
  dart.defineExtensionMethods(chrome_safari_browser_options.ChromeSafariBrowserOptions, ['toString']);
  chrome_safari_browser_options.ChromeSafariBrowserClassOptions = class ChromeSafariBrowserClassOptions extends core.Object {
    get android() {
      return this[S.android$1];
    }
    set android(value) {
      this[S.android$1] = value;
    }
    get ios() {
      return this[S.ios$1];
    }
    set ios(value) {
      this[S.ios$1] = value;
    }
    toMap() {
      let t0, t0$, t0$0, t0$1;
      let options = new (T.IdentityMapOfString$dynamic()).new();
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android)
        options[S.$addAll]((t0$ = (t0 = this.android, t0 == null ? null : t0.toMap()), t0$ == null ? new (T.IdentityMapOfString$dynamic()).new() : t0$));
      else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) options[S.$addAll]((t0$1 = (t0$0 = this.ios, t0$0 == null ? null : t0$0.toMap()), t0$1 == null ? new (T.IdentityMapOfString$dynamic()).new() : t0$1));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (chrome_safari_browser_options.ChromeSafariBrowserClassOptions.new = function(opts) {
    let t0, t0$;
    let android = opts && 'android' in opts ? opts.android : null;
    let ios = opts && 'ios' in opts ? opts.ios : null;
    this[S.android$1] = android;
    this[S.ios$1] = ios;
    this.android = (t0 = this.android, t0 == null ? new chrome_custom_tabs_options.AndroidChromeCustomTabsOptions.new() : t0);
    this.ios = (t0$ = this.ios, t0$ == null ? new safari_options.IOSSafariOptions.new() : t0$);
  }).prototype = chrome_safari_browser_options.ChromeSafariBrowserClassOptions.prototype;
  dart.addTypeTests(chrome_safari_browser_options.ChromeSafariBrowserClassOptions);
  dart.addTypeCaches(chrome_safari_browser_options.ChromeSafariBrowserClassOptions);
  dart.setMethodSignature(chrome_safari_browser_options.ChromeSafariBrowserClassOptions, () => ({
    __proto__: dart.getMethods(chrome_safari_browser_options.ChromeSafariBrowserClassOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(chrome_safari_browser_options.ChromeSafariBrowserClassOptions, I[13]);
  dart.setFieldSignature(chrome_safari_browser_options.ChromeSafariBrowserClassOptions, () => ({
    __proto__: dart.getFields(chrome_safari_browser_options.ChromeSafariBrowserClassOptions.__proto__),
    android: dart.fieldType(dart.nullable(chrome_custom_tabs_options.AndroidChromeCustomTabsOptions)),
    ios: dart.fieldType(dart.nullable(safari_options.IOSSafariOptions))
  }));
  dart.defineExtensionMethods(chrome_safari_browser_options.ChromeSafariBrowserClassOptions, ['toString']);
  chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException = class ChromeSafariBrowserAlreadyOpenedException extends core.Object {
    get message() {
      return this[S.message];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      let message = this.message;
      if (message == null) return "ChromeSafariBrowserAlreadyOpenedException";
      return "ChromeSafariBrowserAlreadyOpenedException: " + dart.str(message);
    }
  };
  (chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException.new = function(message = null) {
    this[S.message] = message;
    ;
  }).prototype = chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException.prototype;
  dart.addTypeTests(chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException);
  dart.addTypeCaches(chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException);
  chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException, I[14]);
  dart.setFieldSignature(chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException, () => ({
    __proto__: dart.getFields(chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException.__proto__),
    message: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException, ['toString']);
  chrome_safari_browser.ChromeSafariBrowserNotOpenedException = class ChromeSafariBrowserNotOpenedException extends core.Object {
    get message() {
      return this[S.message$1];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      let message = this.message;
      if (message == null) return "ChromeSafariBrowserNotOpenedException";
      return "ChromeSafariBrowserNotOpenedException: " + dart.str(message);
    }
  };
  (chrome_safari_browser.ChromeSafariBrowserNotOpenedException.new = function(message = null) {
    this[S.message$1] = message;
    ;
  }).prototype = chrome_safari_browser.ChromeSafariBrowserNotOpenedException.prototype;
  dart.addTypeTests(chrome_safari_browser.ChromeSafariBrowserNotOpenedException);
  dart.addTypeCaches(chrome_safari_browser.ChromeSafariBrowserNotOpenedException);
  chrome_safari_browser.ChromeSafariBrowserNotOpenedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(chrome_safari_browser.ChromeSafariBrowserNotOpenedException, I[14]);
  dart.setFieldSignature(chrome_safari_browser.ChromeSafariBrowserNotOpenedException, () => ({
    __proto__: dart.getFields(chrome_safari_browser.ChromeSafariBrowserNotOpenedException.__proto__),
    message: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(chrome_safari_browser.ChromeSafariBrowserNotOpenedException, ['toString']);
  chrome_safari_browser.ChromeSafariBrowser = class ChromeSafariBrowser extends core.Object {
    get id() {
      let t0;
      return dart.test(this[S.__ChromeSafariBrowser_id_isSet]) ? (t0 = this[S.__ChromeSafariBrowser_id], t0) : dart.throw(new _internal.LateError.fieldNI("id"));
    }
    set id(t0) {
      if (t0 == null) dart.nullFailed(I[15], 41, 21, "null");
      if (dart.test(this[S.__ChromeSafariBrowser_id_isSet]))
        dart.throw(new _internal.LateError.fieldAI("id"));
      else {
        this[S.__ChromeSafariBrowser_id_isSet] = true;
        this[S.__ChromeSafariBrowser_id] = t0;
      }
    }
    get [S._channel]() {
      let t1;
      return dart.test(this[S.__ChromeSafariBrowser__channel_isSet]) ? (t1 = this[S.__ChromeSafariBrowser__channel], t1) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel](t1) {
      if (t1 == null) dart.nullFailed(I[15], 45, 22, "null");
      this[S.__ChromeSafariBrowser__channel_isSet] = true;
      this[S.__ChromeSafariBrowser__channel] = t1;
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[15], 57, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        let t4, t3, t2;
        switch (call.method) {
          case "onChromeSafariBrowserOpened":
          {
            this.onOpened();
            break;
          }
          case "onChromeSafariBrowserCompletedInitialLoad":
          {
            this.onCompletedInitialLoad();
            break;
          }
          case "onChromeSafariBrowserClosed":
          {
            this.onClosed();
            this[S._isOpened] = false;
            break;
          }
          case "onChromeSafariBrowserMenuItemActionPerform":
          {
            let url = core.String.as(dart.dsend(call.arguments, '_get', ["url"]));
            let title = core.String.as(dart.dsend(call.arguments, '_get', ["title"]));
            let id = core.int.as(dart.dsend(dart.dsend(call.arguments, '_get', ["id"]), 'toInt', []));
            if (this[S._menuItems][S.$_get](id) != null) {
              t2 = dart.nullCheck(this[S._menuItems][S.$_get](id));
              t3 = url;
              t4 = title;
              t2.action(t3, t4);
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
      }).bind(this));
    }
    open(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[15], 88, 21, "url");
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* open() {
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[15], 89, 12, "url.toString().isNotEmpty");
        this.throwIsAlreadyOpened({message: "Cannot open " + dart.str(url) + "!"});
        let menuItemList = T.JSArrayOfMapOfString$dynamic().of([]);
        this[S._menuItems][S.$forEach](dart.fn((key, value) => {
          if (key == null) dart.nullFailed(I[15], 93, 25, "key");
          if (value == null) dart.nullFailed(I[15], 93, 30, "value");
          menuItemList[S.$add](new (T.IdentityMapOfString$dynamic()).from(["id", value.id, "label", value.label]));
        }, T.intAndChromeSafariBrowserMenuItemTovoid()));
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("id", dart.fn(() => this.id, T.VoidToString()));
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        args[S.$putIfAbsent]("options", dart.fn(() => {
          let t2, t2$;
          t2$ = (t2 = options, t2 == null ? null : t2.toMap());
          return t2$ == null ? new _js_helper.LinkedMap.new() : t2$;
        }, T.VoidToMap()));
        args[S.$putIfAbsent]("menuItemList", dart.fn(() => menuItemList, T.VoidToListOfMapOfString$dynamic()));
        yield chrome_safari_browser.ChromeSafariBrowser._sharedChannel.invokeMethod(dart.dynamic, "open", args);
        this[S._isOpened] = true;
      }).bind(this));
    }
    close() {
      return async.async(dart.void, (function* close() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel].invokeMethod(dart.dynamic, "close", args);
      }).bind(this));
    }
    addMenuItem(menuItem) {
      if (menuItem == null) dart.nullFailed(I[15], 113, 48, "menuItem");
      this[S._menuItems][S.$_set](menuItem.id, menuItem);
    }
    addMenuItems(menuItems) {
      if (menuItems == null) dart.nullFailed(I[15], 118, 55, "menuItems");
      menuItems[S.$forEach](dart.fn(menuItem => {
        if (menuItem == null) dart.nullFailed(I[15], 119, 24, "menuItem");
        this[S._menuItems][S.$_set](menuItem.id, menuItem);
      }, T.ChromeSafariBrowserMenuItemTovoid()));
    }
    static isAvailable() {
      return async.async(core.bool, function* isAvailable() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield chrome_safari_browser.ChromeSafariBrowser._sharedChannel.invokeMethod(dart.dynamic, "isAvailable", args));
      });
    }
    onOpened() {
    }
    onCompletedInitialLoad() {
    }
    onClosed() {
    }
    isOpened() {
      return this[S._isOpened];
    }
    throwIsAlreadyOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (message == null) dart.nullFailed(I[15], 146, 37, "message");
      if (dart.test(this.isOpened())) {
        dart.throw(new chrome_safari_browser.ChromeSafariBrowserAlreadyOpenedException.new(T.JSArrayOfString().of(["Error: " + (message[S.$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is already opened."])));
      }
    }
    throwIsNotOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (message == null) dart.nullFailed(I[15], 154, 33, "message");
      if (!dart.test(this.isOpened())) {
        dart.throw(new chrome_safari_browser.ChromeSafariBrowserNotOpenedException.new(T.JSArrayOfString().of(["Error: " + (message[S.$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is not opened."])));
      }
    }
  };
  (chrome_safari_browser.ChromeSafariBrowser.new = function() {
    this[S.__ChromeSafariBrowser_id] = null;
    this[S.__ChromeSafariBrowser_id_isSet] = false;
    this[S._menuItems] = new (T.IdentityMapOfint$ChromeSafariBrowserMenuItem()).new();
    this[S._isOpened] = false;
    this[S.__ChromeSafariBrowser__channel] = null;
    this[S.__ChromeSafariBrowser__channel_isSet] = false;
    this.id = util.IdGenerator.generate();
    this[S._channel] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_chromesafaribrowser_" + dart.str(this.id));
    this[S._channel].setMethodCallHandler(dart.bind(this, 'handleMethod'));
    this[S._isOpened] = false;
  }).prototype = chrome_safari_browser.ChromeSafariBrowser.prototype;
  dart.addTypeTests(chrome_safari_browser.ChromeSafariBrowser);
  dart.addTypeCaches(chrome_safari_browser.ChromeSafariBrowser);
  dart.setMethodSignature(chrome_safari_browser.ChromeSafariBrowser, () => ({
    __proto__: dart.getMethods(chrome_safari_browser.ChromeSafariBrowser.__proto__),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall]),
    open: dart.fnType(async.Future$(dart.void), [], {options: dart.nullable(chrome_safari_browser_options.ChromeSafariBrowserClassOptions)}, {url: core.Uri}),
    close: dart.fnType(async.Future$(dart.void), []),
    addMenuItem: dart.fnType(dart.void, [chrome_safari_browser.ChromeSafariBrowserMenuItem]),
    addMenuItems: dart.fnType(dart.void, [core.List$(chrome_safari_browser.ChromeSafariBrowserMenuItem)]),
    onOpened: dart.fnType(dart.void, []),
    onCompletedInitialLoad: dart.fnType(dart.void, []),
    onClosed: dart.fnType(dart.void, []),
    isOpened: dart.fnType(core.bool, []),
    throwIsAlreadyOpened: dart.fnType(dart.void, [], {message: core.String}, {}),
    throwIsNotOpened: dart.fnType(dart.void, [], {message: core.String}, {})
  }));
  dart.setGetterSignature(chrome_safari_browser.ChromeSafariBrowser, () => ({
    __proto__: dart.getGetters(chrome_safari_browser.ChromeSafariBrowser.__proto__),
    id: core.String,
    [S._channel]: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(chrome_safari_browser.ChromeSafariBrowser, () => ({
    __proto__: dart.getSetters(chrome_safari_browser.ChromeSafariBrowser.__proto__),
    id: core.String,
    [S._channel]: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(chrome_safari_browser.ChromeSafariBrowser, I[14]);
  dart.setFieldSignature(chrome_safari_browser.ChromeSafariBrowser, () => ({
    __proto__: dart.getFields(chrome_safari_browser.ChromeSafariBrowser.__proto__),
    [S.__ChromeSafariBrowser_id]: dart.fieldType(dart.nullable(core.String)),
    [S.__ChromeSafariBrowser_id_isSet]: dart.fieldType(core.bool),
    [S._menuItems]: dart.fieldType(core.Map$(core.int, chrome_safari_browser.ChromeSafariBrowserMenuItem)),
    [S._isOpened]: dart.fieldType(core.bool),
    [S.__ChromeSafariBrowser__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__ChromeSafariBrowser__channel_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(chrome_safari_browser.ChromeSafariBrowser, {
    /*chrome_safari_browser.ChromeSafariBrowser._sharedChannel*/get _sharedChannel() {
      return C[9] || CT.C9;
    }
  }, false);
  chrome_safari_browser.ChromeSafariBrowserMenuItem = class ChromeSafariBrowserMenuItem extends core.Object {
    get id() {
      return this[S.id];
    }
    set id(value) {
      this[S.id] = value;
    }
    get label() {
      return this[S.label];
    }
    set label(value) {
      this[S.label] = value;
    }
    get action() {
      return this[S.action];
    }
    set action(value) {
      super.action = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["id", this.id, "label", this.label]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (chrome_safari_browser.ChromeSafariBrowserMenuItem.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    if (id == null) dart.nullFailed(I[15], 175, 22, "id");
    let label = opts && 'label' in opts ? opts.label : null;
    if (label == null) dart.nullFailed(I[15], 175, 40, "label");
    let action = opts && 'action' in opts ? opts.action : null;
    if (action == null) dart.nullFailed(I[15], 175, 61, "action");
    this[S.id] = id;
    this[S.label] = label;
    this[S.action] = action;
    ;
  }).prototype = chrome_safari_browser.ChromeSafariBrowserMenuItem.prototype;
  dart.addTypeTests(chrome_safari_browser.ChromeSafariBrowserMenuItem);
  dart.addTypeCaches(chrome_safari_browser.ChromeSafariBrowserMenuItem);
  dart.setMethodSignature(chrome_safari_browser.ChromeSafariBrowserMenuItem, () => ({
    __proto__: dart.getMethods(chrome_safari_browser.ChromeSafariBrowserMenuItem.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(chrome_safari_browser.ChromeSafariBrowserMenuItem, I[14]);
  dart.setFieldSignature(chrome_safari_browser.ChromeSafariBrowserMenuItem, () => ({
    __proto__: dart.getFields(chrome_safari_browser.ChromeSafariBrowserMenuItem.__proto__),
    id: dart.fieldType(core.int),
    label: dart.fieldType(core.String),
    action: dart.finalFieldType(dart.fnType(dart.void, [core.String, core.String]))
  }));
  dart.defineExtensionMethods(chrome_safari_browser.ChromeSafariBrowserMenuItem, ['toString']);
  cookie_manager.CookieManager = class CookieManager extends core.Object {
    get ios() {
      let t2;
      return dart.test(this[S.__CookieManager_ios_isSet]) ? (t2 = this[S.__CookieManager_ios], t2) : dart.throw(new _internal.LateError.fieldNI("ios"));
    }
    set ios(t2) {
      if (t2 == null) dart.nullFailed(I[16], 27, 25, "null");
      this[S.__CookieManager_ios_isSet] = true;
      this[S.__CookieManager_ios] = t2;
    }
    static instance() {
      return cookie_manager.CookieManager._instance != null ? dart.nullCheck(cookie_manager.CookieManager._instance) : cookie_manager.CookieManager._init();
    }
    static _init() {
      cookie_manager.CookieManager._channel.setMethodCallHandler(C[10] || CT.C10);
      cookie_manager.CookieManager._instance = new cookie_manager.CookieManager.new();
      dart.nullCheck(cookie_manager.CookieManager._instance).ios = cookie_manager.IOSCookieManager.instance();
      return dart.nullCheck(cookie_manager.CookieManager._instance);
    }
    static _handleMethod(call) {
      if (call == null) dart.nullFailed(I[16], 41, 51, "call");
      return async.async(dart.dynamic, function* _handleMethod() {
      });
    }
    setCookie(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 55, 21, "url");
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[16], 56, 23, "name");
      let value = opts && 'value' in opts ? opts.value : null;
      if (value == null) dart.nullFailed(I[16], 57, 23, "value");
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let path = opts && 'path' in opts ? opts.path : "/";
      if (path == null) dart.nullFailed(I[16], 59, 14, "path");
      let expiresDate = opts && 'expiresDate' in opts ? opts.expiresDate : null;
      let maxAge = opts && 'maxAge' in opts ? opts.maxAge : null;
      let isSecure = opts && 'isSecure' in opts ? opts.isSecure : null;
      let isHttpOnly = opts && 'isHttpOnly' in opts ? opts.isHttpOnly : null;
      let sameSite = opts && 'sameSite' in opts ? opts.sameSite : null;
      let iosBelow11WebViewController = opts && 'iosBelow11WebViewController' in opts ? opts.iosBelow11WebViewController : null;
      return async.async(dart.void, (function* setCookie() {
        if (domain == null) domain = this[S._getDomainName](url);
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[16], 68, 12, "url.toString().isNotEmpty");
        if (!name[S.$isNotEmpty]) dart.assertFailed(null, I[16], 69, 12, "name.isNotEmpty");
        if (!value[S.$isNotEmpty]) dart.assertFailed(null, I[16], 70, 12, "value.isNotEmpty");
        if (!domain[S.$isNotEmpty]) dart.assertFailed(null, I[16], 71, 12, "domain.isNotEmpty");
        if (!path[S.$isNotEmpty]) dart.assertFailed(null, I[16], 72, 12, "path.isNotEmpty");
        if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
          let platformUtil = new platform_util.PlatformUtil.new();
          let version = core.double.tryParse(yield platformUtil.getSystemVersion());
          if (version != null && dart.notNull(version) < 11.0) {
            yield this[S._setCookieWithJavaScript]({url: url, name: name, value: value, domain: domain, path: path, expiresDate: expiresDate, maxAge: maxAge, isSecure: isSecure, sameSite: sameSite, webViewController: iosBelow11WebViewController});
            return;
          }
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        args[S.$putIfAbsent]("name", dart.fn(() => name, T.VoidToString()));
        args[S.$putIfAbsent]("value", dart.fn(() => value, T.VoidToString()));
        args[S.$putIfAbsent]("domain", dart.fn(() => domain, T.VoidToStringN()));
        args[S.$putIfAbsent]("path", dart.fn(() => path, T.VoidToString()));
        args[S.$putIfAbsent]("expiresDate", dart.fn(() => {
          let t3;
          t3 = expiresDate;
          return t3 == null ? null : dart.toString(t3);
        }, T.VoidToStringN()));
        args[S.$putIfAbsent]("maxAge", dart.fn(() => maxAge, T.VoidTointN()));
        args[S.$putIfAbsent]("isSecure", dart.fn(() => isSecure, T.VoidToboolN()));
        args[S.$putIfAbsent]("isHttpOnly", dart.fn(() => isHttpOnly, T.VoidToboolN()));
        args[S.$putIfAbsent]("sameSite", dart.fn(() => {
          let t3;
          t3 = sameSite;
          return t3 == null ? null : t3.toValue();
        }, T.VoidToStringN()));
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "setCookie", args);
      }).bind(this));
    }
    [S._setCookieWithJavaScript](opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 109, 21, "url");
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[16], 110, 23, "name");
      let value = opts && 'value' in opts ? opts.value : null;
      if (value == null) dart.nullFailed(I[16], 111, 23, "value");
      let domain = opts && 'domain' in opts ? opts.domain : null;
      if (domain == null) dart.nullFailed(I[16], 112, 23, "domain");
      let path = opts && 'path' in opts ? opts.path : "/";
      if (path == null) dart.nullFailed(I[16], 113, 14, "path");
      let expiresDate = opts && 'expiresDate' in opts ? opts.expiresDate : null;
      let maxAge = opts && 'maxAge' in opts ? opts.maxAge : null;
      let isSecure = opts && 'isSecure' in opts ? opts.isSecure : null;
      let sameSite = opts && 'sameSite' in opts ? opts.sameSite : null;
      let webViewController = opts && 'webViewController' in opts ? opts.webViewController : null;
      return async.async(dart.void, (function* _setCookieWithJavaScript() {
        let cookieValue = dart.notNull(name) + "=" + dart.notNull(value) + "; Domain=" + dart.notNull(domain) + "; Path=" + dart.notNull(path);
        if (expiresDate != null) cookieValue = cookieValue + ("; Expires=" + dart.notNull(yield this[S._getCookieExpirationDate](expiresDate)));
        if (maxAge != null) cookieValue = cookieValue + ("; Max-Age=" + dart.toString(maxAge));
        if (isSecure != null && dart.test(isSecure)) cookieValue = cookieValue + "; Secure";
        if (sameSite != null) cookieValue = cookieValue + ("; SameSite=" + dart.notNull(sameSite.toValue()));
        cookieValue = cookieValue + ";";
        if (webViewController != null) {
          let options = (yield webViewController.getOptions());
          if (options != null && dart.test(options.crossPlatform.javaScriptEnabled)) {
            yield webViewController.evaluateJavascript({source: "document.cookie=\"" + cookieValue + "\""});
            return;
          }
        }
        let setCookieCompleter = T.CompleterOfvoid().new();
        let headlessWebView = new headless_in_app_webview.HeadlessInAppWebView.new({initialUrlRequest: new types.URLRequest.new({url: url}), onLoadStop: dart.fn((controller, url) => {
            if (controller == null) dart.nullFailed(I[16], 145, 20, "controller");
            return async.async(dart.void, function*() {
              yield controller.evaluateJavascript({source: "document.cookie=\"" + cookieValue + "\""});
              setCookieCompleter.complete();
            });
          }, T.InAppWebViewControllerAndUriNToFutureOfvoid())});
        yield headlessWebView.run();
        yield setCookieCompleter.future;
        yield headlessWebView.dispose();
      }).bind(this));
    }
    getCookies(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 166, 21, "url");
      let iosBelow11WebViewController = opts && 'iosBelow11WebViewController' in opts ? opts.iosBelow11WebViewController : null;
      return async.async(T.ListOfCookie(), (function* getCookies() {
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[16], 168, 12, "url.toString().isNotEmpty");
        if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
          let platformUtil = new platform_util.PlatformUtil.new();
          let version = core.double.tryParse(yield platformUtil.getSystemVersion());
          if (version != null && dart.notNull(version) < 11.0) {
            return yield this[S._getCookiesWithJavaScript]({url: url, webViewController: iosBelow11WebViewController});
          }
        }
        let cookies = T.JSArrayOfCookie().of([]);
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        let cookieListMap = core.List.as(yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "getCookies", args));
        cookieListMap = cookieListMap[S.$cast](core.Map);
        cookieListMap[S.$forEach](dart.fn(cookieMap => {
          cookies[S.$add](new types.Cookie.new({name: core.String.as(dart.dsend(cookieMap, '_get', ["name"])), value: dart.dsend(cookieMap, '_get', ["value"]), expiresDate: T.intN().as(dart.dsend(cookieMap, '_get', ["expiresDate"])), isSessionOnly: T.boolN().as(dart.dsend(cookieMap, '_get', ["isSessionOnly"])), domain: T.StringN().as(dart.dsend(cookieMap, '_get', ["domain"])), sameSite: types.HTTPCookieSameSitePolicy.fromValue(T.StringN().as(dart.dsend(cookieMap, '_get', ["sameSite"]))), isSecure: T.boolN().as(dart.dsend(cookieMap, '_get', ["isSecure"])), isHttpOnly: T.boolN().as(dart.dsend(cookieMap, '_get', ["isHttpOnly"])), path: T.StringN().as(dart.dsend(cookieMap, '_get', ["path"]))}));
        }, T.dynamicTovoid()));
        return cookies;
      }).bind(this));
    }
    [S._getCookiesWithJavaScript](opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 203, 21, "url");
      let webViewController = opts && 'webViewController' in opts ? opts.webViewController : null;
      return async.async(T.ListOfCookie(), function* _getCookiesWithJavaScript() {
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[16], 204, 12, "url.toString().isNotEmpty");
        let cookies = T.JSArrayOfCookie().of([]);
        if (webViewController != null) {
          let options = (yield webViewController.getOptions());
          if (options != null && dart.test(options.crossPlatform.javaScriptEnabled)) {
            let documentCookies = core.String.as(yield webViewController.evaluateJavascript({source: "document.cookie"}))[S.$split](";")[S.$map](core.String, dart.fn(documentCookie => {
              if (documentCookie == null) dart.nullFailed(I[16], 214, 19, "documentCookie");
              return documentCookie[S.$trim]();
            }, T.StringToString()))[S.$toList]();
            documentCookies[S.$forEach](dart.fn(documentCookie => {
              if (documentCookie == null) dart.nullFailed(I[16], 216, 34, "documentCookie");
              let cookie = documentCookie[S.$split]("=");
              cookies[S.$add](new types.Cookie.new({name: cookie[S.$_get](0), value: cookie[S.$_get](1)}));
            }, T.StringTovoid()));
            return cookies;
          }
        }
        let pageLoaded = T.CompleterOfvoid().new();
        let headlessWebView = new headless_in_app_webview.HeadlessInAppWebView.new({initialUrlRequest: new types.URLRequest.new({url: url}), onLoadStop: dart.fn((controller, url) => {
            if (controller == null) dart.nullFailed(I[16], 230, 20, "controller");
            return async.async(dart.void, function*() {
              pageLoaded.complete();
            });
          }, T.InAppWebViewControllerAndUriNToFutureOfvoid())});
        yield headlessWebView.run();
        yield pageLoaded.future;
        let documentCookies = core.String.as(yield headlessWebView.webViewController.evaluateJavascript({source: "document.cookie"}))[S.$split](";")[S.$map](core.String, dart.fn(documentCookie => {
          if (documentCookie == null) dart.nullFailed(I[16], 240, 15, "documentCookie");
          return documentCookie[S.$trim]();
        }, T.StringToString()))[S.$toList]();
        documentCookies[S.$forEach](dart.fn(documentCookie => {
          if (documentCookie == null) dart.nullFailed(I[16], 242, 30, "documentCookie");
          let cookie = documentCookie[S.$split]("=");
          cookies[S.$add](new types.Cookie.new({name: cookie[S.$_get](0), value: cookie[S.$_get](1)}));
        }, T.StringTovoid()));
        yield headlessWebView.dispose();
        return cookies;
      });
    }
    getCookie(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 263, 21, "url");
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[16], 264, 23, "name");
      let iosBelow11WebViewController = opts && 'iosBelow11WebViewController' in opts ? opts.iosBelow11WebViewController : null;
      return async.async(T.CookieN(), (function* getCookie() {
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[16], 266, 12, "url.toString().isNotEmpty");
        if (!name[S.$isNotEmpty]) dart.assertFailed(null, I[16], 267, 12, "name.isNotEmpty");
        if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
          let platformUtil = new platform_util.PlatformUtil.new();
          let version = core.double.tryParse(yield platformUtil.getSystemVersion());
          if (version != null && dart.notNull(version) < 11.0) {
            let cookies = (yield this[S._getCookiesWithJavaScript]({url: url, webViewController: iosBelow11WebViewController}));
            return cookies[S.$cast](T.CookieN())[S.$firstWhere](dart.fn(cookie => dart.nullCheck(cookie).name == name, T.CookieNTobool()), {orElse: dart.fn(() => null, T.VoidToNull())});
          }
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        let cookies = core.List.as(yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "getCookies", args));
        cookies = cookies[S.$cast](core.Map);
        for (let i = 0; i < dart.notNull(cookies[S.$length]); i = i + 1) {
          cookies[S.$_set](i, dart.dgsend(cookies[S.$_get](i), [core.String, dart.dynamic], 'cast', []));
          if (dart.equals(dart.dsend(cookies[S.$_get](i), '_get', ["name"]), name)) return new types.Cookie.new({name: core.String.as(dart.dsend(cookies[S.$_get](i), '_get', ["name"])), value: dart.dsend(cookies[S.$_get](i), '_get', ["value"]), expiresDate: T.intN().as(dart.dsend(cookies[S.$_get](i), '_get', ["expiresDate"])), isSessionOnly: T.boolN().as(dart.dsend(cookies[S.$_get](i), '_get', ["isSessionOnly"])), domain: T.StringN().as(dart.dsend(cookies[S.$_get](i), '_get', ["domain"])), sameSite: types.HTTPCookieSameSitePolicy.fromValue(T.StringN().as(dart.dsend(cookies[S.$_get](i), '_get', ["sameSite"]))), isSecure: T.boolN().as(dart.dsend(cookies[S.$_get](i), '_get', ["isSecure"])), isHttpOnly: T.boolN().as(dart.dsend(cookies[S.$_get](i), '_get', ["isHttpOnly"])), path: T.StringN().as(dart.dsend(cookies[S.$_get](i), '_get', ["path"]))});
        }
        return null;
      }).bind(this));
    }
    deleteCookie(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 315, 21, "url");
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[16], 316, 23, "name");
      let domain = opts && 'domain' in opts ? opts.domain : "";
      if (domain == null) dart.nullFailed(I[16], 317, 14, "domain");
      let path = opts && 'path' in opts ? opts.path : "/";
      if (path == null) dart.nullFailed(I[16], 318, 14, "path");
      let iosBelow11WebViewController = opts && 'iosBelow11WebViewController' in opts ? opts.iosBelow11WebViewController : null;
      return async.async(dart.void, (function* deleteCookie() {
        if (domain[S.$isEmpty]) domain = this[S._getDomainName](url);
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[16], 322, 12, "url.toString().isNotEmpty");
        if (!name[S.$isNotEmpty]) dart.assertFailed(null, I[16], 323, 12, "name.isNotEmpty");
        if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
          let platformUtil = new platform_util.PlatformUtil.new();
          let version = core.double.tryParse(yield platformUtil.getSystemVersion());
          if (version != null && dart.notNull(version) < 11.0) {
            yield this[S._setCookieWithJavaScript]({url: url, name: name, value: "", path: path, domain: domain, maxAge: -1, webViewController: iosBelow11WebViewController});
            return;
          }
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        args[S.$putIfAbsent]("name", dart.fn(() => name, T.VoidToString()));
        args[S.$putIfAbsent]("domain", dart.fn(() => domain, T.VoidToString()));
        args[S.$putIfAbsent]("path", dart.fn(() => path, T.VoidToString()));
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "deleteCookie", args);
      }).bind(this));
    }
    deleteCookies(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[16], 361, 21, "url");
      let domain = opts && 'domain' in opts ? opts.domain : "";
      if (domain == null) dart.nullFailed(I[16], 362, 14, "domain");
      let path = opts && 'path' in opts ? opts.path : "/";
      if (path == null) dart.nullFailed(I[16], 363, 14, "path");
      let iosBelow11WebViewController = opts && 'iosBelow11WebViewController' in opts ? opts.iosBelow11WebViewController : null;
      return async.async(dart.void, (function* deleteCookies() {
        if (domain[S.$isEmpty]) domain = this[S._getDomainName](url);
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[16], 367, 12, "url.toString().isNotEmpty");
        if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
          let platformUtil = new platform_util.PlatformUtil.new();
          let version = core.double.tryParse(yield platformUtil.getSystemVersion());
          if (version != null && dart.notNull(version) < 11.0) {
            let cookies = (yield this[S._getCookiesWithJavaScript]({url: url, webViewController: iosBelow11WebViewController}));
            for (let i = 0; i < dart.notNull(cookies[S.$length]); i = i + 1) {
              yield this[S._setCookieWithJavaScript]({url: url, name: cookies[S.$_get](i).name, value: "", path: path, domain: domain, maxAge: -1, webViewController: iosBelow11WebViewController});
            }
            return;
          }
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        args[S.$putIfAbsent]("domain", dart.fn(() => domain, T.VoidToString()));
        args[S.$putIfAbsent]("path", dart.fn(() => path, T.VoidToString()));
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "deleteCookies", args);
      }).bind(this));
    }
    deleteAllCookies() {
      return async.async(dart.void, function* deleteAllCookies() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "deleteAllCookies", args);
      });
    }
    [S._getDomainName](url) {
      if (url == null) dart.nullFailed(I[16], 404, 29, "url");
      let domain = url.host;
      return domain[S.$startsWith]("www.") ? domain[S.$substring](4) : domain;
    }
    [S._getCookieExpirationDate](expiresDate) {
      if (expiresDate == null) dart.nullFailed(I[16], 409, 47, "expiresDate");
      return async.async(core.String, function* _getCookieExpirationDate() {
        let platformUtil = new platform_util.PlatformUtil.new();
        let dateTime = new core.DateTime.fromMillisecondsSinceEpoch(expiresDate).toUtc();
        return yield platformUtil.formatDate({date: dateTime, format: "EEE, dd MMM yyyy hh:mm:ss z", locale: "en_US", timezone: "GMT"});
      });
    }
  };
  (cookie_manager.CookieManager.new = function() {
    this[S.__CookieManager_ios] = null;
    this[S.__CookieManager_ios_isSet] = false;
    ;
  }).prototype = cookie_manager.CookieManager.prototype;
  dart.addTypeTests(cookie_manager.CookieManager);
  dart.addTypeCaches(cookie_manager.CookieManager);
  dart.setMethodSignature(cookie_manager.CookieManager, () => ({
    __proto__: dart.getMethods(cookie_manager.CookieManager.__proto__),
    setCookie: dart.fnType(async.Future$(dart.void), [], {domain: dart.nullable(core.String), expiresDate: dart.nullable(core.int), iosBelow11WebViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController), isHttpOnly: dart.nullable(core.bool), isSecure: dart.nullable(core.bool), maxAge: dart.nullable(core.int), path: core.String, sameSite: dart.nullable(types.HTTPCookieSameSitePolicy)}, {name: core.String, url: core.Uri, value: core.String}),
    [S._setCookieWithJavaScript]: dart.fnType(async.Future$(dart.void), [], {expiresDate: dart.nullable(core.int), isSecure: dart.nullable(core.bool), maxAge: dart.nullable(core.int), path: core.String, sameSite: dart.nullable(types.HTTPCookieSameSitePolicy), webViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController)}, {domain: core.String, name: core.String, url: core.Uri, value: core.String}),
    getCookies: dart.fnType(async.Future$(core.List$(types.Cookie)), [], {iosBelow11WebViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController)}, {url: core.Uri}),
    [S._getCookiesWithJavaScript]: dart.fnType(async.Future$(core.List$(types.Cookie)), [], {webViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController)}, {url: core.Uri}),
    getCookie: dart.fnType(async.Future$(dart.nullable(types.Cookie)), [], {iosBelow11WebViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController)}, {name: core.String, url: core.Uri}),
    deleteCookie: dart.fnType(async.Future$(dart.void), [], {domain: core.String, iosBelow11WebViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController), path: core.String}, {name: core.String, url: core.Uri}),
    deleteCookies: dart.fnType(async.Future$(dart.void), [], {domain: core.String, iosBelow11WebViewController: dart.nullable(in_app_webview_controller$0.InAppWebViewController), path: core.String}, {url: core.Uri}),
    deleteAllCookies: dart.fnType(async.Future$(dart.void), []),
    [S._getDomainName]: dart.fnType(core.String, [core.Uri]),
    [S._getCookieExpirationDate]: dart.fnType(async.Future$(core.String), [core.int])
  }));
  dart.setGetterSignature(cookie_manager.CookieManager, () => ({
    __proto__: dart.getGetters(cookie_manager.CookieManager.__proto__),
    ios: cookie_manager.IOSCookieManager
  }));
  dart.setSetterSignature(cookie_manager.CookieManager, () => ({
    __proto__: dart.getSetters(cookie_manager.CookieManager.__proto__),
    ios: cookie_manager.IOSCookieManager
  }));
  dart.setLibraryUri(cookie_manager.CookieManager, I[17]);
  dart.setFieldSignature(cookie_manager.CookieManager, () => ({
    __proto__: dart.getFields(cookie_manager.CookieManager.__proto__),
    [S.__CookieManager_ios]: dart.fieldType(dart.nullable(cookie_manager.IOSCookieManager)),
    [S.__CookieManager_ios_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(cookie_manager.CookieManager, {
    /*cookie_manager.CookieManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*cookie_manager.CookieManager._channel*/get _channel() {
      return C[11] || CT.C11;
    }
  }, false);
  cookie_manager.IOSCookieManager = class IOSCookieManager extends core.Object {
    static instance() {
      return cookie_manager.IOSCookieManager._instance != null ? dart.nullCheck(cookie_manager.IOSCookieManager._instance) : cookie_manager.IOSCookieManager._init();
    }
    static _init() {
      cookie_manager.IOSCookieManager._instance = new cookie_manager.IOSCookieManager.new();
      return dart.nullCheck(cookie_manager.IOSCookieManager._instance);
    }
    getAllCookies() {
      return async.async(T.ListOfCookie(), function* getAllCookies() {
        let cookies = T.JSArrayOfCookie().of([]);
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let cookieListMap = core.List.as(yield cookie_manager.CookieManager._channel.invokeMethod(dart.dynamic, "getAllCookies", args));
        cookieListMap = cookieListMap[S.$cast](core.Map);
        cookieListMap[S.$forEach](dart.fn(cookieMap => {
          cookies[S.$add](new types.Cookie.new({name: core.String.as(dart.dsend(cookieMap, '_get', ["name"])), value: dart.dsend(cookieMap, '_get', ["value"]), expiresDate: T.intN().as(dart.dsend(cookieMap, '_get', ["expiresDate"])), isSessionOnly: T.boolN().as(dart.dsend(cookieMap, '_get', ["isSessionOnly"])), domain: T.StringN().as(dart.dsend(cookieMap, '_get', ["domain"])), sameSite: types.HTTPCookieSameSitePolicy.fromValue(T.StringN().as(dart.dsend(cookieMap, '_get', ["sameSite"]))), isSecure: T.boolN().as(dart.dsend(cookieMap, '_get', ["isSecure"])), isHttpOnly: T.boolN().as(dart.dsend(cookieMap, '_get', ["isHttpOnly"])), path: T.StringN().as(dart.dsend(cookieMap, '_get', ["path"]))}));
        }, T.dynamicTovoid()));
        return cookies;
      });
    }
  };
  (cookie_manager.IOSCookieManager.new = function() {
    ;
  }).prototype = cookie_manager.IOSCookieManager.prototype;
  dart.addTypeTests(cookie_manager.IOSCookieManager);
  dart.addTypeCaches(cookie_manager.IOSCookieManager);
  dart.setMethodSignature(cookie_manager.IOSCookieManager, () => ({
    __proto__: dart.getMethods(cookie_manager.IOSCookieManager.__proto__),
    getAllCookies: dart.fnType(async.Future$(core.List$(types.Cookie)), [])
  }));
  dart.setLibraryUri(cookie_manager.IOSCookieManager, I[17]);
  dart.defineLazy(cookie_manager.IOSCookieManager, {
    /*cookie_manager.IOSCookieManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, false);
  http_auth_credentials_database.HttpAuthCredentialDatabase = class HttpAuthCredentialDatabase extends core.Object {
    static instance() {
      return http_auth_credentials_database.HttpAuthCredentialDatabase._instance != null ? dart.nullCheck(http_auth_credentials_database.HttpAuthCredentialDatabase._instance) : http_auth_credentials_database.HttpAuthCredentialDatabase._init();
    }
    static _init() {
      http_auth_credentials_database.HttpAuthCredentialDatabase._channel.setMethodCallHandler(C[12] || CT.C12);
      http_auth_credentials_database.HttpAuthCredentialDatabase._instance = new http_auth_credentials_database.HttpAuthCredentialDatabase.new();
      return dart.nullCheck(http_auth_credentials_database.HttpAuthCredentialDatabase._instance);
    }
    static _handleMethod(call) {
      if (call == null) dart.nullFailed(I[18], 27, 51, "call");
      return async.async(dart.dynamic, function* _handleMethod() {
      });
    }
    getAllAuthCredentials() {
      return async.async(T.ListOfURLProtectionSpaceHttpAuthCredentials(), function* getAllAuthCredentials() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let allCredentials = core.List.as(yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "getAllAuthCredentials", args));
        let result = T.JSArrayOfURLProtectionSpaceHttpAuthCredentials().of([]);
        for (let t3 of allCredentials) {
          let map = core.Map.as(t3);
          let element = types.URLProtectionSpaceHttpAuthCredentials.fromMap(map[S.$cast](core.String, dart.dynamic));
          if (element != null) {
            result[S.$add](element);
          }
        }
        return result;
      });
    }
    getHttpAuthCredentials(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      if (protectionSpace == null) dart.nullFailed(I[18], 52, 36, "protectionSpace");
      return async.async(T.ListOfURLCredential(), function* getHttpAuthCredentials() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToString()));
        args[S.$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringN()));
        args[S.$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringN()));
        args[S.$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointN()));
        let credentialList = core.List.as(yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "getHttpAuthCredentials", args));
        let credentials = T.JSArrayOfURLCredential().of([]);
        for (let t4 of credentialList) {
          let map = core.Map.as(t4);
          let credential = types.URLCredential.fromMap(map[S.$cast](core.String, dart.dynamic));
          if (credential != null) {
            credentials[S.$add](credential);
          }
        }
        return credentials;
      });
    }
    setHttpAuthCredential(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      if (protectionSpace == null) dart.nullFailed(I[18], 72, 36, "protectionSpace");
      let credential = opts && 'credential' in opts ? opts.credential : null;
      if (credential == null) dart.nullFailed(I[18], 73, 30, "credential");
      return async.async(dart.void, function* setHttpAuthCredential() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToString()));
        args[S.$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringN()));
        args[S.$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringN()));
        args[S.$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointN()));
        args[S.$putIfAbsent]("username", dart.fn(() => credential.username, T.VoidToStringN()));
        args[S.$putIfAbsent]("password", dart.fn(() => credential.password, T.VoidToStringN()));
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "setHttpAuthCredential", args);
      });
    }
    removeHttpAuthCredential(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      if (protectionSpace == null) dart.nullFailed(I[18], 86, 36, "protectionSpace");
      let credential = opts && 'credential' in opts ? opts.credential : null;
      if (credential == null) dart.nullFailed(I[18], 87, 30, "credential");
      return async.async(dart.void, function* removeHttpAuthCredential() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToString()));
        args[S.$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringN()));
        args[S.$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringN()));
        args[S.$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointN()));
        args[S.$putIfAbsent]("username", dart.fn(() => credential.username, T.VoidToStringN()));
        args[S.$putIfAbsent]("password", dart.fn(() => credential.password, T.VoidToStringN()));
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "removeHttpAuthCredential", args);
      });
    }
    removeHttpAuthCredentials(opts) {
      let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
      if (protectionSpace == null) dart.nullFailed(I[18], 100, 36, "protectionSpace");
      return async.async(dart.void, function* removeHttpAuthCredentials() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("host", dart.fn(() => protectionSpace.host, T.VoidToString()));
        args[S.$putIfAbsent]("protocol", dart.fn(() => protectionSpace.protocol, T.VoidToStringN()));
        args[S.$putIfAbsent]("realm", dart.fn(() => protectionSpace.realm, T.VoidToStringN()));
        args[S.$putIfAbsent]("port", dart.fn(() => protectionSpace.port, T.VoidTointN()));
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "removeHttpAuthCredentials", args);
      });
    }
    clearAllAuthCredentials() {
      return async.async(dart.void, function* clearAllAuthCredentials() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield http_auth_credentials_database.HttpAuthCredentialDatabase._channel.invokeMethod(dart.dynamic, "clearAllAuthCredentials", args);
      });
    }
  };
  (http_auth_credentials_database.HttpAuthCredentialDatabase.new = function() {
    ;
  }).prototype = http_auth_credentials_database.HttpAuthCredentialDatabase.prototype;
  dart.addTypeTests(http_auth_credentials_database.HttpAuthCredentialDatabase);
  dart.addTypeCaches(http_auth_credentials_database.HttpAuthCredentialDatabase);
  dart.setMethodSignature(http_auth_credentials_database.HttpAuthCredentialDatabase, () => ({
    __proto__: dart.getMethods(http_auth_credentials_database.HttpAuthCredentialDatabase.__proto__),
    getAllAuthCredentials: dart.fnType(async.Future$(core.List$(types.URLProtectionSpaceHttpAuthCredentials)), []),
    getHttpAuthCredentials: dart.fnType(async.Future$(core.List$(types.URLCredential)), [], {}, {protectionSpace: types.URLProtectionSpace}),
    setHttpAuthCredential: dart.fnType(async.Future$(dart.void), [], {}, {credential: types.URLCredential, protectionSpace: types.URLProtectionSpace}),
    removeHttpAuthCredential: dart.fnType(async.Future$(dart.void), [], {}, {credential: types.URLCredential, protectionSpace: types.URLProtectionSpace}),
    removeHttpAuthCredentials: dart.fnType(async.Future$(dart.void), [], {}, {protectionSpace: types.URLProtectionSpace}),
    clearAllAuthCredentials: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(http_auth_credentials_database.HttpAuthCredentialDatabase, I[19]);
  dart.defineLazy(http_auth_credentials_database.HttpAuthCredentialDatabase, {
    /*http_auth_credentials_database.HttpAuthCredentialDatabase._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*http_auth_credentials_database.HttpAuthCredentialDatabase._channel*/get _channel() {
      return C[13] || CT.C13;
    }
  }, false);
  in_app_webview.InAppWebView = class InAppWebView extends framework.StatefulWidget {
    get gestureRecognizers() {
      return this[S.gestureRecognizers];
    }
    set gestureRecognizers(value) {
      super.gestureRecognizers = value;
    }
    get windowId() {
      return this[S.windowId];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get androidOnGeolocationPermissionsHidePrompt() {
      return this[S.androidOnGeolocationPermissionsHidePrompt];
    }
    set androidOnGeolocationPermissionsHidePrompt(value) {
      super.androidOnGeolocationPermissionsHidePrompt = value;
    }
    get androidOnGeolocationPermissionsShowPrompt() {
      return this[S.androidOnGeolocationPermissionsShowPrompt];
    }
    set androidOnGeolocationPermissionsShowPrompt(value) {
      super.androidOnGeolocationPermissionsShowPrompt = value;
    }
    get androidOnPermissionRequest() {
      return this[S.androidOnPermissionRequest];
    }
    set androidOnPermissionRequest(value) {
      super.androidOnPermissionRequest = value;
    }
    get androidOnSafeBrowsingHit() {
      return this[S.androidOnSafeBrowsingHit];
    }
    set androidOnSafeBrowsingHit(value) {
      super.androidOnSafeBrowsingHit = value;
    }
    get initialData() {
      return this[S.initialData];
    }
    set initialData(value) {
      super.initialData = value;
    }
    get initialFile() {
      return this[S.initialFile];
    }
    set initialFile(value) {
      super.initialFile = value;
    }
    get initialOptions() {
      return this[S.initialOptions];
    }
    set initialOptions(value) {
      super.initialOptions = value;
    }
    get initialUrlRequest() {
      return this[S.initialUrlRequest];
    }
    set initialUrlRequest(value) {
      super.initialUrlRequest = value;
    }
    get initialUserScripts() {
      return this[S.initialUserScripts];
    }
    set initialUserScripts(value) {
      super.initialUserScripts = value;
    }
    get pullToRefreshController() {
      return this[S.pullToRefreshController];
    }
    set pullToRefreshController(value) {
      super.pullToRefreshController = value;
    }
    get contextMenu() {
      return this[S.contextMenu];
    }
    set contextMenu(value) {
      super.contextMenu = value;
    }
    get onPageCommitVisible() {
      return this[S.onPageCommitVisible];
    }
    set onPageCommitVisible(value) {
      super.onPageCommitVisible = value;
    }
    get onTitleChanged() {
      return this[S.onTitleChanged];
    }
    set onTitleChanged(value) {
      super.onTitleChanged = value;
    }
    get iosOnDidReceiveServerRedirectForProvisionalNavigation() {
      return this[S.iosOnDidReceiveServerRedirectForProvisionalNavigation];
    }
    set iosOnDidReceiveServerRedirectForProvisionalNavigation(value) {
      super.iosOnDidReceiveServerRedirectForProvisionalNavigation = value;
    }
    get iosOnWebContentProcessDidTerminate() {
      return this[S.iosOnWebContentProcessDidTerminate];
    }
    set iosOnWebContentProcessDidTerminate(value) {
      super.iosOnWebContentProcessDidTerminate = value;
    }
    get iosOnNavigationResponse() {
      return this[S.iosOnNavigationResponse];
    }
    set iosOnNavigationResponse(value) {
      super.iosOnNavigationResponse = value;
    }
    get iosShouldAllowDeprecatedTLS() {
      return this[S.iosShouldAllowDeprecatedTLS];
    }
    set iosShouldAllowDeprecatedTLS(value) {
      super.iosShouldAllowDeprecatedTLS = value;
    }
    get onAjaxProgress() {
      return this[S.onAjaxProgress];
    }
    set onAjaxProgress(value) {
      super.onAjaxProgress = value;
    }
    get onAjaxReadyStateChange() {
      return this[S.onAjaxReadyStateChange];
    }
    set onAjaxReadyStateChange(value) {
      super.onAjaxReadyStateChange = value;
    }
    get onConsoleMessage() {
      return this[S.onConsoleMessage];
    }
    set onConsoleMessage(value) {
      super.onConsoleMessage = value;
    }
    get onCreateWindow() {
      return this[S.onCreateWindow];
    }
    set onCreateWindow(value) {
      super.onCreateWindow = value;
    }
    get onCloseWindow() {
      return this[S.onCloseWindow];
    }
    set onCloseWindow(value) {
      super.onCloseWindow = value;
    }
    get onWindowFocus() {
      return this[S.onWindowFocus];
    }
    set onWindowFocus(value) {
      super.onWindowFocus = value;
    }
    get onWindowBlur() {
      return this[S.onWindowBlur];
    }
    set onWindowBlur(value) {
      super.onWindowBlur = value;
    }
    get androidOnReceivedIcon() {
      return this[S.androidOnReceivedIcon];
    }
    set androidOnReceivedIcon(value) {
      super.androidOnReceivedIcon = value;
    }
    get androidOnReceivedTouchIconUrl() {
      return this[S.androidOnReceivedTouchIconUrl];
    }
    set androidOnReceivedTouchIconUrl(value) {
      super.androidOnReceivedTouchIconUrl = value;
    }
    get onDownloadStart() {
      return this[S.onDownloadStart];
    }
    set onDownloadStart(value) {
      super.onDownloadStart = value;
    }
    get onFindResultReceived() {
      return this[S.onFindResultReceived];
    }
    set onFindResultReceived(value) {
      super.onFindResultReceived = value;
    }
    get onJsAlert() {
      return this[S.onJsAlert];
    }
    set onJsAlert(value) {
      super.onJsAlert = value;
    }
    get onJsConfirm() {
      return this[S.onJsConfirm];
    }
    set onJsConfirm(value) {
      super.onJsConfirm = value;
    }
    get onJsPrompt() {
      return this[S.onJsPrompt];
    }
    set onJsPrompt(value) {
      super.onJsPrompt = value;
    }
    get onLoadError() {
      return this[S.onLoadError];
    }
    set onLoadError(value) {
      super.onLoadError = value;
    }
    get onLoadHttpError() {
      return this[S.onLoadHttpError];
    }
    set onLoadHttpError(value) {
      super.onLoadHttpError = value;
    }
    get onLoadResource() {
      return this[S.onLoadResource];
    }
    set onLoadResource(value) {
      super.onLoadResource = value;
    }
    get onLoadResourceCustomScheme() {
      return this[S.onLoadResourceCustomScheme];
    }
    set onLoadResourceCustomScheme(value) {
      super.onLoadResourceCustomScheme = value;
    }
    get onLoadStart() {
      return this[S.onLoadStart];
    }
    set onLoadStart(value) {
      super.onLoadStart = value;
    }
    get onLoadStop() {
      return this[S.onLoadStop];
    }
    set onLoadStop(value) {
      super.onLoadStop = value;
    }
    get onLongPressHitTestResult() {
      return this[S.onLongPressHitTestResult];
    }
    set onLongPressHitTestResult(value) {
      super.onLongPressHitTestResult = value;
    }
    get onPrint() {
      return this[S.onPrint];
    }
    set onPrint(value) {
      super.onPrint = value;
    }
    get onProgressChanged() {
      return this[S.onProgressChanged];
    }
    set onProgressChanged(value) {
      super.onProgressChanged = value;
    }
    get onReceivedClientCertRequest() {
      return this[S.onReceivedClientCertRequest];
    }
    set onReceivedClientCertRequest(value) {
      super.onReceivedClientCertRequest = value;
    }
    get onReceivedHttpAuthRequest() {
      return this[S.onReceivedHttpAuthRequest];
    }
    set onReceivedHttpAuthRequest(value) {
      super.onReceivedHttpAuthRequest = value;
    }
    get onReceivedServerTrustAuthRequest() {
      return this[S.onReceivedServerTrustAuthRequest];
    }
    set onReceivedServerTrustAuthRequest(value) {
      super.onReceivedServerTrustAuthRequest = value;
    }
    get onScrollChanged() {
      return this[S.onScrollChanged];
    }
    set onScrollChanged(value) {
      super.onScrollChanged = value;
    }
    get onUpdateVisitedHistory() {
      return this[S.onUpdateVisitedHistory];
    }
    set onUpdateVisitedHistory(value) {
      super.onUpdateVisitedHistory = value;
    }
    get onWebViewCreated() {
      return this[S.onWebViewCreated];
    }
    set onWebViewCreated(value) {
      super.onWebViewCreated = value;
    }
    get shouldInterceptAjaxRequest() {
      return this[S.shouldInterceptAjaxRequest];
    }
    set shouldInterceptAjaxRequest(value) {
      super.shouldInterceptAjaxRequest = value;
    }
    get shouldInterceptFetchRequest() {
      return this[S.shouldInterceptFetchRequest];
    }
    set shouldInterceptFetchRequest(value) {
      super.shouldInterceptFetchRequest = value;
    }
    get shouldOverrideUrlLoading() {
      return this[S.shouldOverrideUrlLoading];
    }
    set shouldOverrideUrlLoading(value) {
      super.shouldOverrideUrlLoading = value;
    }
    get onEnterFullscreen() {
      return this[S.onEnterFullscreen];
    }
    set onEnterFullscreen(value) {
      super.onEnterFullscreen = value;
    }
    get onExitFullscreen() {
      return this[S.onExitFullscreen];
    }
    set onExitFullscreen(value) {
      super.onExitFullscreen = value;
    }
    get onOverScrolled() {
      return this[S.onOverScrolled];
    }
    set onOverScrolled(value) {
      super.onOverScrolled = value;
    }
    get onZoomScaleChanged() {
      return this[S.onZoomScaleChanged];
    }
    set onZoomScaleChanged(value) {
      super.onZoomScaleChanged = value;
    }
    get androidShouldInterceptRequest() {
      return this[S.androidShouldInterceptRequest];
    }
    set androidShouldInterceptRequest(value) {
      super.androidShouldInterceptRequest = value;
    }
    get androidOnRenderProcessUnresponsive() {
      return this[S.androidOnRenderProcessUnresponsive];
    }
    set androidOnRenderProcessUnresponsive(value) {
      super.androidOnRenderProcessUnresponsive = value;
    }
    get androidOnRenderProcessResponsive() {
      return this[S.androidOnRenderProcessResponsive];
    }
    set androidOnRenderProcessResponsive(value) {
      super.androidOnRenderProcessResponsive = value;
    }
    get androidOnRenderProcessGone() {
      return this[S.androidOnRenderProcessGone];
    }
    set androidOnRenderProcessGone(value) {
      super.androidOnRenderProcessGone = value;
    }
    get androidOnFormResubmission() {
      return this[S.androidOnFormResubmission];
    }
    set androidOnFormResubmission(value) {
      super.androidOnFormResubmission = value;
    }
    get androidOnScaleChanged() {
      return this[S.androidOnScaleChanged];
    }
    set androidOnScaleChanged(value) {
      super.androidOnScaleChanged = value;
    }
    get androidOnJsBeforeUnload() {
      return this[S.androidOnJsBeforeUnload];
    }
    set androidOnJsBeforeUnload(value) {
      super.androidOnJsBeforeUnload = value;
    }
    get androidOnReceivedLoginRequest() {
      return this[S.androidOnReceivedLoginRequest];
    }
    set androidOnReceivedLoginRequest(value) {
      super.androidOnReceivedLoginRequest = value;
    }
    createState() {
      return new in_app_webview._InAppWebViewState.new();
    }
  };
  (in_app_webview.InAppWebView.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let initialUrlRequest = opts && 'initialUrlRequest' in opts ? opts.initialUrlRequest : null;
    let initialFile = opts && 'initialFile' in opts ? opts.initialFile : null;
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let initialOptions = opts && 'initialOptions' in opts ? opts.initialOptions : null;
    let initialUserScripts = opts && 'initialUserScripts' in opts ? opts.initialUserScripts : null;
    let pullToRefreshController = opts && 'pullToRefreshController' in opts ? opts.pullToRefreshController : null;
    let contextMenu = opts && 'contextMenu' in opts ? opts.contextMenu : null;
    let onWebViewCreated = opts && 'onWebViewCreated' in opts ? opts.onWebViewCreated : null;
    let onLoadStart = opts && 'onLoadStart' in opts ? opts.onLoadStart : null;
    let onLoadStop = opts && 'onLoadStop' in opts ? opts.onLoadStop : null;
    let onLoadError = opts && 'onLoadError' in opts ? opts.onLoadError : null;
    let onLoadHttpError = opts && 'onLoadHttpError' in opts ? opts.onLoadHttpError : null;
    let onConsoleMessage = opts && 'onConsoleMessage' in opts ? opts.onConsoleMessage : null;
    let onProgressChanged = opts && 'onProgressChanged' in opts ? opts.onProgressChanged : null;
    let shouldOverrideUrlLoading = opts && 'shouldOverrideUrlLoading' in opts ? opts.shouldOverrideUrlLoading : null;
    let onLoadResource = opts && 'onLoadResource' in opts ? opts.onLoadResource : null;
    let onScrollChanged = opts && 'onScrollChanged' in opts ? opts.onScrollChanged : null;
    let onDownloadStart = opts && 'onDownloadStart' in opts ? opts.onDownloadStart : null;
    let onLoadResourceCustomScheme = opts && 'onLoadResourceCustomScheme' in opts ? opts.onLoadResourceCustomScheme : null;
    let onCreateWindow = opts && 'onCreateWindow' in opts ? opts.onCreateWindow : null;
    let onCloseWindow = opts && 'onCloseWindow' in opts ? opts.onCloseWindow : null;
    let onJsAlert = opts && 'onJsAlert' in opts ? opts.onJsAlert : null;
    let onJsConfirm = opts && 'onJsConfirm' in opts ? opts.onJsConfirm : null;
    let onJsPrompt = opts && 'onJsPrompt' in opts ? opts.onJsPrompt : null;
    let onReceivedHttpAuthRequest = opts && 'onReceivedHttpAuthRequest' in opts ? opts.onReceivedHttpAuthRequest : null;
    let onReceivedServerTrustAuthRequest = opts && 'onReceivedServerTrustAuthRequest' in opts ? opts.onReceivedServerTrustAuthRequest : null;
    let onReceivedClientCertRequest = opts && 'onReceivedClientCertRequest' in opts ? opts.onReceivedClientCertRequest : null;
    let onFindResultReceived = opts && 'onFindResultReceived' in opts ? opts.onFindResultReceived : null;
    let shouldInterceptAjaxRequest = opts && 'shouldInterceptAjaxRequest' in opts ? opts.shouldInterceptAjaxRequest : null;
    let onAjaxReadyStateChange = opts && 'onAjaxReadyStateChange' in opts ? opts.onAjaxReadyStateChange : null;
    let onAjaxProgress = opts && 'onAjaxProgress' in opts ? opts.onAjaxProgress : null;
    let shouldInterceptFetchRequest = opts && 'shouldInterceptFetchRequest' in opts ? opts.shouldInterceptFetchRequest : null;
    let onUpdateVisitedHistory = opts && 'onUpdateVisitedHistory' in opts ? opts.onUpdateVisitedHistory : null;
    let onPrint = opts && 'onPrint' in opts ? opts.onPrint : null;
    let onLongPressHitTestResult = opts && 'onLongPressHitTestResult' in opts ? opts.onLongPressHitTestResult : null;
    let onEnterFullscreen = opts && 'onEnterFullscreen' in opts ? opts.onEnterFullscreen : null;
    let onExitFullscreen = opts && 'onExitFullscreen' in opts ? opts.onExitFullscreen : null;
    let onPageCommitVisible = opts && 'onPageCommitVisible' in opts ? opts.onPageCommitVisible : null;
    let onTitleChanged = opts && 'onTitleChanged' in opts ? opts.onTitleChanged : null;
    let onWindowFocus = opts && 'onWindowFocus' in opts ? opts.onWindowFocus : null;
    let onWindowBlur = opts && 'onWindowBlur' in opts ? opts.onWindowBlur : null;
    let onOverScrolled = opts && 'onOverScrolled' in opts ? opts.onOverScrolled : null;
    let onZoomScaleChanged = opts && 'onZoomScaleChanged' in opts ? opts.onZoomScaleChanged : null;
    let androidOnSafeBrowsingHit = opts && 'androidOnSafeBrowsingHit' in opts ? opts.androidOnSafeBrowsingHit : null;
    let androidOnPermissionRequest = opts && 'androidOnPermissionRequest' in opts ? opts.androidOnPermissionRequest : null;
    let androidOnGeolocationPermissionsShowPrompt = opts && 'androidOnGeolocationPermissionsShowPrompt' in opts ? opts.androidOnGeolocationPermissionsShowPrompt : null;
    let androidOnGeolocationPermissionsHidePrompt = opts && 'androidOnGeolocationPermissionsHidePrompt' in opts ? opts.androidOnGeolocationPermissionsHidePrompt : null;
    let androidShouldInterceptRequest = opts && 'androidShouldInterceptRequest' in opts ? opts.androidShouldInterceptRequest : null;
    let androidOnRenderProcessGone = opts && 'androidOnRenderProcessGone' in opts ? opts.androidOnRenderProcessGone : null;
    let androidOnRenderProcessResponsive = opts && 'androidOnRenderProcessResponsive' in opts ? opts.androidOnRenderProcessResponsive : null;
    let androidOnRenderProcessUnresponsive = opts && 'androidOnRenderProcessUnresponsive' in opts ? opts.androidOnRenderProcessUnresponsive : null;
    let androidOnFormResubmission = opts && 'androidOnFormResubmission' in opts ? opts.androidOnFormResubmission : null;
    let androidOnScaleChanged = opts && 'androidOnScaleChanged' in opts ? opts.androidOnScaleChanged : null;
    let androidOnReceivedIcon = opts && 'androidOnReceivedIcon' in opts ? opts.androidOnReceivedIcon : null;
    let androidOnReceivedTouchIconUrl = opts && 'androidOnReceivedTouchIconUrl' in opts ? opts.androidOnReceivedTouchIconUrl : null;
    let androidOnJsBeforeUnload = opts && 'androidOnJsBeforeUnload' in opts ? opts.androidOnJsBeforeUnload : null;
    let androidOnReceivedLoginRequest = opts && 'androidOnReceivedLoginRequest' in opts ? opts.androidOnReceivedLoginRequest : null;
    let iosOnWebContentProcessDidTerminate = opts && 'iosOnWebContentProcessDidTerminate' in opts ? opts.iosOnWebContentProcessDidTerminate : null;
    let iosOnDidReceiveServerRedirectForProvisionalNavigation = opts && 'iosOnDidReceiveServerRedirectForProvisionalNavigation' in opts ? opts.iosOnDidReceiveServerRedirectForProvisionalNavigation : null;
    let iosOnNavigationResponse = opts && 'iosOnNavigationResponse' in opts ? opts.iosOnNavigationResponse : null;
    let iosShouldAllowDeprecatedTLS = opts && 'iosShouldAllowDeprecatedTLS' in opts ? opts.iosShouldAllowDeprecatedTLS : null;
    let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.windowId] = windowId;
    this[S.initialUrlRequest] = initialUrlRequest;
    this[S.initialFile] = initialFile;
    this[S.initialData] = initialData;
    this[S.initialOptions] = initialOptions;
    this[S.initialUserScripts] = initialUserScripts;
    this[S.pullToRefreshController] = pullToRefreshController;
    this[S.contextMenu] = contextMenu;
    this[S.onWebViewCreated] = onWebViewCreated;
    this[S.onLoadStart] = onLoadStart;
    this[S.onLoadStop] = onLoadStop;
    this[S.onLoadError] = onLoadError;
    this[S.onLoadHttpError] = onLoadHttpError;
    this[S.onConsoleMessage] = onConsoleMessage;
    this[S.onProgressChanged] = onProgressChanged;
    this[S.shouldOverrideUrlLoading] = shouldOverrideUrlLoading;
    this[S.onLoadResource] = onLoadResource;
    this[S.onScrollChanged] = onScrollChanged;
    this[S.onDownloadStart] = onDownloadStart;
    this[S.onLoadResourceCustomScheme] = onLoadResourceCustomScheme;
    this[S.onCreateWindow] = onCreateWindow;
    this[S.onCloseWindow] = onCloseWindow;
    this[S.onJsAlert] = onJsAlert;
    this[S.onJsConfirm] = onJsConfirm;
    this[S.onJsPrompt] = onJsPrompt;
    this[S.onReceivedHttpAuthRequest] = onReceivedHttpAuthRequest;
    this[S.onReceivedServerTrustAuthRequest] = onReceivedServerTrustAuthRequest;
    this[S.onReceivedClientCertRequest] = onReceivedClientCertRequest;
    this[S.onFindResultReceived] = onFindResultReceived;
    this[S.shouldInterceptAjaxRequest] = shouldInterceptAjaxRequest;
    this[S.onAjaxReadyStateChange] = onAjaxReadyStateChange;
    this[S.onAjaxProgress] = onAjaxProgress;
    this[S.shouldInterceptFetchRequest] = shouldInterceptFetchRequest;
    this[S.onUpdateVisitedHistory] = onUpdateVisitedHistory;
    this[S.onPrint] = onPrint;
    this[S.onLongPressHitTestResult] = onLongPressHitTestResult;
    this[S.onEnterFullscreen] = onEnterFullscreen;
    this[S.onExitFullscreen] = onExitFullscreen;
    this[S.onPageCommitVisible] = onPageCommitVisible;
    this[S.onTitleChanged] = onTitleChanged;
    this[S.onWindowFocus] = onWindowFocus;
    this[S.onWindowBlur] = onWindowBlur;
    this[S.onOverScrolled] = onOverScrolled;
    this[S.onZoomScaleChanged] = onZoomScaleChanged;
    this[S.androidOnSafeBrowsingHit] = androidOnSafeBrowsingHit;
    this[S.androidOnPermissionRequest] = androidOnPermissionRequest;
    this[S.androidOnGeolocationPermissionsShowPrompt] = androidOnGeolocationPermissionsShowPrompt;
    this[S.androidOnGeolocationPermissionsHidePrompt] = androidOnGeolocationPermissionsHidePrompt;
    this[S.androidShouldInterceptRequest] = androidShouldInterceptRequest;
    this[S.androidOnRenderProcessGone] = androidOnRenderProcessGone;
    this[S.androidOnRenderProcessResponsive] = androidOnRenderProcessResponsive;
    this[S.androidOnRenderProcessUnresponsive] = androidOnRenderProcessUnresponsive;
    this[S.androidOnFormResubmission] = androidOnFormResubmission;
    this[S.androidOnScaleChanged] = androidOnScaleChanged;
    this[S.androidOnReceivedIcon] = androidOnReceivedIcon;
    this[S.androidOnReceivedTouchIconUrl] = androidOnReceivedTouchIconUrl;
    this[S.androidOnJsBeforeUnload] = androidOnJsBeforeUnload;
    this[S.androidOnReceivedLoginRequest] = androidOnReceivedLoginRequest;
    this[S.iosOnWebContentProcessDidTerminate] = iosOnWebContentProcessDidTerminate;
    this[S.iosOnDidReceiveServerRedirectForProvisionalNavigation] = iosOnDidReceiveServerRedirectForProvisionalNavigation;
    this[S.iosOnNavigationResponse] = iosOnNavigationResponse;
    this[S.iosShouldAllowDeprecatedTLS] = iosShouldAllowDeprecatedTLS;
    this[S.gestureRecognizers] = gestureRecognizers;
    in_app_webview.InAppWebView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = in_app_webview.InAppWebView.prototype;
  dart.addTypeTests(in_app_webview.InAppWebView);
  dart.addTypeCaches(in_app_webview.InAppWebView);
  in_app_webview.InAppWebView[dart.implements] = () => [webview.WebView];
  dart.setMethodSignature(in_app_webview.InAppWebView, () => ({
    __proto__: dart.getMethods(in_app_webview.InAppWebView.__proto__),
    createState: dart.fnType(in_app_webview._InAppWebViewState, [])
  }));
  dart.setLibraryUri(in_app_webview.InAppWebView, I[20]);
  dart.setFieldSignature(in_app_webview.InAppWebView, () => ({
    __proto__: dart.getFields(in_app_webview.InAppWebView.__proto__),
    gestureRecognizers: dart.finalFieldType(dart.nullable(core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))),
    windowId: dart.finalFieldType(dart.nullable(core.int)),
    androidOnGeolocationPermissionsHidePrompt: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    androidOnGeolocationPermissionsShowPrompt: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.GeolocationPermissionShowPromptResponse)), [in_app_webview_controller$0.InAppWebViewController, core.String]))),
    androidOnPermissionRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.PermissionRequestResponse)), [in_app_webview_controller$0.InAppWebViewController, core.String, core.List$(core.String)]))),
    androidOnSafeBrowsingHit: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.SafeBrowsingResponse)), [in_app_webview_controller$0.InAppWebViewController, core.Uri, dart.nullable(types.SafeBrowsingThreat)]))),
    initialData: dart.finalFieldType(dart.nullable(types.InAppWebViewInitialData)),
    initialFile: dart.finalFieldType(dart.nullable(core.String)),
    initialOptions: dart.finalFieldType(dart.nullable(in_app_webview_options$0.InAppWebViewGroupOptions)),
    initialUrlRequest: dart.finalFieldType(dart.nullable(types.URLRequest)),
    initialUserScripts: dart.finalFieldType(dart.nullable(collection.UnmodifiableListView$(types.UserScript))),
    pullToRefreshController: dart.finalFieldType(dart.nullable(pull_to_refresh_controller.PullToRefreshController)),
    contextMenu: dart.finalFieldType(dart.nullable(context_menu.ContextMenu)),
    onPageCommitVisible: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onTitleChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.String)]))),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    iosOnWebContentProcessDidTerminate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    iosOnNavigationResponse: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.IOSNavigationResponseAction)), [in_app_webview_controller$0.InAppWebViewController, types.IOSWKNavigationResponse]))),
    iosShouldAllowDeprecatedTLS: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.IOSShouldAllowDeprecatedTLSAction)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onAjaxProgress: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(types.AjaxRequestAction), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    onAjaxReadyStateChange: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequestAction)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    onConsoleMessage: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.ConsoleMessage]))),
    onCreateWindow: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(core.bool)), [in_app_webview_controller$0.InAppWebViewController, types.CreateWindowAction]))),
    onCloseWindow: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onWindowFocus: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onWindowBlur: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    androidOnReceivedIcon: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, typed_data.Uint8List]))),
    androidOnReceivedTouchIconUrl: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.Uri, core.bool]))),
    onDownloadStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.Uri]))),
    onFindResultReceived: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int, core.bool]))),
    onJsAlert: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsAlertResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsAlertRequest]))),
    onJsConfirm: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsConfirmResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsConfirmRequest]))),
    onJsPrompt: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsPromptResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsPromptRequest]))),
    onLoadError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), core.int, core.String]))),
    onLoadHttpError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), core.int, core.String]))),
    onLoadResource: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.LoadedResource]))),
    onLoadResourceCustomScheme: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.CustomSchemeResponse)), [in_app_webview_controller$0.InAppWebViewController, core.Uri]))),
    onLoadStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLoadStop: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLongPressHitTestResult: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.InAppWebViewHitTestResult]))),
    onPrint: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onProgressChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int]))),
    onReceivedClientCertRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.ClientCertResponse)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onReceivedHttpAuthRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.HttpAuthResponse)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onReceivedServerTrustAuthRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.ServerTrustAuthResponse)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onScrollChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int]))),
    onUpdateVisitedHistory: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), dart.nullable(core.bool)]))),
    onWebViewCreated: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    shouldInterceptAjaxRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequest)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    shouldInterceptFetchRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.FetchRequest)), [in_app_webview_controller$0.InAppWebViewController, types.FetchRequest]))),
    shouldOverrideUrlLoading: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.NavigationActionPolicy)), [in_app_webview_controller$0.InAppWebViewController, types.NavigationAction]))),
    onEnterFullscreen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onExitFullscreen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onOverScrolled: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int, core.bool, core.bool]))),
    onZoomScaleChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.double, core.double]))),
    androidShouldInterceptRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebResourceResponse)), [in_app_webview_controller$0.InAppWebViewController, types.WebResourceRequest]))),
    androidOnRenderProcessUnresponsive: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebViewRenderProcessAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnRenderProcessResponsive: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebViewRenderProcessAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnRenderProcessGone: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.RenderProcessGoneDetail]))),
    androidOnFormResubmission: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.FormResubmissionAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnScaleChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.double, core.double]))),
    androidOnJsBeforeUnload: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsBeforeUnloadResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsBeforeUnloadRequest]))),
    androidOnReceivedLoginRequest: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.LoginRequest])))
  }));
  in_app_webview._InAppWebViewState = class _InAppWebViewState extends framework.State$(in_app_webview.InAppWebView) {
    get [S._controller]() {
      let t5;
      return dart.test(this[S.___InAppWebViewState__controller_isSet]) ? (t5 = this[S.___InAppWebViewState__controller], t5) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [S._controller](t5) {
      if (t5 == null) dart.nullFailed(I[21], 365, 31, "null");
      this[S.___InAppWebViewState__controller_isSet] = true;
      this[S.___InAppWebViewState__controller] = t5;
    }
    build(context) {
      let t6, t6$, t6$0, t6$1, t6$2, t6$3, t6$4, t6$5, t6$6, t6$7, t6$8, t6$9, t6$10, t6$11, t6$12, t6$13, t6$14, t6$15, t6$16, t6$17, t6$18, t6$19;
      if (context == null) dart.nullFailed(I[21], 368, 29, "context");
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
        let useHybridComposition = (t6$ = (t6 = this.widget.initialOptions, t6 == null ? null : t6.android.useHybridComposition), t6$ == null ? false : t6$);
        if (!dart.test(useHybridComposition) && this.widget.pullToRefreshController != null) {
          dart.throw(core.Exception.new("To use the pull-to-refresh feature, useHybridComposition Android-specific option MUST be true!"));
        }
        if (dart.test(useHybridComposition)) {
          return new platform_view.PlatformViewLink.new({viewType: "com.pichillilorenzo/flutter_inappwebview", surfaceFactory: dart.fn((context, controller) => {
              let t6;
              if (context == null) dart.nullFailed(I[21], 382, 26, "context");
              if (controller == null) dart.nullFailed(I[21], 383, 36, "controller");
              return new platform_view.AndroidViewSurface.new({controller: platform_views.AndroidViewController.as(controller), gestureRecognizers: (t6 = this.widget.gestureRecognizers, t6 == null ? C[14] || CT.C14 : t6), hitTestBehavior: platform_view$.PlatformViewHitTestBehavior.opaque, $creationLocationd_0dea112b090073317d4: C[15] || CT.C15});
            }, T.BuildContextAndPlatformViewControllerToAndroidViewSurface()), onCreatePlatformView: dart.fn(params => {
              let t6, t6$, t6$0, t6$1, t6$2, t6$3, t6$4, t6$5, t6$6, t6$7, t6$8;
              if (params == null) dart.nullFailed(I[21], 392, 61, "params");
              t6$8 = platform_views.PlatformViewsService.initSurfaceAndroidView({id: params.id, viewType: "com.pichillilorenzo/flutter_inappwebview", layoutDirection: ui.TextDirection.rtl, creationParams: new (T.IdentityMapOfString$dynamic()).from(["initialUrlRequest", (t6 = this.widget.initialUrlRequest, t6 == null ? new types.URLRequest.new({url: core.Uri.parse("about:blank")}) : t6).toMap(), "initialFile", this.widget.initialFile, "initialData", (t6$ = this.widget.initialData, t6$ == null ? null : t6$.toMap()), "initialOptions", (t6$1 = (t6$0 = this.widget.initialOptions, t6$0 == null ? null : t6$0.toMap()), t6$1 == null ? new _js_helper.LinkedMap.new() : t6$1), "contextMenu", (t6$3 = (t6$2 = this.widget.contextMenu, t6$2 == null ? null : t6$2.toMap()), t6$3 == null ? new _js_helper.LinkedMap.new() : t6$3), "windowId", this.widget.windowId, "initialUserScripts", (t6$5 = (t6$4 = this.widget.initialUserScripts, t6$4 == null ? null : t6$4[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
                    if (e == null) dart.nullFailed(I[21], 407, 53, "e");
                    return e.toMap();
                  }, T.UserScriptToMapOfString$dynamic()))[S.$toList]()), t6$5 == null ? [] : t6$5), "pullToRefreshOptions", (t6$7 = (t6$6 = this.widget.pullToRefreshController, t6$6 == null ? null : t6$6.options.toMap()), t6$7 == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t6$7)]), creationParamsCodec: C[3] || CT.C3});
              return (() => {
                t6$8.addOnPlatformViewCreatedListener(params.onPlatformViewCreated);
                t6$8.addOnPlatformViewCreatedListener(dart.fn(id => {
                  if (id == null) dart.nullFailed(I[21], 417, 20, "id");
                  return this[S._onPlatformViewCreated](id);
                }, T.intTovoid()));
                t6$8.create();
                return t6$8;
              })();
            }, T.PlatformViewCreationParamsToSurfaceAndroidViewController()), $creationLocationd_0dea112b090073317d4: C[20] || CT.C20});
        } else {
          return new platform_view.AndroidView.new({viewType: "com.pichillilorenzo/flutter_inappwebview", onPlatformViewCreated: dart.bind(this, S._onPlatformViewCreated), gestureRecognizers: this.widget.gestureRecognizers, layoutDirection: ui.TextDirection.rtl, creationParams: new (T.IdentityMapOfString$dynamic()).from(["initialUrlRequest", (t6$0 = this.widget.initialUrlRequest, t6$0 == null ? new types.URLRequest.new({url: core.Uri.parse("about:blank")}) : t6$0).toMap(), "initialFile", this.widget.initialFile, "initialData", (t6$1 = this.widget.initialData, t6$1 == null ? null : t6$1.toMap()), "initialOptions", (t6$3 = (t6$2 = this.widget.initialOptions, t6$2 == null ? null : t6$2.toMap()), t6$3 == null ? new _js_helper.LinkedMap.new() : t6$3), "contextMenu", (t6$5 = (t6$4 = this.widget.contextMenu, t6$4 == null ? null : t6$4.toMap()), t6$5 == null ? new _js_helper.LinkedMap.new() : t6$5), "windowId", this.widget.windowId, "initialUserScripts", (t6$7 = (t6$6 = this.widget.initialUserScripts, t6$6 == null ? null : t6$6[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
                if (e == null) dart.nullFailed(I[21], 437, 49, "e");
                return e.toMap();
              }, T.UserScriptToMapOfString$dynamic()))[S.$toList]()), t6$7 == null ? [] : t6$7), "pullToRefreshOptions", (t6$9 = (t6$8 = this.widget.pullToRefreshController, t6$8 == null ? null : t6$8.options.toMap()), t6$9 == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t6$9)]), creationParamsCodec: C[3] || CT.C3, $creationLocationd_0dea112b090073317d4: C[25] || CT.C25});
        }
      } else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
        return new platform_view.UiKitView.new({viewType: "com.pichillilorenzo/flutter_inappwebview", onPlatformViewCreated: dart.bind(this, S._onPlatformViewCreated), gestureRecognizers: this.widget.gestureRecognizers, creationParams: new (T.IdentityMapOfString$dynamic()).from(["initialUrlRequest", (t6$10 = this.widget.initialUrlRequest, t6$10 == null ? new types.URLRequest.new({url: core.Uri.parse("about:blank")}) : t6$10).toMap(), "initialFile", this.widget.initialFile, "initialData", (t6$11 = this.widget.initialData, t6$11 == null ? null : t6$11.toMap()), "initialOptions", (t6$13 = (t6$12 = this.widget.initialOptions, t6$12 == null ? null : t6$12.toMap()), t6$13 == null ? new _js_helper.LinkedMap.new() : t6$13), "contextMenu", (t6$15 = (t6$14 = this.widget.contextMenu, t6$14 == null ? null : t6$14.toMap()), t6$15 == null ? new _js_helper.LinkedMap.new() : t6$15), "windowId", this.widget.windowId, "initialUserScripts", (t6$17 = (t6$16 = this.widget.initialUserScripts, t6$16 == null ? null : t6$16[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
              if (e == null) dart.nullFailed(I[21], 460, 47, "e");
              return e.toMap();
            }, T.UserScriptToMapOfString$dynamic()))[S.$toList]()), t6$17 == null ? [] : t6$17), "pullToRefreshOptions", (t6$19 = (t6$18 = this.widget.pullToRefreshController, t6$18 == null ? null : t6$18.options.toMap()), t6$19 == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t6$19)]), creationParamsCodec: C[3] || CT.C3, $creationLocationd_0dea112b090073317d4: C[33] || CT.C33});
      }
      return new text.Text.new(dart.str(platform.defaultTargetPlatform) + " is not yet supported by the flutter_inappwebview plugin", {$creationLocationd_0dea112b090073317d4: C[40] || CT.C40});
    }
    didUpdateWidget(oldWidget) {
      in_app_webview.InAppWebView.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[21], 473, 37, "oldWidget");
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      super.dispose();
    }
    [S._onPlatformViewCreated](id) {
      let t6;
      if (id == null) dart.nullFailed(I[21], 482, 35, "id");
      this[S._controller] = new in_app_webview_controller$0.InAppWebViewController.new(id, this.widget);
      t6 = this.widget.pullToRefreshController;
      t6 == null ? null : t6.initMethodChannel(id);
      if (this.widget.onWebViewCreated != null) {
        dart.nullCheck(this.widget.onWebViewCreated)(this[S._controller]);
      }
    }
  };
  (in_app_webview._InAppWebViewState.new = function() {
    this[S.___InAppWebViewState__controller] = null;
    this[S.___InAppWebViewState__controller_isSet] = false;
    in_app_webview._InAppWebViewState.__proto__.new.call(this);
    ;
  }).prototype = in_app_webview._InAppWebViewState.prototype;
  dart.addTypeTests(in_app_webview._InAppWebViewState);
  dart.addTypeCaches(in_app_webview._InAppWebViewState);
  dart.setMethodSignature(in_app_webview._InAppWebViewState, () => ({
    __proto__: dart.getMethods(in_app_webview._InAppWebViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [S._onPlatformViewCreated]: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(in_app_webview._InAppWebViewState, () => ({
    __proto__: dart.getGetters(in_app_webview._InAppWebViewState.__proto__),
    [S._controller]: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setSetterSignature(in_app_webview._InAppWebViewState, () => ({
    __proto__: dart.getSetters(in_app_webview._InAppWebViewState.__proto__),
    [S._controller]: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setLibraryUri(in_app_webview._InAppWebViewState, I[20]);
  dart.setFieldSignature(in_app_webview._InAppWebViewState, () => ({
    __proto__: dart.getFields(in_app_webview._InAppWebViewState.__proto__),
    [S.___InAppWebViewState__controller]: dart.fieldType(dart.nullable(in_app_webview_controller$0.InAppWebViewController)),
    [S.___InAppWebViewState__controller_isSet]: dart.fieldType(core.bool)
  }));
  pull_to_refresh_options.PullToRefreshOptions = class PullToRefreshOptions extends core.Object {
    get enabled() {
      return this[S.enabled];
    }
    set enabled(value) {
      this[S.enabled] = value;
    }
    get color() {
      return this[S.color];
    }
    set color(value) {
      this[S.color] = value;
    }
    get backgroundColor() {
      return this[S.backgroundColor];
    }
    set backgroundColor(value) {
      this[S.backgroundColor] = value;
    }
    get distanceToTriggerSync() {
      return this[S.distanceToTriggerSync];
    }
    set distanceToTriggerSync(value) {
      this[S.distanceToTriggerSync] = value;
    }
    get slingshotDistance() {
      return this[S.slingshotDistance];
    }
    set slingshotDistance(value) {
      this[S.slingshotDistance] = value;
    }
    get size() {
      return this[S.size];
    }
    set size(value) {
      this[S.size] = value;
    }
    get attributedTitle() {
      return this[S.attributedTitle];
    }
    set attributedTitle(value) {
      this[S.attributedTitle] = value;
    }
    toMap() {
      let t6, t6$, t6$0, t6$1, t6$2;
      return new (T.IdentityMapOfString$dynamic()).from(["enabled", this.enabled, "color", (t6 = this.color, t6 == null ? null : util['HexColor|toHex'](t6)), "backgroundColor", (t6$ = this.backgroundColor, t6$ == null ? null : util['HexColor|toHex'](t6$)), "distanceToTriggerSync", this.distanceToTriggerSync, "slingshotDistance", this.slingshotDistance, "size", (t6$0 = this.size, t6$0 == null ? null : t6$0.toValue()), "attributedTitle", (t6$2 = (t6$1 = this.attributedTitle, t6$1 == null ? null : t6$1.toMap()), t6$2 == null ? new _js_helper.LinkedMap.new() : t6$2)]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (pull_to_refresh_options.PullToRefreshOptions.new = function(opts) {
    let enabled = opts && 'enabled' in opts ? opts.enabled : true;
    if (enabled == null) dart.nullFailed(I[22], 36, 13, "enabled");
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let distanceToTriggerSync = opts && 'distanceToTriggerSync' in opts ? opts.distanceToTriggerSync : null;
    let slingshotDistance = opts && 'slingshotDistance' in opts ? opts.slingshotDistance : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let attributedTitle = opts && 'attributedTitle' in opts ? opts.attributedTitle : null;
    this[S.enabled] = enabled;
    this[S.color] = color;
    this[S.backgroundColor] = backgroundColor;
    this[S.distanceToTriggerSync] = distanceToTriggerSync;
    this[S.slingshotDistance] = slingshotDistance;
    this[S.size] = size;
    this[S.attributedTitle] = attributedTitle;
    ;
  }).prototype = pull_to_refresh_options.PullToRefreshOptions.prototype;
  dart.addTypeTests(pull_to_refresh_options.PullToRefreshOptions);
  dart.addTypeCaches(pull_to_refresh_options.PullToRefreshOptions);
  dart.setMethodSignature(pull_to_refresh_options.PullToRefreshOptions, () => ({
    __proto__: dart.getMethods(pull_to_refresh_options.PullToRefreshOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(pull_to_refresh_options.PullToRefreshOptions, I[23]);
  dart.setFieldSignature(pull_to_refresh_options.PullToRefreshOptions, () => ({
    __proto__: dart.getFields(pull_to_refresh_options.PullToRefreshOptions.__proto__),
    enabled: dart.fieldType(core.bool),
    color: dart.fieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.fieldType(dart.nullable(ui.Color)),
    distanceToTriggerSync: dart.fieldType(dart.nullable(core.int)),
    slingshotDistance: dart.fieldType(dart.nullable(core.int)),
    size: dart.fieldType(dart.nullable(types.AndroidPullToRefreshSize)),
    attributedTitle: dart.fieldType(dart.nullable(types.IOSNSAttributedString))
  }));
  dart.defineExtensionMethods(pull_to_refresh_options.PullToRefreshOptions, ['toString']);
  content_blocker.ContentBlocker = class ContentBlocker extends core.Object {
    get trigger() {
      return this[S.trigger];
    }
    set trigger(value) {
      this[S.trigger] = value;
    }
    get action() {
      return this[S.action$1];
    }
    set action(value) {
      this[S.action$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$MapOfString$dynamic()).from(["trigger", this.trigger.toMap(), "action", this.action.toMap()]);
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[24], 23, 69, "map");
      return new content_blocker.ContentBlocker.new({trigger: content_blocker.ContentBlockerTrigger.fromMap(T.LinkedHashMapOfString$dynamic().from(dart.nullCheck(map[S.$_get]("trigger")))), action: content_blocker.ContentBlockerAction.fromMap(T.LinkedHashMapOfString$dynamic().from(dart.nullCheck(map[S.$_get]("action"))))});
    }
  };
  (content_blocker.ContentBlocker.new = function(opts) {
    let trigger = opts && 'trigger' in opts ? opts.trigger : null;
    if (trigger == null) dart.nullFailed(I[24], 17, 33, "trigger");
    let action = opts && 'action' in opts ? opts.action : null;
    if (action == null) dart.nullFailed(I[24], 17, 56, "action");
    this[S.trigger] = trigger;
    this[S.action$1] = action;
    ;
  }).prototype = content_blocker.ContentBlocker.prototype;
  dart.addTypeTests(content_blocker.ContentBlocker);
  dart.addTypeCaches(content_blocker.ContentBlocker);
  dart.setMethodSignature(content_blocker.ContentBlocker, () => ({
    __proto__: dart.getMethods(content_blocker.ContentBlocker.__proto__),
    toMap: dart.fnType(core.Map$(core.String, core.Map$(core.String, dart.dynamic)), [])
  }));
  dart.setLibraryUri(content_blocker.ContentBlocker, I[25]);
  dart.setFieldSignature(content_blocker.ContentBlocker, () => ({
    __proto__: dart.getFields(content_blocker.ContentBlocker.__proto__),
    trigger: dart.fieldType(content_blocker.ContentBlockerTrigger),
    action: dart.fieldType(content_blocker.ContentBlockerAction)
  }));
  content_blocker.ContentBlockerTrigger = class ContentBlockerTrigger extends core.Object {
    get urlFilter() {
      let t6;
      return dart.test(this[S.__ContentBlockerTrigger_urlFilter_isSet]) ? (t6 = this[S.__ContentBlockerTrigger_urlFilter], t6) : dart.throw(new _internal.LateError.fieldNI("urlFilter"));
    }
    set urlFilter(t6) {
      if (t6 == null) dart.nullFailed(I[24], 38, 15, "null");
      this[S.__ContentBlockerTrigger_urlFilter_isSet] = true;
      this[S.__ContentBlockerTrigger_urlFilter] = t6;
    }
    get urlFilterIsCaseSensitive() {
      let t7;
      return dart.test(this[S.__ContentBlockerTrigger_urlFilterIsCaseSensitive_isSet]) ? (t7 = this[S.__ContentBlockerTrigger_urlFilterIsCaseSensitive], t7) : dart.throw(new _internal.LateError.fieldNI("urlFilterIsCaseSensitive"));
    }
    set urlFilterIsCaseSensitive(t7) {
      if (t7 == null) dart.nullFailed(I[24], 41, 13, "null");
      this[S.__ContentBlockerTrigger_urlFilterIsCaseSensitive_isSet] = true;
      this[S.__ContentBlockerTrigger_urlFilterIsCaseSensitive] = t7;
    }
    get resourceType() {
      let t8;
      return dart.test(this[S.__ContentBlockerTrigger_resourceType_isSet]) ? (t8 = this[S.__ContentBlockerTrigger_resourceType], t8) : dart.throw(new _internal.LateError.fieldNI("resourceType"));
    }
    set resourceType(t8) {
      if (t8 == null) dart.nullFailed(I[24], 45, 48, "null");
      this[S.__ContentBlockerTrigger_resourceType_isSet] = true;
      this[S.__ContentBlockerTrigger_resourceType] = t8;
    }
    get ifDomain() {
      let t9;
      return dart.test(this[S.__ContentBlockerTrigger_ifDomain_isSet]) ? (t9 = this[S.__ContentBlockerTrigger_ifDomain], t9) : dart.throw(new _internal.LateError.fieldNI("ifDomain"));
    }
    set ifDomain(t9) {
      if (t9 == null) dart.nullFailed(I[24], 49, 21, "null");
      this[S.__ContentBlockerTrigger_ifDomain_isSet] = true;
      this[S.__ContentBlockerTrigger_ifDomain] = t9;
    }
    get unlessDomain() {
      let t10;
      return dart.test(this[S.__ContentBlockerTrigger_unlessDomain_isSet]) ? (t10 = this[S.__ContentBlockerTrigger_unlessDomain], t10) : dart.throw(new _internal.LateError.fieldNI("unlessDomain"));
    }
    set unlessDomain(t10) {
      if (t10 == null) dart.nullFailed(I[24], 53, 21, "null");
      this[S.__ContentBlockerTrigger_unlessDomain_isSet] = true;
      this[S.__ContentBlockerTrigger_unlessDomain] = t10;
    }
    get loadType() {
      let t11;
      return dart.test(this[S.__ContentBlockerTrigger_loadType_isSet]) ? (t11 = this[S.__ContentBlockerTrigger_loadType], t11) : dart.throw(new _internal.LateError.fieldNI("loadType"));
    }
    set loadType(t11) {
      if (t11 == null) dart.nullFailed(I[24], 56, 44, "null");
      this[S.__ContentBlockerTrigger_loadType_isSet] = true;
      this[S.__ContentBlockerTrigger_loadType] = t11;
    }
    get ifTopUrl() {
      let t12;
      return dart.test(this[S.__ContentBlockerTrigger_ifTopUrl_isSet]) ? (t12 = this[S.__ContentBlockerTrigger_ifTopUrl], t12) : dart.throw(new _internal.LateError.fieldNI("ifTopUrl"));
    }
    set ifTopUrl(t12) {
      if (t12 == null) dart.nullFailed(I[24], 60, 21, "null");
      this[S.__ContentBlockerTrigger_ifTopUrl_isSet] = true;
      this[S.__ContentBlockerTrigger_ifTopUrl] = t12;
    }
    get unlessTopUrl() {
      let t13;
      return dart.test(this[S.__ContentBlockerTrigger_unlessTopUrl_isSet]) ? (t13 = this[S.__ContentBlockerTrigger_unlessTopUrl], t13) : dart.throw(new _internal.LateError.fieldNI("unlessTopUrl"));
    }
    set unlessTopUrl(t13) {
      if (t13 == null) dart.nullFailed(I[24], 64, 21, "null");
      this[S.__ContentBlockerTrigger_unlessTopUrl_isSet] = true;
      this[S.__ContentBlockerTrigger_unlessTopUrl] = t13;
    }
    toMap() {
      let resourceTypeStringList = T.JSArrayOfString().of([]);
      this.resourceType[S.$forEach](dart.fn(type => {
        if (type == null) dart.nullFailed(I[24], 90, 27, "type");
        resourceTypeStringList[S.$add](type.toValue());
      }, T.ContentBlockerTriggerResourceTypeTovoid()));
      let loadTypeStringList = T.JSArrayOfString().of([]);
      this.loadType[S.$forEach](dart.fn(type => {
        if (type == null) dart.nullFailed(I[24], 94, 23, "type");
        loadTypeStringList[S.$add](type.toValue());
      }, T.ContentBlockerTriggerLoadTypeTovoid()));
      let map = new (T.IdentityMapOfString$dynamic()).from(["url-filter", this.urlFilter, "url-filter-is-case-sensitive", this.urlFilterIsCaseSensitive, "if-domain", this.ifDomain, "unless-domain", this.unlessDomain, "resource-type", resourceTypeStringList, "load-type", loadTypeStringList, "if-top-url", this.ifTopUrl, "unless-top-url", this.unlessTopUrl]);
      map[S.$keys][S.$where](dart.fn(key => {
        if (key == null) dart.nullFailed(I[24], 110, 17, "key");
        return map[S.$_get](key) == null || core.List.is(map[S.$_get](key)) && core.List.as(map[S.$_get](key))[S.$length] === 0;
      }, T.StringTobool()))[S.$toList]()[S.$forEach](dart.bind(map, S.$remove));
      return map;
    }
    static fromMap(map) {
      let t14, t14$, t14$0, t14$1, t14$2, t14$3;
      if (map == null) dart.nullFailed(I[24], 119, 61, "map");
      let resourceType = T.JSArrayOfContentBlockerTriggerResourceType().of([]);
      let loadType = T.JSArrayOfContentBlockerTriggerLoadType().of([]);
      let resourceTypeStringList = T.ListOfString().from(core.Iterable.as((t14 = map[S.$_get]("resource-type"), t14 == null ? [] : t14)));
      resourceTypeStringList[S.$forEach](dart.fn(typeValue => {
        if (typeValue == null) dart.nullFailed(I[24], 125, 37, "typeValue");
        let type = types.ContentBlockerTriggerResourceType.fromValue(typeValue);
        if (type != null) {
          resourceType[S.$add](type);
        }
      }, T.StringTovoid()));
      let loadTypeStringList = T.ListOfString().from(core.Iterable.as((t14$ = map[S.$_get]("load-type"), t14$ == null ? [] : t14$)));
      loadTypeStringList[S.$forEach](dart.fn(typeValue => {
        if (typeValue == null) dart.nullFailed(I[24], 133, 33, "typeValue");
        let type = types.ContentBlockerTriggerLoadType.fromValue(typeValue);
        if (type != null) {
          loadType[S.$add](type);
        }
      }, T.StringTovoid()));
      return new content_blocker.ContentBlockerTrigger.new({urlFilter: core.String.as(map[S.$_get]("url-filter")), urlFilterIsCaseSensitive: core.bool.as(map[S.$_get]("url-filter-is-case-sensitive")), ifDomain: T.ListOfString().from(core.Iterable.as((t14$0 = map[S.$_get]("if-domain"), t14$0 == null ? [] : t14$0))), unlessDomain: T.ListOfString().from(core.Iterable.as((t14$1 = map[S.$_get]("unless-domain"), t14$1 == null ? [] : t14$1))), resourceType: resourceType, loadType: loadType, ifTopUrl: T.ListOfString().from(core.Iterable.as((t14$2 = map[S.$_get]("if-top-url"), t14$2 == null ? [] : t14$2))), unlessTopUrl: T.ListOfString().from(core.Iterable.as((t14$3 = map[S.$_get]("unless-top-url"), t14$3 == null ? [] : t14$3)))});
    }
  };
  (content_blocker.ContentBlockerTrigger.new = function(opts) {
    let urlFilter = opts && 'urlFilter' in opts ? opts.urlFilter : null;
    if (urlFilter == null) dart.nullFailed(I[24], 67, 24, "urlFilter");
    let urlFilterIsCaseSensitive = opts && 'urlFilterIsCaseSensitive' in opts ? opts.urlFilterIsCaseSensitive : false;
    if (urlFilterIsCaseSensitive == null) dart.nullFailed(I[24], 68, 12, "urlFilterIsCaseSensitive");
    let resourceType = opts && 'resourceType' in opts ? opts.resourceType : C[43] || CT.C43;
    if (resourceType == null) dart.nullFailed(I[24], 69, 47, "resourceType");
    let ifDomain = opts && 'ifDomain' in opts ? opts.ifDomain : C[44] || CT.C44;
    if (ifDomain == null) dart.nullFailed(I[24], 70, 20, "ifDomain");
    let unlessDomain = opts && 'unlessDomain' in opts ? opts.unlessDomain : C[44] || CT.C44;
    if (unlessDomain == null) dart.nullFailed(I[24], 71, 20, "unlessDomain");
    let loadType = opts && 'loadType' in opts ? opts.loadType : C[45] || CT.C45;
    if (loadType == null) dart.nullFailed(I[24], 72, 43, "loadType");
    let ifTopUrl = opts && 'ifTopUrl' in opts ? opts.ifTopUrl : C[44] || CT.C44;
    if (ifTopUrl == null) dart.nullFailed(I[24], 73, 20, "ifTopUrl");
    let unlessTopUrl = opts && 'unlessTopUrl' in opts ? opts.unlessTopUrl : C[44] || CT.C44;
    if (unlessTopUrl == null) dart.nullFailed(I[24], 74, 20, "unlessTopUrl");
    this[S.__ContentBlockerTrigger_urlFilter] = null;
    this[S.__ContentBlockerTrigger_urlFilter_isSet] = false;
    this[S.__ContentBlockerTrigger_urlFilterIsCaseSensitive] = null;
    this[S.__ContentBlockerTrigger_urlFilterIsCaseSensitive_isSet] = false;
    this[S.__ContentBlockerTrigger_resourceType] = null;
    this[S.__ContentBlockerTrigger_resourceType_isSet] = false;
    this[S.__ContentBlockerTrigger_ifDomain] = null;
    this[S.__ContentBlockerTrigger_ifDomain_isSet] = false;
    this[S.__ContentBlockerTrigger_unlessDomain] = null;
    this[S.__ContentBlockerTrigger_unlessDomain_isSet] = false;
    this[S.__ContentBlockerTrigger_loadType] = null;
    this[S.__ContentBlockerTrigger_loadType_isSet] = false;
    this[S.__ContentBlockerTrigger_ifTopUrl] = null;
    this[S.__ContentBlockerTrigger_ifTopUrl_isSet] = false;
    this[S.__ContentBlockerTrigger_unlessTopUrl] = null;
    this[S.__ContentBlockerTrigger_unlessTopUrl_isSet] = false;
    this.urlFilter = urlFilter;
    this.resourceType = resourceType;
    this.urlFilterIsCaseSensitive = urlFilterIsCaseSensitive;
    this.ifDomain = ifDomain;
    this.unlessDomain = unlessDomain;
    if (!(!(dart.test(this.ifDomain[S.$isEmpty]) || dart.test(this.unlessDomain[S.$isEmpty])) === false)) dart.assertFailed(null, I[24], 80, 12, "!(this.ifDomain.isEmpty || this.unlessDomain.isEmpty) == false");
    this.loadType = loadType;
    if (!(dart.notNull(this.loadType[S.$length]) <= 2)) dart.assertFailed(null, I[24], 82, 12, "this.loadType.length <= 2");
    this.ifTopUrl = ifTopUrl;
    this.unlessTopUrl = unlessTopUrl;
    if (!(!(dart.test(this.ifTopUrl[S.$isEmpty]) || dart.test(this.unlessTopUrl[S.$isEmpty])) === false)) dart.assertFailed(null, I[24], 85, 12, "!(this.ifTopUrl.isEmpty || this.unlessTopUrl.isEmpty) == false");
  }).prototype = content_blocker.ContentBlockerTrigger.prototype;
  dart.addTypeTests(content_blocker.ContentBlockerTrigger);
  dart.addTypeCaches(content_blocker.ContentBlockerTrigger);
  dart.setMethodSignature(content_blocker.ContentBlockerTrigger, () => ({
    __proto__: dart.getMethods(content_blocker.ContentBlockerTrigger.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(content_blocker.ContentBlockerTrigger, () => ({
    __proto__: dart.getGetters(content_blocker.ContentBlockerTrigger.__proto__),
    urlFilter: core.String,
    urlFilterIsCaseSensitive: core.bool,
    resourceType: core.List$(types.ContentBlockerTriggerResourceType),
    ifDomain: core.List$(core.String),
    unlessDomain: core.List$(core.String),
    loadType: core.List$(types.ContentBlockerTriggerLoadType),
    ifTopUrl: core.List$(core.String),
    unlessTopUrl: core.List$(core.String)
  }));
  dart.setSetterSignature(content_blocker.ContentBlockerTrigger, () => ({
    __proto__: dart.getSetters(content_blocker.ContentBlockerTrigger.__proto__),
    urlFilter: core.String,
    urlFilterIsCaseSensitive: core.bool,
    resourceType: core.List$(types.ContentBlockerTriggerResourceType),
    ifDomain: core.List$(core.String),
    unlessDomain: core.List$(core.String),
    loadType: core.List$(types.ContentBlockerTriggerLoadType),
    ifTopUrl: core.List$(core.String),
    unlessTopUrl: core.List$(core.String)
  }));
  dart.setLibraryUri(content_blocker.ContentBlockerTrigger, I[25]);
  dart.setFieldSignature(content_blocker.ContentBlockerTrigger, () => ({
    __proto__: dart.getFields(content_blocker.ContentBlockerTrigger.__proto__),
    [S.__ContentBlockerTrigger_urlFilter]: dart.fieldType(dart.nullable(core.String)),
    [S.__ContentBlockerTrigger_urlFilter_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_urlFilterIsCaseSensitive]: dart.fieldType(dart.nullable(core.bool)),
    [S.__ContentBlockerTrigger_urlFilterIsCaseSensitive_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_resourceType]: dart.fieldType(dart.nullable(core.List$(types.ContentBlockerTriggerResourceType))),
    [S.__ContentBlockerTrigger_resourceType_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_ifDomain]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [S.__ContentBlockerTrigger_ifDomain_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_unlessDomain]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [S.__ContentBlockerTrigger_unlessDomain_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_loadType]: dart.fieldType(dart.nullable(core.List$(types.ContentBlockerTriggerLoadType))),
    [S.__ContentBlockerTrigger_loadType_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_ifTopUrl]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [S.__ContentBlockerTrigger_ifTopUrl_isSet]: dart.fieldType(core.bool),
    [S.__ContentBlockerTrigger_unlessTopUrl]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [S.__ContentBlockerTrigger_unlessTopUrl_isSet]: dart.fieldType(core.bool)
  }));
  content_blocker.ContentBlockerAction = class ContentBlockerAction extends core.Object {
    get selector() {
      return this[S.selector];
    }
    set selector(value) {
      this[S.selector] = value;
    }
    get type() {
      let t14;
      return dart.test(this[S.__ContentBlockerAction_type_isSet]) ? (t14 = this[S.__ContentBlockerAction_type], t14) : dart.throw(new _internal.LateError.fieldNI("type"));
    }
    set type(t14) {
      if (t14 == null) dart.nullFailed(I[24], 159, 33, "null");
      this[S.__ContentBlockerAction_type_isSet] = true;
      this[S.__ContentBlockerAction_type] = t14;
    }
    toMap() {
      let map = new (T.IdentityMapOfString$dynamic()).from(["type", this.type.toValue(), "selector", this.selector]);
      map[S.$keys][S.$where](dart.fn(key => {
        if (key == null) dart.nullFailed(I[24], 178, 17, "key");
        return map[S.$_get](key) == null || core.List.is(map[S.$_get](key)) && core.List.as(map[S.$_get](key))[S.$length] === 0;
      }, T.StringTobool()))[S.$toList]()[S.$forEach](dart.bind(map, S.$remove));
      return map;
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[24], 187, 60, "map");
      return new content_blocker.ContentBlockerAction.new({type: dart.nullCheck(types.ContentBlockerActionType.fromValue(T.StringN().as(map[S.$_get]("type")))), selector: T.StringN().as(map[S.$_get]("selector"))});
    }
  };
  (content_blocker.ContentBlockerAction.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    if (type == null) dart.nullFailed(I[24], 166, 42, "type");
    let selector = opts && 'selector' in opts ? opts.selector : null;
    this[S.__ContentBlockerAction_type] = null;
    this[S.__ContentBlockerAction_type_isSet] = false;
    this[S.selector] = null;
    this.type = type;
    if (dart.equals(this.type, types.ContentBlockerActionType.CSS_DISPLAY_NONE)) {
      if (!(selector != null)) dart.assertFailed(null, I[24], 169, 14, "selector != null");
    }
    this.selector = selector;
  }).prototype = content_blocker.ContentBlockerAction.prototype;
  dart.addTypeTests(content_blocker.ContentBlockerAction);
  dart.addTypeCaches(content_blocker.ContentBlockerAction);
  dart.setMethodSignature(content_blocker.ContentBlockerAction, () => ({
    __proto__: dart.getMethods(content_blocker.ContentBlockerAction.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(content_blocker.ContentBlockerAction, () => ({
    __proto__: dart.getGetters(content_blocker.ContentBlockerAction.__proto__),
    type: types.ContentBlockerActionType
  }));
  dart.setSetterSignature(content_blocker.ContentBlockerAction, () => ({
    __proto__: dart.getSetters(content_blocker.ContentBlockerAction.__proto__),
    type: types.ContentBlockerActionType
  }));
  dart.setLibraryUri(content_blocker.ContentBlockerAction, I[25]);
  dart.setFieldSignature(content_blocker.ContentBlockerAction, () => ({
    __proto__: dart.getFields(content_blocker.ContentBlockerAction.__proto__),
    [S.__ContentBlockerAction_type]: dart.fieldType(dart.nullable(types.ContentBlockerActionType)),
    [S.__ContentBlockerAction_type_isSet]: dart.fieldType(core.bool),
    selector: dart.fieldType(dart.nullable(core.String))
  }));
  in_app_webview_options.IosOptions = class IosOptions extends core.Object {};
  (in_app_webview_options.IosOptions.new = function() {
    ;
  }).prototype = in_app_webview_options.IosOptions.prototype;
  dart.addTypeTests(in_app_webview_options.IosOptions);
  dart.addTypeCaches(in_app_webview_options.IosOptions);
  dart.setLibraryUri(in_app_webview_options.IosOptions, I[26]);
  in_app_webview_options.IOSInAppWebViewOptions = class IOSInAppWebViewOptions extends core.Object {
    get disallowOverScroll() {
      return this[S.disallowOverScroll];
    }
    set disallowOverScroll(value) {
      this[S.disallowOverScroll] = value;
    }
    get enableViewportScale() {
      return this[S.enableViewportScale];
    }
    set enableViewportScale(value) {
      this[S.enableViewportScale] = value;
    }
    get suppressesIncrementalRendering() {
      return this[S.suppressesIncrementalRendering];
    }
    set suppressesIncrementalRendering(value) {
      this[S.suppressesIncrementalRendering] = value;
    }
    get allowsAirPlayForMediaPlayback() {
      return this[S.allowsAirPlayForMediaPlayback];
    }
    set allowsAirPlayForMediaPlayback(value) {
      this[S.allowsAirPlayForMediaPlayback] = value;
    }
    get allowsBackForwardNavigationGestures() {
      return this[S.allowsBackForwardNavigationGestures];
    }
    set allowsBackForwardNavigationGestures(value) {
      this[S.allowsBackForwardNavigationGestures] = value;
    }
    get allowsLinkPreview() {
      return this[S.allowsLinkPreview];
    }
    set allowsLinkPreview(value) {
      this[S.allowsLinkPreview] = value;
    }
    get ignoresViewportScaleLimits() {
      return this[S.ignoresViewportScaleLimits];
    }
    set ignoresViewportScaleLimits(value) {
      this[S.ignoresViewportScaleLimits] = value;
    }
    get allowsInlineMediaPlayback() {
      return this[S.allowsInlineMediaPlayback];
    }
    set allowsInlineMediaPlayback(value) {
      this[S.allowsInlineMediaPlayback] = value;
    }
    get allowsPictureInPictureMediaPlayback() {
      return this[S.allowsPictureInPictureMediaPlayback];
    }
    set allowsPictureInPictureMediaPlayback(value) {
      this[S.allowsPictureInPictureMediaPlayback] = value;
    }
    get isFraudulentWebsiteWarningEnabled() {
      return this[S.isFraudulentWebsiteWarningEnabled];
    }
    set isFraudulentWebsiteWarningEnabled(value) {
      this[S.isFraudulentWebsiteWarningEnabled] = value;
    }
    get selectionGranularity() {
      return this[S.selectionGranularity];
    }
    set selectionGranularity(value) {
      this[S.selectionGranularity] = value;
    }
    get dataDetectorTypes() {
      return this[S.dataDetectorTypes];
    }
    set dataDetectorTypes(value) {
      this[S.dataDetectorTypes] = value;
    }
    get sharedCookiesEnabled() {
      return this[S.sharedCookiesEnabled];
    }
    set sharedCookiesEnabled(value) {
      this[S.sharedCookiesEnabled] = value;
    }
    get automaticallyAdjustsScrollIndicatorInsets() {
      return this[S.automaticallyAdjustsScrollIndicatorInsets];
    }
    set automaticallyAdjustsScrollIndicatorInsets(value) {
      this[S.automaticallyAdjustsScrollIndicatorInsets] = value;
    }
    get accessibilityIgnoresInvertColors() {
      return this[S.accessibilityIgnoresInvertColors];
    }
    set accessibilityIgnoresInvertColors(value) {
      this[S.accessibilityIgnoresInvertColors] = value;
    }
    get decelerationRate() {
      return this[S.decelerationRate];
    }
    set decelerationRate(value) {
      this[S.decelerationRate] = value;
    }
    get alwaysBounceVertical() {
      return this[S.alwaysBounceVertical];
    }
    set alwaysBounceVertical(value) {
      this[S.alwaysBounceVertical] = value;
    }
    get alwaysBounceHorizontal() {
      return this[S.alwaysBounceHorizontal];
    }
    set alwaysBounceHorizontal(value) {
      this[S.alwaysBounceHorizontal] = value;
    }
    get scrollsToTop() {
      return this[S.scrollsToTop];
    }
    set scrollsToTop(value) {
      this[S.scrollsToTop] = value;
    }
    get isPagingEnabled() {
      return this[S.isPagingEnabled];
    }
    set isPagingEnabled(value) {
      this[S.isPagingEnabled] = value;
    }
    get maximumZoomScale() {
      return this[S.maximumZoomScale];
    }
    set maximumZoomScale(value) {
      this[S.maximumZoomScale] = value;
    }
    get minimumZoomScale() {
      return this[S.minimumZoomScale];
    }
    set minimumZoomScale(value) {
      this[S.minimumZoomScale] = value;
    }
    get contentInsetAdjustmentBehavior() {
      return this[S.contentInsetAdjustmentBehavior];
    }
    set contentInsetAdjustmentBehavior(value) {
      this[S.contentInsetAdjustmentBehavior] = value;
    }
    get isDirectionalLockEnabled() {
      return this[S.isDirectionalLockEnabled];
    }
    set isDirectionalLockEnabled(value) {
      this[S.isDirectionalLockEnabled] = value;
    }
    get mediaType() {
      return this[S.mediaType];
    }
    set mediaType(value) {
      this[S.mediaType] = value;
    }
    get pageZoom() {
      return this[S.pageZoom];
    }
    set pageZoom(value) {
      this[S.pageZoom] = value;
    }
    get limitsNavigationsToAppBoundDomains() {
      return this[S.limitsNavigationsToAppBoundDomains];
    }
    set limitsNavigationsToAppBoundDomains(value) {
      this[S.limitsNavigationsToAppBoundDomains] = value;
    }
    get useOnNavigationResponse() {
      return this[S.useOnNavigationResponse];
    }
    set useOnNavigationResponse(value) {
      this[S.useOnNavigationResponse] = value;
    }
    get applePayAPIEnabled() {
      return this[S.applePayAPIEnabled];
    }
    set applePayAPIEnabled(value) {
      this[S.applePayAPIEnabled] = value;
    }
    get allowingReadAccessTo() {
      return this[S.allowingReadAccessTo];
    }
    set allowingReadAccessTo(value) {
      this[S.allowingReadAccessTo] = value;
    }
    get disableLongPressContextMenuOnLinks() {
      return this[S.disableLongPressContextMenuOnLinks];
    }
    set disableLongPressContextMenuOnLinks(value) {
      this[S.disableLongPressContextMenuOnLinks] = value;
    }
    toMap() {
      let dataDetectorTypesList = T.JSArrayOfString().of([]);
      this.dataDetectorTypes[S.$forEach](dart.fn(dataDetectorType => {
        if (dataDetectorType == null) dart.nullFailed(I[27], 266, 32, "dataDetectorType");
        dataDetectorTypesList[S.$add](dataDetectorType.toValue());
      }, T.IOSWKDataDetectorTypesTovoid()));
      return new (T.IdentityMapOfString$dynamic()).from(["disallowOverScroll", this.disallowOverScroll, "enableViewportScale", this.enableViewportScale, "suppressesIncrementalRendering", this.suppressesIncrementalRendering, "allowsAirPlayForMediaPlayback", this.allowsAirPlayForMediaPlayback, "allowsBackForwardNavigationGestures", this.allowsBackForwardNavigationGestures, "allowsLinkPreview", this.allowsLinkPreview, "ignoresViewportScaleLimits", this.ignoresViewportScaleLimits, "allowsInlineMediaPlayback", this.allowsInlineMediaPlayback, "allowsPictureInPictureMediaPlayback", this.allowsPictureInPictureMediaPlayback, "isFraudulentWebsiteWarningEnabled", this.isFraudulentWebsiteWarningEnabled, "selectionGranularity", this.selectionGranularity.toValue(), "dataDetectorTypes", dataDetectorTypesList, "sharedCookiesEnabled", this.sharedCookiesEnabled, "automaticallyAdjustsScrollIndicatorInsets", this.automaticallyAdjustsScrollIndicatorInsets, "accessibilityIgnoresInvertColors", this.accessibilityIgnoresInvertColors, "decelerationRate", this.decelerationRate.toValue(), "alwaysBounceVertical", this.alwaysBounceVertical, "alwaysBounceHorizontal", this.alwaysBounceHorizontal, "scrollsToTop", this.scrollsToTop, "isPagingEnabled", this.isPagingEnabled, "maximumZoomScale", this.maximumZoomScale, "minimumZoomScale", this.minimumZoomScale, "contentInsetAdjustmentBehavior", this.contentInsetAdjustmentBehavior.toValue(), "isDirectionalLockEnabled", this.isDirectionalLockEnabled, "mediaType", this.mediaType, "pageZoom", this.pageZoom, "limitsNavigationsToAppBoundDomains", this.limitsNavigationsToAppBoundDomains, "useOnNavigationResponse", this.useOnNavigationResponse, "applePayAPIEnabled", this.applePayAPIEnabled, "allowingReadAccessTo", dart.toString(this.allowingReadAccessTo), "disableLongPressContextMenuOnLinks", this.disableLongPressContextMenuOnLinks]);
    }
    static fromMap(map) {
      let t15;
      if (map == null) dart.nullFailed(I[27], 309, 62, "map");
      let dataDetectorTypes = T.JSArrayOfIOSWKDataDetectorTypes().of([]);
      let dataDetectorTypesList = T.ListOfString().from(core.Iterable.as((t15 = map[S.$_get]("dataDetectorTypes"), t15 == null ? [] : t15)));
      dataDetectorTypesList[S.$forEach](dart.fn(dataDetectorTypeValue => {
        if (dataDetectorTypeValue == null) dart.nullFailed(I[27], 313, 36, "dataDetectorTypeValue");
        let dataDetectorType = types.IOSWKDataDetectorTypes.fromValue(dataDetectorTypeValue);
        if (dataDetectorType != null) {
          dataDetectorTypes[S.$add](dataDetectorType);
        }
      }, T.StringTovoid()));
      let options = new in_app_webview_options.IOSInAppWebViewOptions.new();
      options.disallowOverScroll = core.bool.as(map[S.$_get]("disallowOverScroll"));
      options.enableViewportScale = core.bool.as(map[S.$_get]("enableViewportScale"));
      options.suppressesIncrementalRendering = core.bool.as(map[S.$_get]("suppressesIncrementalRendering"));
      options.allowsAirPlayForMediaPlayback = core.bool.as(map[S.$_get]("allowsAirPlayForMediaPlayback"));
      options.allowsBackForwardNavigationGestures = core.bool.as(map[S.$_get]("allowsBackForwardNavigationGestures"));
      options.allowsLinkPreview = core.bool.as(map[S.$_get]("allowsLinkPreview"));
      options.ignoresViewportScaleLimits = core.bool.as(map[S.$_get]("ignoresViewportScaleLimits"));
      options.allowsInlineMediaPlayback = core.bool.as(map[S.$_get]("allowsInlineMediaPlayback"));
      options.allowsPictureInPictureMediaPlayback = core.bool.as(map[S.$_get]("allowsPictureInPictureMediaPlayback"));
      options.isFraudulentWebsiteWarningEnabled = core.bool.as(map[S.$_get]("isFraudulentWebsiteWarningEnabled"));
      options.selectionGranularity = dart.nullCheck(types.IOSWKSelectionGranularity.fromValue(T.intN().as(map[S.$_get]("selectionGranularity"))));
      options.dataDetectorTypes = dataDetectorTypes;
      options.sharedCookiesEnabled = core.bool.as(map[S.$_get]("sharedCookiesEnabled"));
      options.automaticallyAdjustsScrollIndicatorInsets = core.bool.as(map[S.$_get]("automaticallyAdjustsScrollIndicatorInsets"));
      options.accessibilityIgnoresInvertColors = core.bool.as(map[S.$_get]("accessibilityIgnoresInvertColors"));
      options.decelerationRate = dart.nullCheck(types.IOSUIScrollViewDecelerationRate.fromValue(T.StringN().as(map[S.$_get]("decelerationRate"))));
      options.alwaysBounceVertical = core.bool.as(map[S.$_get]("alwaysBounceVertical"));
      options.alwaysBounceHorizontal = core.bool.as(map[S.$_get]("alwaysBounceHorizontal"));
      options.scrollsToTop = core.bool.as(map[S.$_get]("scrollsToTop"));
      options.isPagingEnabled = core.bool.as(map[S.$_get]("isPagingEnabled"));
      options.maximumZoomScale = core.double.as(map[S.$_get]("maximumZoomScale"));
      options.minimumZoomScale = core.double.as(map[S.$_get]("minimumZoomScale"));
      options.contentInsetAdjustmentBehavior = dart.nullCheck(types.IOSUIScrollViewContentInsetAdjustmentBehavior.fromValue(T.intN().as(map[S.$_get]("contentInsetAdjustmentBehavior"))));
      options.isDirectionalLockEnabled = core.bool.as(map[S.$_get]("isDirectionalLockEnabled"));
      options.mediaType = T.StringN().as(map[S.$_get]("mediaType"));
      options.pageZoom = core.double.as(map[S.$_get]("pageZoom"));
      options.limitsNavigationsToAppBoundDomains = core.bool.as(map[S.$_get]("limitsNavigationsToAppBoundDomains"));
      options.useOnNavigationResponse = core.bool.as(map[S.$_get]("useOnNavigationResponse"));
      options.applePayAPIEnabled = core.bool.as(map[S.$_get]("applePayAPIEnabled"));
      options.allowingReadAccessTo = map[S.$_get]("allowingReadAccessTo") != null ? core.Uri.parse(core.String.as(map[S.$_get]("allowingReadAccessTo"))) : null;
      options.disableLongPressContextMenuOnLinks = core.bool.as(map[S.$_get]("disableLongPressContextMenuOnLinks"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_webview_options.IOSInAppWebViewOptions.fromMap(this.toMap());
    }
  };
  (in_app_webview_options.IOSInAppWebViewOptions.new = function(opts) {
    let disallowOverScroll = opts && 'disallowOverScroll' in opts ? opts.disallowOverScroll : false;
    if (disallowOverScroll == null) dart.nullFailed(I[27], 227, 13, "disallowOverScroll");
    let enableViewportScale = opts && 'enableViewportScale' in opts ? opts.enableViewportScale : false;
    if (enableViewportScale == null) dart.nullFailed(I[27], 228, 12, "enableViewportScale");
    let suppressesIncrementalRendering = opts && 'suppressesIncrementalRendering' in opts ? opts.suppressesIncrementalRendering : false;
    if (suppressesIncrementalRendering == null) dart.nullFailed(I[27], 229, 12, "suppressesIncrementalRendering");
    let allowsAirPlayForMediaPlayback = opts && 'allowsAirPlayForMediaPlayback' in opts ? opts.allowsAirPlayForMediaPlayback : true;
    if (allowsAirPlayForMediaPlayback == null) dart.nullFailed(I[27], 230, 12, "allowsAirPlayForMediaPlayback");
    let allowsBackForwardNavigationGestures = opts && 'allowsBackForwardNavigationGestures' in opts ? opts.allowsBackForwardNavigationGestures : true;
    if (allowsBackForwardNavigationGestures == null) dart.nullFailed(I[27], 231, 12, "allowsBackForwardNavigationGestures");
    let allowsLinkPreview = opts && 'allowsLinkPreview' in opts ? opts.allowsLinkPreview : true;
    if (allowsLinkPreview == null) dart.nullFailed(I[27], 232, 12, "allowsLinkPreview");
    let ignoresViewportScaleLimits = opts && 'ignoresViewportScaleLimits' in opts ? opts.ignoresViewportScaleLimits : false;
    if (ignoresViewportScaleLimits == null) dart.nullFailed(I[27], 233, 12, "ignoresViewportScaleLimits");
    let allowsInlineMediaPlayback = opts && 'allowsInlineMediaPlayback' in opts ? opts.allowsInlineMediaPlayback : false;
    if (allowsInlineMediaPlayback == null) dart.nullFailed(I[27], 234, 12, "allowsInlineMediaPlayback");
    let allowsPictureInPictureMediaPlayback = opts && 'allowsPictureInPictureMediaPlayback' in opts ? opts.allowsPictureInPictureMediaPlayback : true;
    if (allowsPictureInPictureMediaPlayback == null) dart.nullFailed(I[27], 235, 12, "allowsPictureInPictureMediaPlayback");
    let isFraudulentWebsiteWarningEnabled = opts && 'isFraudulentWebsiteWarningEnabled' in opts ? opts.isFraudulentWebsiteWarningEnabled : true;
    if (isFraudulentWebsiteWarningEnabled == null) dart.nullFailed(I[27], 236, 12, "isFraudulentWebsiteWarningEnabled");
    let selectionGranularity = opts && 'selectionGranularity' in opts ? opts.selectionGranularity : C[46] || CT.C46;
    if (selectionGranularity == null) dart.nullFailed(I[27], 237, 12, "selectionGranularity");
    let dataDetectorTypes = opts && 'dataDetectorTypes' in opts ? opts.dataDetectorTypes : C[47] || CT.C47;
    if (dataDetectorTypes == null) dart.nullFailed(I[27], 238, 12, "dataDetectorTypes");
    let sharedCookiesEnabled = opts && 'sharedCookiesEnabled' in opts ? opts.sharedCookiesEnabled : false;
    if (sharedCookiesEnabled == null) dart.nullFailed(I[27], 239, 12, "sharedCookiesEnabled");
    let automaticallyAdjustsScrollIndicatorInsets = opts && 'automaticallyAdjustsScrollIndicatorInsets' in opts ? opts.automaticallyAdjustsScrollIndicatorInsets : false;
    if (automaticallyAdjustsScrollIndicatorInsets == null) dart.nullFailed(I[27], 240, 12, "automaticallyAdjustsScrollIndicatorInsets");
    let accessibilityIgnoresInvertColors = opts && 'accessibilityIgnoresInvertColors' in opts ? opts.accessibilityIgnoresInvertColors : false;
    if (accessibilityIgnoresInvertColors == null) dart.nullFailed(I[27], 241, 12, "accessibilityIgnoresInvertColors");
    let decelerationRate = opts && 'decelerationRate' in opts ? opts.decelerationRate : C[49] || CT.C49;
    if (decelerationRate == null) dart.nullFailed(I[27], 242, 12, "decelerationRate");
    let alwaysBounceVertical = opts && 'alwaysBounceVertical' in opts ? opts.alwaysBounceVertical : false;
    if (alwaysBounceVertical == null) dart.nullFailed(I[27], 243, 12, "alwaysBounceVertical");
    let alwaysBounceHorizontal = opts && 'alwaysBounceHorizontal' in opts ? opts.alwaysBounceHorizontal : false;
    if (alwaysBounceHorizontal == null) dart.nullFailed(I[27], 244, 12, "alwaysBounceHorizontal");
    let scrollsToTop = opts && 'scrollsToTop' in opts ? opts.scrollsToTop : true;
    if (scrollsToTop == null) dart.nullFailed(I[27], 245, 12, "scrollsToTop");
    let isPagingEnabled = opts && 'isPagingEnabled' in opts ? opts.isPagingEnabled : false;
    if (isPagingEnabled == null) dart.nullFailed(I[27], 246, 12, "isPagingEnabled");
    let maximumZoomScale = opts && 'maximumZoomScale' in opts ? opts.maximumZoomScale : 1;
    if (maximumZoomScale == null) dart.nullFailed(I[27], 247, 12, "maximumZoomScale");
    let minimumZoomScale = opts && 'minimumZoomScale' in opts ? opts.minimumZoomScale : 1;
    if (minimumZoomScale == null) dart.nullFailed(I[27], 248, 12, "minimumZoomScale");
    let contentInsetAdjustmentBehavior = opts && 'contentInsetAdjustmentBehavior' in opts ? opts.contentInsetAdjustmentBehavior : C[50] || CT.C50;
    if (contentInsetAdjustmentBehavior == null) dart.nullFailed(I[27], 249, 12, "contentInsetAdjustmentBehavior");
    let isDirectionalLockEnabled = opts && 'isDirectionalLockEnabled' in opts ? opts.isDirectionalLockEnabled : false;
    if (isDirectionalLockEnabled == null) dart.nullFailed(I[27], 251, 12, "isDirectionalLockEnabled");
    let mediaType = opts && 'mediaType' in opts ? opts.mediaType : null;
    let pageZoom = opts && 'pageZoom' in opts ? opts.pageZoom : 1;
    if (pageZoom == null) dart.nullFailed(I[27], 253, 12, "pageZoom");
    let limitsNavigationsToAppBoundDomains = opts && 'limitsNavigationsToAppBoundDomains' in opts ? opts.limitsNavigationsToAppBoundDomains : false;
    if (limitsNavigationsToAppBoundDomains == null) dart.nullFailed(I[27], 254, 12, "limitsNavigationsToAppBoundDomains");
    let useOnNavigationResponse = opts && 'useOnNavigationResponse' in opts ? opts.useOnNavigationResponse : false;
    if (useOnNavigationResponse == null) dart.nullFailed(I[27], 255, 12, "useOnNavigationResponse");
    let applePayAPIEnabled = opts && 'applePayAPIEnabled' in opts ? opts.applePayAPIEnabled : false;
    if (applePayAPIEnabled == null) dart.nullFailed(I[27], 256, 12, "applePayAPIEnabled");
    let allowingReadAccessTo = opts && 'allowingReadAccessTo' in opts ? opts.allowingReadAccessTo : null;
    let disableLongPressContextMenuOnLinks = opts && 'disableLongPressContextMenuOnLinks' in opts ? opts.disableLongPressContextMenuOnLinks : false;
    if (disableLongPressContextMenuOnLinks == null) dart.nullFailed(I[27], 258, 12, "disableLongPressContextMenuOnLinks");
    this[S.disallowOverScroll] = disallowOverScroll;
    this[S.enableViewportScale] = enableViewportScale;
    this[S.suppressesIncrementalRendering] = suppressesIncrementalRendering;
    this[S.allowsAirPlayForMediaPlayback] = allowsAirPlayForMediaPlayback;
    this[S.allowsBackForwardNavigationGestures] = allowsBackForwardNavigationGestures;
    this[S.allowsLinkPreview] = allowsLinkPreview;
    this[S.ignoresViewportScaleLimits] = ignoresViewportScaleLimits;
    this[S.allowsInlineMediaPlayback] = allowsInlineMediaPlayback;
    this[S.allowsPictureInPictureMediaPlayback] = allowsPictureInPictureMediaPlayback;
    this[S.isFraudulentWebsiteWarningEnabled] = isFraudulentWebsiteWarningEnabled;
    this[S.selectionGranularity] = selectionGranularity;
    this[S.dataDetectorTypes] = dataDetectorTypes;
    this[S.sharedCookiesEnabled] = sharedCookiesEnabled;
    this[S.automaticallyAdjustsScrollIndicatorInsets] = automaticallyAdjustsScrollIndicatorInsets;
    this[S.accessibilityIgnoresInvertColors] = accessibilityIgnoresInvertColors;
    this[S.decelerationRate] = decelerationRate;
    this[S.alwaysBounceVertical] = alwaysBounceVertical;
    this[S.alwaysBounceHorizontal] = alwaysBounceHorizontal;
    this[S.scrollsToTop] = scrollsToTop;
    this[S.isPagingEnabled] = isPagingEnabled;
    this[S.maximumZoomScale] = maximumZoomScale;
    this[S.minimumZoomScale] = minimumZoomScale;
    this[S.contentInsetAdjustmentBehavior] = contentInsetAdjustmentBehavior;
    this[S.isDirectionalLockEnabled] = isDirectionalLockEnabled;
    this[S.mediaType] = mediaType;
    this[S.pageZoom] = pageZoom;
    this[S.limitsNavigationsToAppBoundDomains] = limitsNavigationsToAppBoundDomains;
    this[S.useOnNavigationResponse] = useOnNavigationResponse;
    this[S.applePayAPIEnabled] = applePayAPIEnabled;
    this[S.allowingReadAccessTo] = allowingReadAccessTo;
    this[S.disableLongPressContextMenuOnLinks] = disableLongPressContextMenuOnLinks;
    if (!(this.allowingReadAccessTo == null || dart.test(dart.nullCheck(this.allowingReadAccessTo).isScheme("file")))) dart.assertFailed(null, I[27], 260, 9, "allowingReadAccessTo == null || allowingReadAccessTo!.isScheme(\"file\")");
  }).prototype = in_app_webview_options.IOSInAppWebViewOptions.prototype;
  dart.addTypeTests(in_app_webview_options.IOSInAppWebViewOptions);
  dart.addTypeCaches(in_app_webview_options.IOSInAppWebViewOptions);
  in_app_webview_options.IOSInAppWebViewOptions[dart.implements] = () => [in_app_webview_options$0.WebViewOptions, in_app_browser_options$0.BrowserOptions, in_app_webview_options.IosOptions];
  dart.setMethodSignature(in_app_webview_options.IOSInAppWebViewOptions, () => ({
    __proto__: dart.getMethods(in_app_webview_options.IOSInAppWebViewOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_webview_options.IOSInAppWebViewOptions, [])
  }));
  dart.setLibraryUri(in_app_webview_options.IOSInAppWebViewOptions, I[26]);
  dart.setFieldSignature(in_app_webview_options.IOSInAppWebViewOptions, () => ({
    __proto__: dart.getFields(in_app_webview_options.IOSInAppWebViewOptions.__proto__),
    disallowOverScroll: dart.fieldType(core.bool),
    enableViewportScale: dart.fieldType(core.bool),
    suppressesIncrementalRendering: dart.fieldType(core.bool),
    allowsAirPlayForMediaPlayback: dart.fieldType(core.bool),
    allowsBackForwardNavigationGestures: dart.fieldType(core.bool),
    allowsLinkPreview: dart.fieldType(core.bool),
    ignoresViewportScaleLimits: dart.fieldType(core.bool),
    allowsInlineMediaPlayback: dart.fieldType(core.bool),
    allowsPictureInPictureMediaPlayback: dart.fieldType(core.bool),
    isFraudulentWebsiteWarningEnabled: dart.fieldType(core.bool),
    selectionGranularity: dart.fieldType(types.IOSWKSelectionGranularity),
    dataDetectorTypes: dart.fieldType(core.List$(types.IOSWKDataDetectorTypes)),
    sharedCookiesEnabled: dart.fieldType(core.bool),
    automaticallyAdjustsScrollIndicatorInsets: dart.fieldType(core.bool),
    accessibilityIgnoresInvertColors: dart.fieldType(core.bool),
    decelerationRate: dart.fieldType(types.IOSUIScrollViewDecelerationRate),
    alwaysBounceVertical: dart.fieldType(core.bool),
    alwaysBounceHorizontal: dart.fieldType(core.bool),
    scrollsToTop: dart.fieldType(core.bool),
    isPagingEnabled: dart.fieldType(core.bool),
    maximumZoomScale: dart.fieldType(core.double),
    minimumZoomScale: dart.fieldType(core.double),
    contentInsetAdjustmentBehavior: dart.fieldType(types.IOSUIScrollViewContentInsetAdjustmentBehavior),
    isDirectionalLockEnabled: dart.fieldType(core.bool),
    mediaType: dart.fieldType(dart.nullable(core.String)),
    pageZoom: dart.fieldType(core.double),
    limitsNavigationsToAppBoundDomains: dart.fieldType(core.bool),
    useOnNavigationResponse: dart.fieldType(core.bool),
    applePayAPIEnabled: dart.fieldType(core.bool),
    allowingReadAccessTo: dart.fieldType(dart.nullable(core.Uri)),
    disableLongPressContextMenuOnLinks: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(in_app_webview_options.IOSInAppWebViewOptions, ['toString']);
  in_app_browser_options.IOSInAppBrowserOptions = class IOSInAppBrowserOptions extends core.Object {
    get toolbarTopTranslucent() {
      return this[S.toolbarTopTranslucent];
    }
    set toolbarTopTranslucent(value) {
      this[S.toolbarTopTranslucent] = value;
    }
    get toolbarTopBarTintColor() {
      return this[S.toolbarTopBarTintColor];
    }
    set toolbarTopBarTintColor(value) {
      this[S.toolbarTopBarTintColor] = value;
    }
    get toolbarTopTintColor() {
      return this[S.toolbarTopTintColor];
    }
    set toolbarTopTintColor(value) {
      this[S.toolbarTopTintColor] = value;
    }
    get hideToolbarBottom() {
      return this[S.hideToolbarBottom];
    }
    set hideToolbarBottom(value) {
      this[S.hideToolbarBottom] = value;
    }
    get toolbarBottomBackgroundColor() {
      return this[S.toolbarBottomBackgroundColor];
    }
    set toolbarBottomBackgroundColor(value) {
      this[S.toolbarBottomBackgroundColor] = value;
    }
    get toolbarBottomTintColor() {
      return this[S.toolbarBottomTintColor];
    }
    set toolbarBottomTintColor(value) {
      this[S.toolbarBottomTintColor] = value;
    }
    get toolbarBottomTranslucent() {
      return this[S.toolbarBottomTranslucent];
    }
    set toolbarBottomTranslucent(value) {
      this[S.toolbarBottomTranslucent] = value;
    }
    get closeButtonCaption() {
      return this[S.closeButtonCaption];
    }
    set closeButtonCaption(value) {
      this[S.closeButtonCaption] = value;
    }
    get closeButtonColor() {
      return this[S.closeButtonColor];
    }
    set closeButtonColor(value) {
      this[S.closeButtonColor] = value;
    }
    get presentationStyle() {
      return this[S.presentationStyle$1];
    }
    set presentationStyle(value) {
      this[S.presentationStyle$1] = value;
    }
    get transitionStyle() {
      return this[S.transitionStyle$1];
    }
    set transitionStyle(value) {
      this[S.transitionStyle$1] = value;
    }
    toMap() {
      let t15, t15$, t15$0, t15$1;
      return new (T.IdentityMapOfString$dynamic()).from(["toolbarTopTranslucent", this.toolbarTopTranslucent, "toolbarTopTintColor", (t15 = this.toolbarTopTintColor, t15 == null ? null : util['HexColor|toHex'](t15)), "hideToolbarBottom", this.hideToolbarBottom, "toolbarBottomBackgroundColor", (t15$ = this.toolbarBottomBackgroundColor, t15$ == null ? null : util['HexColor|toHex'](t15$)), "toolbarBottomTintColor", (t15$0 = this.toolbarBottomTintColor, t15$0 == null ? null : util['HexColor|toHex'](t15$0)), "toolbarBottomTranslucent", this.toolbarBottomTranslucent, "closeButtonCaption", this.closeButtonCaption, "closeButtonColor", (t15$1 = this.closeButtonColor, t15$1 == null ? null : util['HexColor|toHex'](t15$1)), "presentationStyle", this.presentationStyle.toValue(), "transitionStyle", this.transitionStyle.toValue()]);
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[28], 74, 62, "map");
      let options = new in_app_browser_options.IOSInAppBrowserOptions.new();
      options.toolbarTopTranslucent = core.bool.as(map[S.$_get]("toolbarTopTranslucent"));
      options.toolbarTopTintColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("toolbarTopTintColor")));
      options.hideToolbarBottom = core.bool.as(map[S.$_get]("hideToolbarBottom"));
      options.toolbarBottomBackgroundColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("toolbarBottomBackgroundColor")));
      options.toolbarBottomTintColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("toolbarBottomTintColor")));
      options.toolbarBottomTranslucent = core.bool.as(map[S.$_get]("toolbarBottomTranslucent"));
      options.closeButtonCaption = T.StringN().as(map[S.$_get]("closeButtonCaption"));
      options.closeButtonColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("closeButtonColor")));
      options.presentationStyle = dart.nullCheck(types.IOSUIModalPresentationStyle.fromValue(T.intN().as(map[S.$_get]("presentationStyle"))));
      options.transitionStyle = dart.nullCheck(types.IOSUIModalTransitionStyle.fromValue(T.intN().as(map[S.$_get]("transitionStyle"))));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_browser_options.IOSInAppBrowserOptions.fromMap(this.toMap());
    }
  };
  (in_app_browser_options.IOSInAppBrowserOptions.new = function(opts) {
    let toolbarTopTranslucent = opts && 'toolbarTopTranslucent' in opts ? opts.toolbarTopTranslucent : true;
    if (toolbarTopTranslucent == null) dart.nullFailed(I[28], 47, 13, "toolbarTopTranslucent");
    let toolbarTopTintColor = opts && 'toolbarTopTintColor' in opts ? opts.toolbarTopTintColor : null;
    let hideToolbarBottom = opts && 'hideToolbarBottom' in opts ? opts.hideToolbarBottom : false;
    if (hideToolbarBottom == null) dart.nullFailed(I[28], 49, 12, "hideToolbarBottom");
    let toolbarBottomBackgroundColor = opts && 'toolbarBottomBackgroundColor' in opts ? opts.toolbarBottomBackgroundColor : null;
    let toolbarBottomTintColor = opts && 'toolbarBottomTintColor' in opts ? opts.toolbarBottomTintColor : null;
    let toolbarBottomTranslucent = opts && 'toolbarBottomTranslucent' in opts ? opts.toolbarBottomTranslucent : true;
    if (toolbarBottomTranslucent == null) dart.nullFailed(I[28], 52, 12, "toolbarBottomTranslucent");
    let closeButtonCaption = opts && 'closeButtonCaption' in opts ? opts.closeButtonCaption : null;
    let closeButtonColor = opts && 'closeButtonColor' in opts ? opts.closeButtonColor : null;
    let presentationStyle = opts && 'presentationStyle' in opts ? opts.presentationStyle : C[7] || CT.C7;
    if (presentationStyle == null) dart.nullFailed(I[28], 55, 12, "presentationStyle");
    let transitionStyle = opts && 'transitionStyle' in opts ? opts.transitionStyle : C[8] || CT.C8;
    if (transitionStyle == null) dart.nullFailed(I[28], 56, 12, "transitionStyle");
    this[S.toolbarTopBarTintColor] = null;
    this[S.toolbarTopTranslucent] = toolbarTopTranslucent;
    this[S.toolbarTopTintColor] = toolbarTopTintColor;
    this[S.hideToolbarBottom] = hideToolbarBottom;
    this[S.toolbarBottomBackgroundColor] = toolbarBottomBackgroundColor;
    this[S.toolbarBottomTintColor] = toolbarBottomTintColor;
    this[S.toolbarBottomTranslucent] = toolbarBottomTranslucent;
    this[S.closeButtonCaption] = closeButtonCaption;
    this[S.closeButtonColor] = closeButtonColor;
    this[S.presentationStyle$1] = presentationStyle;
    this[S.transitionStyle$1] = transitionStyle;
    ;
  }).prototype = in_app_browser_options.IOSInAppBrowserOptions.prototype;
  dart.addTypeTests(in_app_browser_options.IOSInAppBrowserOptions);
  dart.addTypeCaches(in_app_browser_options.IOSInAppBrowserOptions);
  in_app_browser_options.IOSInAppBrowserOptions[dart.implements] = () => [in_app_browser_options$0.BrowserOptions, in_app_webview_options.IosOptions];
  dart.setMethodSignature(in_app_browser_options.IOSInAppBrowserOptions, () => ({
    __proto__: dart.getMethods(in_app_browser_options.IOSInAppBrowserOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_browser_options.IOSInAppBrowserOptions, [])
  }));
  dart.setLibraryUri(in_app_browser_options.IOSInAppBrowserOptions, I[29]);
  dart.setFieldSignature(in_app_browser_options.IOSInAppBrowserOptions, () => ({
    __proto__: dart.getFields(in_app_browser_options.IOSInAppBrowserOptions.__proto__),
    toolbarTopTranslucent: dart.fieldType(core.bool),
    toolbarTopBarTintColor: dart.fieldType(dart.nullable(ui.Color)),
    toolbarTopTintColor: dart.fieldType(dart.nullable(ui.Color)),
    hideToolbarBottom: dart.fieldType(core.bool),
    toolbarBottomBackgroundColor: dart.fieldType(dart.nullable(ui.Color)),
    toolbarBottomTintColor: dart.fieldType(dart.nullable(ui.Color)),
    toolbarBottomTranslucent: dart.fieldType(core.bool),
    closeButtonCaption: dart.fieldType(dart.nullable(core.String)),
    closeButtonColor: dart.fieldType(dart.nullable(ui.Color)),
    presentationStyle: dart.fieldType(types.IOSUIModalPresentationStyle),
    transitionStyle: dart.fieldType(types.IOSUIModalTransitionStyle)
  }));
  dart.defineExtensionMethods(in_app_browser_options.IOSInAppBrowserOptions, ['toString']);
  in_app_browser_options$.AndroidInAppBrowserOptions = class AndroidInAppBrowserOptions extends core.Object {
    get hideTitleBar() {
      return this[S.hideTitleBar];
    }
    set hideTitleBar(value) {
      this[S.hideTitleBar] = value;
    }
    get toolbarTopFixedTitle() {
      return this[S.toolbarTopFixedTitle];
    }
    set toolbarTopFixedTitle(value) {
      this[S.toolbarTopFixedTitle] = value;
    }
    get closeOnCannotGoBack() {
      return this[S.closeOnCannotGoBack];
    }
    set closeOnCannotGoBack(value) {
      this[S.closeOnCannotGoBack] = value;
    }
    get allowGoBackWithBackButton() {
      return this[S.allowGoBackWithBackButton];
    }
    set allowGoBackWithBackButton(value) {
      this[S.allowGoBackWithBackButton] = value;
    }
    get shouldCloseOnBackButtonPressed() {
      return this[S.shouldCloseOnBackButtonPressed];
    }
    set shouldCloseOnBackButtonPressed(value) {
      this[S.shouldCloseOnBackButtonPressed] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["hideTitleBar", this.hideTitleBar, "toolbarTopFixedTitle", this.toolbarTopFixedTitle, "closeOnCannotGoBack", this.closeOnCannotGoBack, "allowGoBackWithBackButton", this.allowGoBackWithBackButton, "shouldCloseOnBackButtonPressed", this.shouldCloseOnBackButtonPressed]);
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[30], 41, 66, "map");
      let options = new in_app_browser_options$.AndroidInAppBrowserOptions.new();
      options.hideTitleBar = core.bool.as(map[S.$_get]("hideTitleBar"));
      options.toolbarTopFixedTitle = T.StringN().as(map[S.$_get]("toolbarTopFixedTitle"));
      options.closeOnCannotGoBack = core.bool.as(map[S.$_get]("closeOnCannotGoBack"));
      options.allowGoBackWithBackButton = core.bool.as(map[S.$_get]("allowGoBackWithBackButton"));
      options.shouldCloseOnBackButtonPressed = core.bool.as(map[S.$_get]("shouldCloseOnBackButtonPressed"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_browser_options$.AndroidInAppBrowserOptions.fromMap(this.toMap());
    }
  };
  (in_app_browser_options$.AndroidInAppBrowserOptions.new = function(opts) {
    let hideTitleBar = opts && 'hideTitleBar' in opts ? opts.hideTitleBar : false;
    if (hideTitleBar == null) dart.nullFailed(I[30], 24, 13, "hideTitleBar");
    let toolbarTopFixedTitle = opts && 'toolbarTopFixedTitle' in opts ? opts.toolbarTopFixedTitle : null;
    let closeOnCannotGoBack = opts && 'closeOnCannotGoBack' in opts ? opts.closeOnCannotGoBack : true;
    if (closeOnCannotGoBack == null) dart.nullFailed(I[30], 26, 12, "closeOnCannotGoBack");
    let allowGoBackWithBackButton = opts && 'allowGoBackWithBackButton' in opts ? opts.allowGoBackWithBackButton : true;
    if (allowGoBackWithBackButton == null) dart.nullFailed(I[30], 27, 12, "allowGoBackWithBackButton");
    let shouldCloseOnBackButtonPressed = opts && 'shouldCloseOnBackButtonPressed' in opts ? opts.shouldCloseOnBackButtonPressed : false;
    if (shouldCloseOnBackButtonPressed == null) dart.nullFailed(I[30], 28, 12, "shouldCloseOnBackButtonPressed");
    this[S.hideTitleBar] = hideTitleBar;
    this[S.toolbarTopFixedTitle] = toolbarTopFixedTitle;
    this[S.closeOnCannotGoBack] = closeOnCannotGoBack;
    this[S.allowGoBackWithBackButton] = allowGoBackWithBackButton;
    this[S.shouldCloseOnBackButtonPressed] = shouldCloseOnBackButtonPressed;
    ;
  }).prototype = in_app_browser_options$.AndroidInAppBrowserOptions.prototype;
  dart.addTypeTests(in_app_browser_options$.AndroidInAppBrowserOptions);
  dart.addTypeCaches(in_app_browser_options$.AndroidInAppBrowserOptions);
  in_app_browser_options$.AndroidInAppBrowserOptions[dart.implements] = () => [in_app_browser_options$0.BrowserOptions, in_app_webview_options$.AndroidOptions];
  dart.setMethodSignature(in_app_browser_options$.AndroidInAppBrowserOptions, () => ({
    __proto__: dart.getMethods(in_app_browser_options$.AndroidInAppBrowserOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_browser_options$.AndroidInAppBrowserOptions, [])
  }));
  dart.setLibraryUri(in_app_browser_options$.AndroidInAppBrowserOptions, I[31]);
  dart.setFieldSignature(in_app_browser_options$.AndroidInAppBrowserOptions, () => ({
    __proto__: dart.getFields(in_app_browser_options$.AndroidInAppBrowserOptions.__proto__),
    hideTitleBar: dart.fieldType(core.bool),
    toolbarTopFixedTitle: dart.fieldType(dart.nullable(core.String)),
    closeOnCannotGoBack: dart.fieldType(core.bool),
    allowGoBackWithBackButton: dart.fieldType(core.bool),
    shouldCloseOnBackButtonPressed: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(in_app_browser_options$.AndroidInAppBrowserOptions, ['toString']);
  in_app_browser_options$0.BrowserOptions = class BrowserOptions extends core.Object {
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).new();
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[32], 20, 54, "map");
      return new in_app_browser_options$0.BrowserOptions.new();
    }
    copy() {
      return in_app_browser_options$0.BrowserOptions.fromMap(this.toMap());
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (in_app_browser_options$0.BrowserOptions.new = function() {
    ;
  }).prototype = in_app_browser_options$0.BrowserOptions.prototype;
  dart.addTypeTests(in_app_browser_options$0.BrowserOptions);
  dart.addTypeCaches(in_app_browser_options$0.BrowserOptions);
  dart.setMethodSignature(in_app_browser_options$0.BrowserOptions, () => ({
    __proto__: dart.getMethods(in_app_browser_options$0.BrowserOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_browser_options$0.BrowserOptions, []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(in_app_browser_options$0.BrowserOptions, I[33]);
  dart.defineExtensionMethods(in_app_browser_options$0.BrowserOptions, ['toString']);
  in_app_browser_options$0.InAppBrowserClassOptions = class InAppBrowserClassOptions extends core.Object {
    get crossPlatform() {
      let t15;
      return dart.test(this[S.__InAppBrowserClassOptions_crossPlatform_isSet]) ? (t15 = this[S.__InAppBrowserClassOptions_crossPlatform], t15) : dart.throw(new _internal.LateError.fieldNI("crossPlatform"));
    }
    set crossPlatform(t15) {
      if (t15 == null) dart.nullFailed(I[32], 41, 28, "null");
      this[S.__InAppBrowserClassOptions_crossPlatform_isSet] = true;
      this[S.__InAppBrowserClassOptions_crossPlatform] = t15;
    }
    get android() {
      let t16;
      return dart.test(this[S.__InAppBrowserClassOptions_android_isSet]) ? (t16 = this[S.__InAppBrowserClassOptions_android], t16) : dart.throw(new _internal.LateError.fieldNI("android"));
    }
    set android(t16) {
      if (t16 == null) dart.nullFailed(I[32], 44, 35, "null");
      this[S.__InAppBrowserClassOptions_android_isSet] = true;
      this[S.__InAppBrowserClassOptions_android] = t16;
    }
    get ios() {
      let t17;
      return dart.test(this[S.__InAppBrowserClassOptions_ios_isSet]) ? (t17 = this[S.__InAppBrowserClassOptions_ios], t17) : dart.throw(new _internal.LateError.fieldNI("ios"));
    }
    set ios(t17) {
      if (t17 == null) dart.nullFailed(I[32], 47, 31, "null");
      this[S.__InAppBrowserClassOptions_ios_isSet] = true;
      this[S.__InAppBrowserClassOptions_ios] = t17;
    }
    get inAppWebViewGroupOptions() {
      let t18;
      return dart.test(this[S.__InAppBrowserClassOptions_inAppWebViewGroupOptions_isSet]) ? (t18 = this[S.__InAppBrowserClassOptions_inAppWebViewGroupOptions], t18) : dart.throw(new _internal.LateError.fieldNI("inAppWebViewGroupOptions"));
    }
    set inAppWebViewGroupOptions(t18) {
      if (t18 == null) dart.nullFailed(I[32], 50, 33, "null");
      this[S.__InAppBrowserClassOptions_inAppWebViewGroupOptions_isSet] = true;
      this[S.__InAppBrowserClassOptions_inAppWebViewGroupOptions] = t18;
    }
    toMap() {
      let options = new (T.IdentityMapOfString$dynamic()).new();
      options[S.$addAll](this.crossPlatform.toMap());
      options[S.$addAll](this.inAppWebViewGroupOptions.crossPlatform.toMap());
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
        options[S.$addAll](this.android.toMap());
        options[S.$addAll](this.inAppWebViewGroupOptions.android.toMap());
      } else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
        options[S.$addAll](this.ios.toMap());
        options[S.$addAll](this.inAppWebViewGroupOptions.ios.toMap());
      }
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    static fromMap(options) {
      if (options == null) dart.nullFailed(I[32], 89, 64, "options");
      let inAppBrowserClassOptions = new in_app_browser_options$0.InAppBrowserClassOptions.new();
      inAppBrowserClassOptions.crossPlatform = in_app_browser_options$0.InAppBrowserOptions.fromMap(options);
      inAppBrowserClassOptions.inAppWebViewGroupOptions = new in_app_webview_options$0.InAppWebViewGroupOptions.new();
      inAppBrowserClassOptions.inAppWebViewGroupOptions.crossPlatform = in_app_webview_options$0.InAppWebViewOptions.fromMap(options);
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
        inAppBrowserClassOptions.android = in_app_browser_options$.AndroidInAppBrowserOptions.fromMap(options);
        inAppBrowserClassOptions.inAppWebViewGroupOptions.android = in_app_webview_options$.AndroidInAppWebViewOptions.fromMap(options);
      } else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
        inAppBrowserClassOptions.ios = in_app_browser_options.IOSInAppBrowserOptions.fromMap(options);
        inAppBrowserClassOptions.inAppWebViewGroupOptions.ios = in_app_webview_options.IOSInAppWebViewOptions.fromMap(options);
      }
      return inAppBrowserClassOptions;
    }
    copy() {
      return in_app_browser_options$0.InAppBrowserClassOptions.fromMap(this.toMap());
    }
  };
  (in_app_browser_options$0.InAppBrowserClassOptions.new = function(opts) {
    let t15, t15$, t15$0, t15$1;
    let crossPlatform = opts && 'crossPlatform' in opts ? opts.crossPlatform : null;
    let android = opts && 'android' in opts ? opts.android : null;
    let ios = opts && 'ios' in opts ? opts.ios : null;
    let inAppWebViewGroupOptions = opts && 'inAppWebViewGroupOptions' in opts ? opts.inAppWebViewGroupOptions : null;
    this[S.__InAppBrowserClassOptions_crossPlatform] = null;
    this[S.__InAppBrowserClassOptions_crossPlatform_isSet] = false;
    this[S.__InAppBrowserClassOptions_android] = null;
    this[S.__InAppBrowserClassOptions_android_isSet] = false;
    this[S.__InAppBrowserClassOptions_ios] = null;
    this[S.__InAppBrowserClassOptions_ios_isSet] = false;
    this[S.__InAppBrowserClassOptions_inAppWebViewGroupOptions] = null;
    this[S.__InAppBrowserClassOptions_inAppWebViewGroupOptions_isSet] = false;
    this.crossPlatform = (t15 = crossPlatform, t15 == null ? new in_app_browser_options$0.InAppBrowserOptions.new() : t15);
    this.android = (t15$ = android, t15$ == null ? new in_app_browser_options$.AndroidInAppBrowserOptions.new() : t15$);
    this.ios = (t15$0 = ios, t15$0 == null ? new in_app_browser_options.IOSInAppBrowserOptions.new() : t15$0);
    this.inAppWebViewGroupOptions = (t15$1 = inAppWebViewGroupOptions, t15$1 == null ? new in_app_webview_options$0.InAppWebViewGroupOptions.new() : t15$1);
  }).prototype = in_app_browser_options$0.InAppBrowserClassOptions.prototype;
  dart.addTypeTests(in_app_browser_options$0.InAppBrowserClassOptions);
  dart.addTypeCaches(in_app_browser_options$0.InAppBrowserClassOptions);
  dart.setMethodSignature(in_app_browser_options$0.InAppBrowserClassOptions, () => ({
    __proto__: dart.getMethods(in_app_browser_options$0.InAppBrowserClassOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_browser_options$0.InAppBrowserClassOptions, [])
  }));
  dart.setGetterSignature(in_app_browser_options$0.InAppBrowserClassOptions, () => ({
    __proto__: dart.getGetters(in_app_browser_options$0.InAppBrowserClassOptions.__proto__),
    crossPlatform: in_app_browser_options$0.InAppBrowserOptions,
    android: in_app_browser_options$.AndroidInAppBrowserOptions,
    ios: in_app_browser_options.IOSInAppBrowserOptions,
    inAppWebViewGroupOptions: in_app_webview_options$0.InAppWebViewGroupOptions
  }));
  dart.setSetterSignature(in_app_browser_options$0.InAppBrowserClassOptions, () => ({
    __proto__: dart.getSetters(in_app_browser_options$0.InAppBrowserClassOptions.__proto__),
    crossPlatform: in_app_browser_options$0.InAppBrowserOptions,
    android: in_app_browser_options$.AndroidInAppBrowserOptions,
    ios: in_app_browser_options.IOSInAppBrowserOptions,
    inAppWebViewGroupOptions: in_app_webview_options$0.InAppWebViewGroupOptions
  }));
  dart.setLibraryUri(in_app_browser_options$0.InAppBrowserClassOptions, I[33]);
  dart.setFieldSignature(in_app_browser_options$0.InAppBrowserClassOptions, () => ({
    __proto__: dart.getFields(in_app_browser_options$0.InAppBrowserClassOptions.__proto__),
    [S.__InAppBrowserClassOptions_crossPlatform]: dart.fieldType(dart.nullable(in_app_browser_options$0.InAppBrowserOptions)),
    [S.__InAppBrowserClassOptions_crossPlatform_isSet]: dart.fieldType(core.bool),
    [S.__InAppBrowserClassOptions_android]: dart.fieldType(dart.nullable(in_app_browser_options$.AndroidInAppBrowserOptions)),
    [S.__InAppBrowserClassOptions_android_isSet]: dart.fieldType(core.bool),
    [S.__InAppBrowserClassOptions_ios]: dart.fieldType(dart.nullable(in_app_browser_options.IOSInAppBrowserOptions)),
    [S.__InAppBrowserClassOptions_ios_isSet]: dart.fieldType(core.bool),
    [S.__InAppBrowserClassOptions_inAppWebViewGroupOptions]: dart.fieldType(dart.nullable(in_app_webview_options$0.InAppWebViewGroupOptions)),
    [S.__InAppBrowserClassOptions_inAppWebViewGroupOptions_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(in_app_browser_options$0.InAppBrowserClassOptions, ['toString']);
  in_app_browser_options$0.InAppBrowserOptions = class InAppBrowserOptions extends core.Object {
    get hidden() {
      return this[S.hidden];
    }
    set hidden(value) {
      this[S.hidden] = value;
    }
    get hideToolbarTop() {
      return this[S.hideToolbarTop];
    }
    set hideToolbarTop(value) {
      this[S.hideToolbarTop] = value;
    }
    get toolbarTopBackgroundColor() {
      return this[S.toolbarTopBackgroundColor];
    }
    set toolbarTopBackgroundColor(value) {
      this[S.toolbarTopBackgroundColor] = value;
    }
    get hideUrlBar() {
      return this[S.hideUrlBar];
    }
    set hideUrlBar(value) {
      this[S.hideUrlBar] = value;
    }
    get hideProgressBar() {
      return this[S.hideProgressBar];
    }
    set hideProgressBar(value) {
      this[S.hideProgressBar] = value;
    }
    toMap() {
      let t19;
      return new (T.IdentityMapOfString$dynamic()).from(["hidden", this.hidden, "hideToolbarTop", this.hideToolbarTop, "toolbarTopBackgroundColor", (t19 = this.toolbarTopBackgroundColor, t19 == null ? null : util['HexColor|toHex'](t19)), "hideUrlBar", this.hideUrlBar, "hideProgressBar", this.hideProgressBar]);
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[32], 155, 59, "map");
      let options = new in_app_browser_options$0.InAppBrowserOptions.new();
      options.hidden = core.bool.as(map[S.$_get]("hidden"));
      options.hideToolbarTop = core.bool.as(map[S.$_get]("hideToolbarTop"));
      options.toolbarTopBackgroundColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("toolbarTopBackgroundColor")));
      options.hideUrlBar = core.bool.as(map[S.$_get]("hideUrlBar"));
      options.hideProgressBar = core.bool.as(map[S.$_get]("hideProgressBar"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_browser_options$0.InAppBrowserOptions.fromMap(this.toMap());
    }
  };
  (in_app_browser_options$0.InAppBrowserOptions.new = function(opts) {
    let hidden = opts && 'hidden' in opts ? opts.hidden : false;
    if (hidden == null) dart.nullFailed(I[32], 138, 13, "hidden");
    let hideToolbarTop = opts && 'hideToolbarTop' in opts ? opts.hideToolbarTop : false;
    if (hideToolbarTop == null) dart.nullFailed(I[32], 139, 12, "hideToolbarTop");
    let toolbarTopBackgroundColor = opts && 'toolbarTopBackgroundColor' in opts ? opts.toolbarTopBackgroundColor : null;
    let hideUrlBar = opts && 'hideUrlBar' in opts ? opts.hideUrlBar : false;
    if (hideUrlBar == null) dart.nullFailed(I[32], 141, 12, "hideUrlBar");
    let hideProgressBar = opts && 'hideProgressBar' in opts ? opts.hideProgressBar : false;
    if (hideProgressBar == null) dart.nullFailed(I[32], 142, 12, "hideProgressBar");
    this[S.hidden] = hidden;
    this[S.hideToolbarTop] = hideToolbarTop;
    this[S.toolbarTopBackgroundColor] = toolbarTopBackgroundColor;
    this[S.hideUrlBar] = hideUrlBar;
    this[S.hideProgressBar] = hideProgressBar;
    ;
  }).prototype = in_app_browser_options$0.InAppBrowserOptions.prototype;
  dart.addTypeTests(in_app_browser_options$0.InAppBrowserOptions);
  dart.addTypeCaches(in_app_browser_options$0.InAppBrowserOptions);
  in_app_browser_options$0.InAppBrowserOptions[dart.implements] = () => [in_app_browser_options$0.BrowserOptions, in_app_webview_options$.AndroidOptions, in_app_webview_options.IosOptions];
  dart.setMethodSignature(in_app_browser_options$0.InAppBrowserOptions, () => ({
    __proto__: dart.getMethods(in_app_browser_options$0.InAppBrowserOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_browser_options$0.InAppBrowserOptions, [])
  }));
  dart.setLibraryUri(in_app_browser_options$0.InAppBrowserOptions, I[33]);
  dart.setFieldSignature(in_app_browser_options$0.InAppBrowserOptions, () => ({
    __proto__: dart.getFields(in_app_browser_options$0.InAppBrowserOptions.__proto__),
    hidden: dart.fieldType(core.bool),
    hideToolbarTop: dart.fieldType(core.bool),
    toolbarTopBackgroundColor: dart.fieldType(dart.nullable(ui.Color)),
    hideUrlBar: dart.fieldType(core.bool),
    hideProgressBar: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(in_app_browser_options$0.InAppBrowserOptions, ['toString']);
  in_app_webview_options$.AndroidOptions = class AndroidOptions extends core.Object {};
  (in_app_webview_options$.AndroidOptions.new = function() {
    ;
  }).prototype = in_app_webview_options$.AndroidOptions.prototype;
  dart.addTypeTests(in_app_webview_options$.AndroidOptions);
  dart.addTypeCaches(in_app_webview_options$.AndroidOptions);
  dart.setLibraryUri(in_app_webview_options$.AndroidOptions, I[34]);
  in_app_webview_options$.AndroidInAppWebViewOptions = class AndroidInAppWebViewOptions extends core.Object {
    get textZoom() {
      return this[S.textZoom];
    }
    set textZoom(value) {
      this[S.textZoom] = value;
    }
    get clearSessionCache() {
      return this[S.clearSessionCache];
    }
    set clearSessionCache(value) {
      this[S.clearSessionCache] = value;
    }
    get builtInZoomControls() {
      return this[S.builtInZoomControls];
    }
    set builtInZoomControls(value) {
      this[S.builtInZoomControls] = value;
    }
    get displayZoomControls() {
      return this[S.displayZoomControls];
    }
    set displayZoomControls(value) {
      this[S.displayZoomControls] = value;
    }
    get databaseEnabled() {
      return this[S.databaseEnabled];
    }
    set databaseEnabled(value) {
      this[S.databaseEnabled] = value;
    }
    get domStorageEnabled() {
      return this[S.domStorageEnabled];
    }
    set domStorageEnabled(value) {
      this[S.domStorageEnabled] = value;
    }
    get useWideViewPort() {
      return this[S.useWideViewPort];
    }
    set useWideViewPort(value) {
      this[S.useWideViewPort] = value;
    }
    get safeBrowsingEnabled() {
      return this[S.safeBrowsingEnabled];
    }
    set safeBrowsingEnabled(value) {
      this[S.safeBrowsingEnabled] = value;
    }
    get mixedContentMode() {
      return this[S.mixedContentMode];
    }
    set mixedContentMode(value) {
      this[S.mixedContentMode] = value;
    }
    get allowContentAccess() {
      return this[S.allowContentAccess];
    }
    set allowContentAccess(value) {
      this[S.allowContentAccess] = value;
    }
    get allowFileAccess() {
      return this[S.allowFileAccess];
    }
    set allowFileAccess(value) {
      this[S.allowFileAccess] = value;
    }
    get appCachePath() {
      return this[S.appCachePath];
    }
    set appCachePath(value) {
      this[S.appCachePath] = value;
    }
    get blockNetworkImage() {
      return this[S.blockNetworkImage];
    }
    set blockNetworkImage(value) {
      this[S.blockNetworkImage] = value;
    }
    get blockNetworkLoads() {
      return this[S.blockNetworkLoads];
    }
    set blockNetworkLoads(value) {
      this[S.blockNetworkLoads] = value;
    }
    get cacheMode() {
      return this[S.cacheMode];
    }
    set cacheMode(value) {
      this[S.cacheMode] = value;
    }
    get cursiveFontFamily() {
      return this[S.cursiveFontFamily];
    }
    set cursiveFontFamily(value) {
      this[S.cursiveFontFamily] = value;
    }
    get defaultFixedFontSize() {
      return this[S.defaultFixedFontSize];
    }
    set defaultFixedFontSize(value) {
      this[S.defaultFixedFontSize] = value;
    }
    get defaultFontSize() {
      return this[S.defaultFontSize];
    }
    set defaultFontSize(value) {
      this[S.defaultFontSize] = value;
    }
    get defaultTextEncodingName() {
      return this[S.defaultTextEncodingName];
    }
    set defaultTextEncodingName(value) {
      this[S.defaultTextEncodingName] = value;
    }
    get disabledActionModeMenuItems() {
      return this[S.disabledActionModeMenuItems];
    }
    set disabledActionModeMenuItems(value) {
      this[S.disabledActionModeMenuItems] = value;
    }
    get fantasyFontFamily() {
      return this[S.fantasyFontFamily];
    }
    set fantasyFontFamily(value) {
      this[S.fantasyFontFamily] = value;
    }
    get fixedFontFamily() {
      return this[S.fixedFontFamily];
    }
    set fixedFontFamily(value) {
      this[S.fixedFontFamily] = value;
    }
    get forceDark() {
      return this[S.forceDark];
    }
    set forceDark(value) {
      this[S.forceDark] = value;
    }
    get geolocationEnabled() {
      return this[S.geolocationEnabled];
    }
    set geolocationEnabled(value) {
      this[S.geolocationEnabled] = value;
    }
    get layoutAlgorithm() {
      return this[S.layoutAlgorithm];
    }
    set layoutAlgorithm(value) {
      this[S.layoutAlgorithm] = value;
    }
    get loadWithOverviewMode() {
      return this[S.loadWithOverviewMode];
    }
    set loadWithOverviewMode(value) {
      this[S.loadWithOverviewMode] = value;
    }
    get loadsImagesAutomatically() {
      return this[S.loadsImagesAutomatically];
    }
    set loadsImagesAutomatically(value) {
      this[S.loadsImagesAutomatically] = value;
    }
    get minimumLogicalFontSize() {
      return this[S.minimumLogicalFontSize];
    }
    set minimumLogicalFontSize(value) {
      this[S.minimumLogicalFontSize] = value;
    }
    get initialScale() {
      return this[S.initialScale];
    }
    set initialScale(value) {
      this[S.initialScale] = value;
    }
    get needInitialFocus() {
      return this[S.needInitialFocus];
    }
    set needInitialFocus(value) {
      this[S.needInitialFocus] = value;
    }
    get offscreenPreRaster() {
      return this[S.offscreenPreRaster];
    }
    set offscreenPreRaster(value) {
      this[S.offscreenPreRaster] = value;
    }
    get sansSerifFontFamily() {
      return this[S.sansSerifFontFamily];
    }
    set sansSerifFontFamily(value) {
      this[S.sansSerifFontFamily] = value;
    }
    get serifFontFamily() {
      return this[S.serifFontFamily];
    }
    set serifFontFamily(value) {
      this[S.serifFontFamily] = value;
    }
    get standardFontFamily() {
      return this[S.standardFontFamily];
    }
    set standardFontFamily(value) {
      this[S.standardFontFamily] = value;
    }
    get saveFormData() {
      return this[S.saveFormData];
    }
    set saveFormData(value) {
      this[S.saveFormData] = value;
    }
    get thirdPartyCookiesEnabled() {
      return this[S.thirdPartyCookiesEnabled];
    }
    set thirdPartyCookiesEnabled(value) {
      this[S.thirdPartyCookiesEnabled] = value;
    }
    get hardwareAcceleration() {
      return this[S.hardwareAcceleration];
    }
    set hardwareAcceleration(value) {
      this[S.hardwareAcceleration] = value;
    }
    get supportMultipleWindows() {
      return this[S.supportMultipleWindows];
    }
    set supportMultipleWindows(value) {
      this[S.supportMultipleWindows] = value;
    }
    get regexToCancelSubFramesLoading() {
      return this[S.regexToCancelSubFramesLoading];
    }
    set regexToCancelSubFramesLoading(value) {
      this[S.regexToCancelSubFramesLoading] = value;
    }
    get useHybridComposition() {
      return this[S.useHybridComposition];
    }
    set useHybridComposition(value) {
      this[S.useHybridComposition] = value;
    }
    get useShouldInterceptRequest() {
      return this[S.useShouldInterceptRequest];
    }
    set useShouldInterceptRequest(value) {
      this[S.useShouldInterceptRequest] = value;
    }
    get useOnRenderProcessGone() {
      return this[S.useOnRenderProcessGone];
    }
    set useOnRenderProcessGone(value) {
      this[S.useOnRenderProcessGone] = value;
    }
    get overScrollMode() {
      return this[S.overScrollMode];
    }
    set overScrollMode(value) {
      this[S.overScrollMode] = value;
    }
    get networkAvailable() {
      return this[S.networkAvailable];
    }
    set networkAvailable(value) {
      this[S.networkAvailable] = value;
    }
    get scrollBarStyle() {
      return this[S.scrollBarStyle];
    }
    set scrollBarStyle(value) {
      this[S.scrollBarStyle] = value;
    }
    get verticalScrollbarPosition() {
      return this[S.verticalScrollbarPosition];
    }
    set verticalScrollbarPosition(value) {
      this[S.verticalScrollbarPosition] = value;
    }
    get scrollBarDefaultDelayBeforeFade() {
      return this[S.scrollBarDefaultDelayBeforeFade];
    }
    set scrollBarDefaultDelayBeforeFade(value) {
      this[S.scrollBarDefaultDelayBeforeFade] = value;
    }
    get scrollbarFadingEnabled() {
      return this[S.scrollbarFadingEnabled];
    }
    set scrollbarFadingEnabled(value) {
      this[S.scrollbarFadingEnabled] = value;
    }
    get scrollBarFadeDuration() {
      return this[S.scrollBarFadeDuration];
    }
    set scrollBarFadeDuration(value) {
      this[S.scrollBarFadeDuration] = value;
    }
    get rendererPriorityPolicy() {
      return this[S.rendererPriorityPolicy];
    }
    set rendererPriorityPolicy(value) {
      this[S.rendererPriorityPolicy] = value;
    }
    get disableDefaultErrorPage() {
      return this[S.disableDefaultErrorPage];
    }
    set disableDefaultErrorPage(value) {
      this[S.disableDefaultErrorPage] = value;
    }
    get verticalScrollbarThumbColor() {
      return this[S.verticalScrollbarThumbColor];
    }
    set verticalScrollbarThumbColor(value) {
      this[S.verticalScrollbarThumbColor] = value;
    }
    get verticalScrollbarTrackColor() {
      return this[S.verticalScrollbarTrackColor];
    }
    set verticalScrollbarTrackColor(value) {
      this[S.verticalScrollbarTrackColor] = value;
    }
    get horizontalScrollbarThumbColor() {
      return this[S.horizontalScrollbarThumbColor];
    }
    set horizontalScrollbarThumbColor(value) {
      this[S.horizontalScrollbarThumbColor] = value;
    }
    get horizontalScrollbarTrackColor() {
      return this[S.horizontalScrollbarTrackColor];
    }
    set horizontalScrollbarTrackColor(value) {
      this[S.horizontalScrollbarTrackColor] = value;
    }
    toMap() {
      let t19, t19$, t19$0, t19$1, t19$2, t19$3, t19$4, t19$5, t19$6, t19$7, t19$8, t19$9, t19$10;
      return new (T.IdentityMapOfString$dynamic()).from(["textZoom", this.textZoom, "clearSessionCache", this.clearSessionCache, "builtInZoomControls", this.builtInZoomControls, "displayZoomControls", this.displayZoomControls, "databaseEnabled", this.databaseEnabled, "domStorageEnabled", this.domStorageEnabled, "useWideViewPort", this.useWideViewPort, "safeBrowsingEnabled", this.safeBrowsingEnabled, "mixedContentMode", (t19 = this.mixedContentMode, t19 == null ? null : t19.toValue()), "allowContentAccess", this.allowContentAccess, "allowFileAccess", this.allowFileAccess, "appCachePath", this.appCachePath, "blockNetworkImage", this.blockNetworkImage, "blockNetworkLoads", this.blockNetworkLoads, "cacheMode", (t19$ = this.cacheMode, t19$ == null ? null : t19$.toValue()), "cursiveFontFamily", this.cursiveFontFamily, "defaultFixedFontSize", this.defaultFixedFontSize, "defaultFontSize", this.defaultFontSize, "defaultTextEncodingName", this.defaultTextEncodingName, "disabledActionModeMenuItems", (t19$0 = this.disabledActionModeMenuItems, t19$0 == null ? null : t19$0.toValue()), "fantasyFontFamily", this.fantasyFontFamily, "fixedFontFamily", this.fixedFontFamily, "forceDark", (t19$1 = this.forceDark, t19$1 == null ? null : t19$1.toValue()), "geolocationEnabled", this.geolocationEnabled, "layoutAlgorithm", (t19$2 = this.layoutAlgorithm, t19$2 == null ? null : t19$2.toValue()), "loadWithOverviewMode", this.loadWithOverviewMode, "loadsImagesAutomatically", this.loadsImagesAutomatically, "minimumLogicalFontSize", this.minimumLogicalFontSize, "initialScale", this.initialScale, "needInitialFocus", this.needInitialFocus, "offscreenPreRaster", this.offscreenPreRaster, "sansSerifFontFamily", this.sansSerifFontFamily, "serifFontFamily", this.serifFontFamily, "standardFontFamily", this.standardFontFamily, "saveFormData", this.saveFormData, "thirdPartyCookiesEnabled", this.thirdPartyCookiesEnabled, "hardwareAcceleration", this.hardwareAcceleration, "supportMultipleWindows", this.supportMultipleWindows, "useHybridComposition", this.useHybridComposition, "regexToCancelSubFramesLoading", this.regexToCancelSubFramesLoading, "useShouldInterceptRequest", this.useShouldInterceptRequest, "useOnRenderProcessGone", this.useOnRenderProcessGone, "overScrollMode", (t19$3 = this.overScrollMode, t19$3 == null ? null : t19$3.toValue()), "networkAvailable", this.networkAvailable, "scrollBarStyle", (t19$4 = this.scrollBarStyle, t19$4 == null ? null : t19$4.toValue()), "verticalScrollbarPosition", (t19$5 = this.verticalScrollbarPosition, t19$5 == null ? null : t19$5.toValue()), "scrollBarDefaultDelayBeforeFade", this.scrollBarDefaultDelayBeforeFade, "scrollbarFadingEnabled", this.scrollbarFadingEnabled, "scrollBarFadeDuration", this.scrollBarFadeDuration, "rendererPriorityPolicy", (t19$6 = this.rendererPriorityPolicy, t19$6 == null ? null : t19$6.toMap()), "disableDefaultErrorPage", this.disableDefaultErrorPage, "verticalScrollbarThumbColor", (t19$7 = this.verticalScrollbarThumbColor, t19$7 == null ? null : util['HexColor|toHex'](t19$7)), "verticalScrollbarTrackColor", (t19$8 = this.verticalScrollbarTrackColor, t19$8 == null ? null : util['HexColor|toHex'](t19$8)), "horizontalScrollbarThumbColor", (t19$9 = this.horizontalScrollbarThumbColor, t19$9 == null ? null : util['HexColor|toHex'](t19$9)), "horizontalScrollbarTrackColor", (t19$10 = this.horizontalScrollbarTrackColor, t19$10 == null ? null : util['HexColor|toHex'](t19$10))]);
    }
    static fromMap(map) {
      let t19;
      if (map == null) dart.nullFailed(I[35], 362, 66, "map");
      let options = new in_app_webview_options$.AndroidInAppWebViewOptions.new();
      options.textZoom = core.int.as(map[S.$_get]("textZoom"));
      options.clearSessionCache = core.bool.as(map[S.$_get]("clearSessionCache"));
      options.builtInZoomControls = core.bool.as(map[S.$_get]("builtInZoomControls"));
      options.displayZoomControls = core.bool.as(map[S.$_get]("displayZoomControls"));
      options.databaseEnabled = core.bool.as(map[S.$_get]("databaseEnabled"));
      options.domStorageEnabled = core.bool.as(map[S.$_get]("domStorageEnabled"));
      options.useWideViewPort = core.bool.as(map[S.$_get]("useWideViewPort"));
      options.safeBrowsingEnabled = core.bool.as(map[S.$_get]("safeBrowsingEnabled"));
      options.mixedContentMode = types.AndroidMixedContentMode.fromValue(T.intN().as(map[S.$_get]("mixedContentMode")));
      options.allowContentAccess = core.bool.as(map[S.$_get]("allowContentAccess"));
      options.allowFileAccess = core.bool.as(map[S.$_get]("allowFileAccess"));
      options.appCachePath = T.StringN().as(map[S.$_get]("appCachePath"));
      options.blockNetworkImage = core.bool.as(map[S.$_get]("blockNetworkImage"));
      options.blockNetworkLoads = core.bool.as(map[S.$_get]("blockNetworkLoads"));
      options.cacheMode = types.AndroidCacheMode.fromValue(T.intN().as(map[S.$_get]("cacheMode")));
      options.cursiveFontFamily = core.String.as(map[S.$_get]("cursiveFontFamily"));
      options.defaultFixedFontSize = core.int.as(map[S.$_get]("defaultFixedFontSize"));
      options.defaultFontSize = core.int.as(map[S.$_get]("defaultFontSize"));
      options.defaultTextEncodingName = core.String.as(map[S.$_get]("defaultTextEncodingName"));
      options.disabledActionModeMenuItems = types.AndroidActionModeMenuItem.fromValue(T.intN().as(map[S.$_get]("disabledActionModeMenuItems")));
      options.fantasyFontFamily = core.String.as(map[S.$_get]("fantasyFontFamily"));
      options.fixedFontFamily = core.String.as(map[S.$_get]("fixedFontFamily"));
      options.forceDark = types.AndroidForceDark.fromValue(T.intN().as(map[S.$_get]("forceDark")));
      options.geolocationEnabled = core.bool.as(map[S.$_get]("geolocationEnabled"));
      options.layoutAlgorithm = types.AndroidLayoutAlgorithm.fromValue(T.StringN().as(map[S.$_get]("layoutAlgorithm")));
      options.loadWithOverviewMode = core.bool.as(map[S.$_get]("loadWithOverviewMode"));
      options.loadsImagesAutomatically = core.bool.as(map[S.$_get]("loadsImagesAutomatically"));
      options.minimumLogicalFontSize = core.int.as(map[S.$_get]("minimumLogicalFontSize"));
      options.initialScale = core.int.as(map[S.$_get]("initialScale"));
      options.needInitialFocus = core.bool.as(map[S.$_get]("needInitialFocus"));
      options.offscreenPreRaster = core.bool.as(map[S.$_get]("offscreenPreRaster"));
      options.sansSerifFontFamily = core.String.as(map[S.$_get]("sansSerifFontFamily"));
      options.serifFontFamily = core.String.as(map[S.$_get]("serifFontFamily"));
      options.standardFontFamily = core.String.as(map[S.$_get]("standardFontFamily"));
      options.saveFormData = core.bool.as(map[S.$_get]("saveFormData"));
      options.thirdPartyCookiesEnabled = core.bool.as(map[S.$_get]("thirdPartyCookiesEnabled"));
      options.hardwareAcceleration = core.bool.as(map[S.$_get]("hardwareAcceleration"));
      options.supportMultipleWindows = core.bool.as(map[S.$_get]("supportMultipleWindows"));
      options.regexToCancelSubFramesLoading = T.StringN().as(map[S.$_get]("regexToCancelSubFramesLoading"));
      options.useHybridComposition = core.bool.as(map[S.$_get]("useHybridComposition"));
      options.useShouldInterceptRequest = core.bool.as(map[S.$_get]("useShouldInterceptRequest"));
      options.useOnRenderProcessGone = core.bool.as(map[S.$_get]("useOnRenderProcessGone"));
      options.overScrollMode = types.AndroidOverScrollMode.fromValue(T.intN().as(map[S.$_get]("overScrollMode")));
      options.networkAvailable = T.boolN().as(map[S.$_get]("networkAvailable"));
      options.scrollBarStyle = types.AndroidScrollBarStyle.fromValue(T.intN().as(map[S.$_get]("scrollBarStyle")));
      options.verticalScrollbarPosition = types.AndroidVerticalScrollbarPosition.fromValue(T.intN().as(map[S.$_get]("verticalScrollbarPosition")));
      options.scrollBarDefaultDelayBeforeFade = T.intN().as(map[S.$_get]("scrollBarDefaultDelayBeforeFade"));
      options.scrollbarFadingEnabled = core.bool.as(map[S.$_get]("scrollbarFadingEnabled"));
      options.scrollBarFadeDuration = T.intN().as(map[S.$_get]("scrollBarFadeDuration"));
      options.rendererPriorityPolicy = types.RendererPriorityPolicy.fromMap(T.MapNOfString$dynamic().as((t19 = map[S.$_get]("rendererPriorityPolicy"), t19 == null ? null : dart.dgsend(t19, [core.String, dart.dynamic], 'cast', []))));
      options.disableDefaultErrorPage = core.bool.as(map[S.$_get]("disableDefaultErrorPage"));
      options.verticalScrollbarThumbColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("verticalScrollbarThumbColor")));
      options.verticalScrollbarTrackColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("verticalScrollbarTrackColor")));
      options.horizontalScrollbarThumbColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("horizontalScrollbarThumbColor")));
      options.horizontalScrollbarTrackColor = util['UtilColor|fromHex'](T.StringN().as(map[S.$_get]("horizontalScrollbarTrackColor")));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_webview_options$.AndroidInAppWebViewOptions.fromMap(this.toMap());
    }
  };
  (in_app_webview_options$.AndroidInAppWebViewOptions.new = function(opts) {
    let textZoom = opts && 'textZoom' in opts ? opts.textZoom : 100;
    if (textZoom == null) dart.nullFailed(I[35], 243, 10, "textZoom");
    let clearSessionCache = opts && 'clearSessionCache' in opts ? opts.clearSessionCache : false;
    if (clearSessionCache == null) dart.nullFailed(I[35], 244, 10, "clearSessionCache");
    let builtInZoomControls = opts && 'builtInZoomControls' in opts ? opts.builtInZoomControls : true;
    if (builtInZoomControls == null) dart.nullFailed(I[35], 245, 10, "builtInZoomControls");
    let displayZoomControls = opts && 'displayZoomControls' in opts ? opts.displayZoomControls : false;
    if (displayZoomControls == null) dart.nullFailed(I[35], 246, 10, "displayZoomControls");
    let databaseEnabled = opts && 'databaseEnabled' in opts ? opts.databaseEnabled : true;
    if (databaseEnabled == null) dart.nullFailed(I[35], 247, 10, "databaseEnabled");
    let domStorageEnabled = opts && 'domStorageEnabled' in opts ? opts.domStorageEnabled : true;
    if (domStorageEnabled == null) dart.nullFailed(I[35], 248, 10, "domStorageEnabled");
    let useWideViewPort = opts && 'useWideViewPort' in opts ? opts.useWideViewPort : true;
    if (useWideViewPort == null) dart.nullFailed(I[35], 249, 10, "useWideViewPort");
    let safeBrowsingEnabled = opts && 'safeBrowsingEnabled' in opts ? opts.safeBrowsingEnabled : true;
    if (safeBrowsingEnabled == null) dart.nullFailed(I[35], 250, 10, "safeBrowsingEnabled");
    let mixedContentMode = opts && 'mixedContentMode' in opts ? opts.mixedContentMode : null;
    let allowContentAccess = opts && 'allowContentAccess' in opts ? opts.allowContentAccess : true;
    if (allowContentAccess == null) dart.nullFailed(I[35], 252, 10, "allowContentAccess");
    let allowFileAccess = opts && 'allowFileAccess' in opts ? opts.allowFileAccess : true;
    if (allowFileAccess == null) dart.nullFailed(I[35], 253, 10, "allowFileAccess");
    let appCachePath = opts && 'appCachePath' in opts ? opts.appCachePath : null;
    let blockNetworkImage = opts && 'blockNetworkImage' in opts ? opts.blockNetworkImage : false;
    if (blockNetworkImage == null) dart.nullFailed(I[35], 255, 10, "blockNetworkImage");
    let blockNetworkLoads = opts && 'blockNetworkLoads' in opts ? opts.blockNetworkLoads : false;
    if (blockNetworkLoads == null) dart.nullFailed(I[35], 256, 10, "blockNetworkLoads");
    let cacheMode = opts && 'cacheMode' in opts ? opts.cacheMode : C[51] || CT.C51;
    let cursiveFontFamily = opts && 'cursiveFontFamily' in opts ? opts.cursiveFontFamily : "cursive";
    if (cursiveFontFamily == null) dart.nullFailed(I[35], 258, 10, "cursiveFontFamily");
    let defaultFixedFontSize = opts && 'defaultFixedFontSize' in opts ? opts.defaultFixedFontSize : 16;
    if (defaultFixedFontSize == null) dart.nullFailed(I[35], 259, 10, "defaultFixedFontSize");
    let defaultFontSize = opts && 'defaultFontSize' in opts ? opts.defaultFontSize : 16;
    if (defaultFontSize == null) dart.nullFailed(I[35], 260, 10, "defaultFontSize");
    let defaultTextEncodingName = opts && 'defaultTextEncodingName' in opts ? opts.defaultTextEncodingName : "UTF-8";
    if (defaultTextEncodingName == null) dart.nullFailed(I[35], 261, 10, "defaultTextEncodingName");
    let disabledActionModeMenuItems = opts && 'disabledActionModeMenuItems' in opts ? opts.disabledActionModeMenuItems : null;
    let fantasyFontFamily = opts && 'fantasyFontFamily' in opts ? opts.fantasyFontFamily : "fantasy";
    if (fantasyFontFamily == null) dart.nullFailed(I[35], 263, 10, "fantasyFontFamily");
    let fixedFontFamily = opts && 'fixedFontFamily' in opts ? opts.fixedFontFamily : "monospace";
    if (fixedFontFamily == null) dart.nullFailed(I[35], 264, 10, "fixedFontFamily");
    let forceDark = opts && 'forceDark' in opts ? opts.forceDark : C[52] || CT.C52;
    let geolocationEnabled = opts && 'geolocationEnabled' in opts ? opts.geolocationEnabled : true;
    if (geolocationEnabled == null) dart.nullFailed(I[35], 266, 10, "geolocationEnabled");
    let layoutAlgorithm = opts && 'layoutAlgorithm' in opts ? opts.layoutAlgorithm : null;
    let loadWithOverviewMode = opts && 'loadWithOverviewMode' in opts ? opts.loadWithOverviewMode : true;
    if (loadWithOverviewMode == null) dart.nullFailed(I[35], 268, 10, "loadWithOverviewMode");
    let loadsImagesAutomatically = opts && 'loadsImagesAutomatically' in opts ? opts.loadsImagesAutomatically : true;
    if (loadsImagesAutomatically == null) dart.nullFailed(I[35], 269, 10, "loadsImagesAutomatically");
    let minimumLogicalFontSize = opts && 'minimumLogicalFontSize' in opts ? opts.minimumLogicalFontSize : 8;
    if (minimumLogicalFontSize == null) dart.nullFailed(I[35], 270, 10, "minimumLogicalFontSize");
    let needInitialFocus = opts && 'needInitialFocus' in opts ? opts.needInitialFocus : true;
    if (needInitialFocus == null) dart.nullFailed(I[35], 271, 10, "needInitialFocus");
    let offscreenPreRaster = opts && 'offscreenPreRaster' in opts ? opts.offscreenPreRaster : false;
    if (offscreenPreRaster == null) dart.nullFailed(I[35], 272, 10, "offscreenPreRaster");
    let sansSerifFontFamily = opts && 'sansSerifFontFamily' in opts ? opts.sansSerifFontFamily : "sans-serif";
    if (sansSerifFontFamily == null) dart.nullFailed(I[35], 273, 10, "sansSerifFontFamily");
    let serifFontFamily = opts && 'serifFontFamily' in opts ? opts.serifFontFamily : "sans-serif";
    if (serifFontFamily == null) dart.nullFailed(I[35], 274, 10, "serifFontFamily");
    let standardFontFamily = opts && 'standardFontFamily' in opts ? opts.standardFontFamily : "sans-serif";
    if (standardFontFamily == null) dart.nullFailed(I[35], 275, 10, "standardFontFamily");
    let saveFormData = opts && 'saveFormData' in opts ? opts.saveFormData : true;
    if (saveFormData == null) dart.nullFailed(I[35], 276, 10, "saveFormData");
    let thirdPartyCookiesEnabled = opts && 'thirdPartyCookiesEnabled' in opts ? opts.thirdPartyCookiesEnabled : true;
    if (thirdPartyCookiesEnabled == null) dart.nullFailed(I[35], 277, 10, "thirdPartyCookiesEnabled");
    let hardwareAcceleration = opts && 'hardwareAcceleration' in opts ? opts.hardwareAcceleration : true;
    if (hardwareAcceleration == null) dart.nullFailed(I[35], 278, 10, "hardwareAcceleration");
    let initialScale = opts && 'initialScale' in opts ? opts.initialScale : 0;
    if (initialScale == null) dart.nullFailed(I[35], 279, 10, "initialScale");
    let supportMultipleWindows = opts && 'supportMultipleWindows' in opts ? opts.supportMultipleWindows : false;
    if (supportMultipleWindows == null) dart.nullFailed(I[35], 280, 10, "supportMultipleWindows");
    let regexToCancelSubFramesLoading = opts && 'regexToCancelSubFramesLoading' in opts ? opts.regexToCancelSubFramesLoading : null;
    let useHybridComposition = opts && 'useHybridComposition' in opts ? opts.useHybridComposition : false;
    if (useHybridComposition == null) dart.nullFailed(I[35], 282, 10, "useHybridComposition");
    let useShouldInterceptRequest = opts && 'useShouldInterceptRequest' in opts ? opts.useShouldInterceptRequest : false;
    if (useShouldInterceptRequest == null) dart.nullFailed(I[35], 283, 10, "useShouldInterceptRequest");
    let useOnRenderProcessGone = opts && 'useOnRenderProcessGone' in opts ? opts.useOnRenderProcessGone : false;
    if (useOnRenderProcessGone == null) dart.nullFailed(I[35], 284, 10, "useOnRenderProcessGone");
    let overScrollMode = opts && 'overScrollMode' in opts ? opts.overScrollMode : C[53] || CT.C53;
    let networkAvailable = opts && 'networkAvailable' in opts ? opts.networkAvailable : null;
    let scrollBarStyle = opts && 'scrollBarStyle' in opts ? opts.scrollBarStyle : C[54] || CT.C54;
    let verticalScrollbarPosition = opts && 'verticalScrollbarPosition' in opts ? opts.verticalScrollbarPosition : C[55] || CT.C55;
    let scrollBarDefaultDelayBeforeFade = opts && 'scrollBarDefaultDelayBeforeFade' in opts ? opts.scrollBarDefaultDelayBeforeFade : null;
    let scrollbarFadingEnabled = opts && 'scrollbarFadingEnabled' in opts ? opts.scrollbarFadingEnabled : true;
    if (scrollbarFadingEnabled == null) dart.nullFailed(I[35], 291, 10, "scrollbarFadingEnabled");
    let scrollBarFadeDuration = opts && 'scrollBarFadeDuration' in opts ? opts.scrollBarFadeDuration : null;
    let rendererPriorityPolicy = opts && 'rendererPriorityPolicy' in opts ? opts.rendererPriorityPolicy : null;
    let disableDefaultErrorPage = opts && 'disableDefaultErrorPage' in opts ? opts.disableDefaultErrorPage : false;
    if (disableDefaultErrorPage == null) dart.nullFailed(I[35], 294, 10, "disableDefaultErrorPage");
    let verticalScrollbarThumbColor = opts && 'verticalScrollbarThumbColor' in opts ? opts.verticalScrollbarThumbColor : null;
    let verticalScrollbarTrackColor = opts && 'verticalScrollbarTrackColor' in opts ? opts.verticalScrollbarTrackColor : null;
    let horizontalScrollbarThumbColor = opts && 'horizontalScrollbarThumbColor' in opts ? opts.horizontalScrollbarThumbColor : null;
    let horizontalScrollbarTrackColor = opts && 'horizontalScrollbarTrackColor' in opts ? opts.horizontalScrollbarTrackColor : null;
    this[S.textZoom] = textZoom;
    this[S.clearSessionCache] = clearSessionCache;
    this[S.builtInZoomControls] = builtInZoomControls;
    this[S.displayZoomControls] = displayZoomControls;
    this[S.databaseEnabled] = databaseEnabled;
    this[S.domStorageEnabled] = domStorageEnabled;
    this[S.useWideViewPort] = useWideViewPort;
    this[S.safeBrowsingEnabled] = safeBrowsingEnabled;
    this[S.mixedContentMode] = mixedContentMode;
    this[S.allowContentAccess] = allowContentAccess;
    this[S.allowFileAccess] = allowFileAccess;
    this[S.appCachePath] = appCachePath;
    this[S.blockNetworkImage] = blockNetworkImage;
    this[S.blockNetworkLoads] = blockNetworkLoads;
    this[S.cacheMode] = cacheMode;
    this[S.cursiveFontFamily] = cursiveFontFamily;
    this[S.defaultFixedFontSize] = defaultFixedFontSize;
    this[S.defaultFontSize] = defaultFontSize;
    this[S.defaultTextEncodingName] = defaultTextEncodingName;
    this[S.disabledActionModeMenuItems] = disabledActionModeMenuItems;
    this[S.fantasyFontFamily] = fantasyFontFamily;
    this[S.fixedFontFamily] = fixedFontFamily;
    this[S.forceDark] = forceDark;
    this[S.geolocationEnabled] = geolocationEnabled;
    this[S.layoutAlgorithm] = layoutAlgorithm;
    this[S.loadWithOverviewMode] = loadWithOverviewMode;
    this[S.loadsImagesAutomatically] = loadsImagesAutomatically;
    this[S.minimumLogicalFontSize] = minimumLogicalFontSize;
    this[S.needInitialFocus] = needInitialFocus;
    this[S.offscreenPreRaster] = offscreenPreRaster;
    this[S.sansSerifFontFamily] = sansSerifFontFamily;
    this[S.serifFontFamily] = serifFontFamily;
    this[S.standardFontFamily] = standardFontFamily;
    this[S.saveFormData] = saveFormData;
    this[S.thirdPartyCookiesEnabled] = thirdPartyCookiesEnabled;
    this[S.hardwareAcceleration] = hardwareAcceleration;
    this[S.initialScale] = initialScale;
    this[S.supportMultipleWindows] = supportMultipleWindows;
    this[S.regexToCancelSubFramesLoading] = regexToCancelSubFramesLoading;
    this[S.useHybridComposition] = useHybridComposition;
    this[S.useShouldInterceptRequest] = useShouldInterceptRequest;
    this[S.useOnRenderProcessGone] = useOnRenderProcessGone;
    this[S.overScrollMode] = overScrollMode;
    this[S.networkAvailable] = networkAvailable;
    this[S.scrollBarStyle] = scrollBarStyle;
    this[S.verticalScrollbarPosition] = verticalScrollbarPosition;
    this[S.scrollBarDefaultDelayBeforeFade] = scrollBarDefaultDelayBeforeFade;
    this[S.scrollbarFadingEnabled] = scrollbarFadingEnabled;
    this[S.scrollBarFadeDuration] = scrollBarFadeDuration;
    this[S.rendererPriorityPolicy] = rendererPriorityPolicy;
    this[S.disableDefaultErrorPage] = disableDefaultErrorPage;
    this[S.verticalScrollbarThumbColor] = verticalScrollbarThumbColor;
    this[S.verticalScrollbarTrackColor] = verticalScrollbarTrackColor;
    this[S.horizontalScrollbarThumbColor] = horizontalScrollbarThumbColor;
    this[S.horizontalScrollbarTrackColor] = horizontalScrollbarTrackColor;
    ;
  }).prototype = in_app_webview_options$.AndroidInAppWebViewOptions.prototype;
  dart.addTypeTests(in_app_webview_options$.AndroidInAppWebViewOptions);
  dart.addTypeCaches(in_app_webview_options$.AndroidInAppWebViewOptions);
  in_app_webview_options$.AndroidInAppWebViewOptions[dart.implements] = () => [in_app_webview_options$0.WebViewOptions, in_app_browser_options$0.BrowserOptions, in_app_webview_options$.AndroidOptions];
  dart.setMethodSignature(in_app_webview_options$.AndroidInAppWebViewOptions, () => ({
    __proto__: dart.getMethods(in_app_webview_options$.AndroidInAppWebViewOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_webview_options$.AndroidInAppWebViewOptions, [])
  }));
  dart.setLibraryUri(in_app_webview_options$.AndroidInAppWebViewOptions, I[34]);
  dart.setFieldSignature(in_app_webview_options$.AndroidInAppWebViewOptions, () => ({
    __proto__: dart.getFields(in_app_webview_options$.AndroidInAppWebViewOptions.__proto__),
    textZoom: dart.fieldType(core.int),
    clearSessionCache: dart.fieldType(core.bool),
    builtInZoomControls: dart.fieldType(core.bool),
    displayZoomControls: dart.fieldType(core.bool),
    databaseEnabled: dart.fieldType(core.bool),
    domStorageEnabled: dart.fieldType(core.bool),
    useWideViewPort: dart.fieldType(core.bool),
    safeBrowsingEnabled: dart.fieldType(core.bool),
    mixedContentMode: dart.fieldType(dart.nullable(types.AndroidMixedContentMode)),
    allowContentAccess: dart.fieldType(core.bool),
    allowFileAccess: dart.fieldType(core.bool),
    appCachePath: dart.fieldType(dart.nullable(core.String)),
    blockNetworkImage: dart.fieldType(core.bool),
    blockNetworkLoads: dart.fieldType(core.bool),
    cacheMode: dart.fieldType(dart.nullable(types.AndroidCacheMode)),
    cursiveFontFamily: dart.fieldType(core.String),
    defaultFixedFontSize: dart.fieldType(core.int),
    defaultFontSize: dart.fieldType(core.int),
    defaultTextEncodingName: dart.fieldType(core.String),
    disabledActionModeMenuItems: dart.fieldType(dart.nullable(types.AndroidActionModeMenuItem)),
    fantasyFontFamily: dart.fieldType(core.String),
    fixedFontFamily: dart.fieldType(core.String),
    forceDark: dart.fieldType(dart.nullable(types.AndroidForceDark)),
    geolocationEnabled: dart.fieldType(core.bool),
    layoutAlgorithm: dart.fieldType(dart.nullable(types.AndroidLayoutAlgorithm)),
    loadWithOverviewMode: dart.fieldType(core.bool),
    loadsImagesAutomatically: dart.fieldType(core.bool),
    minimumLogicalFontSize: dart.fieldType(core.int),
    initialScale: dart.fieldType(core.int),
    needInitialFocus: dart.fieldType(core.bool),
    offscreenPreRaster: dart.fieldType(core.bool),
    sansSerifFontFamily: dart.fieldType(core.String),
    serifFontFamily: dart.fieldType(core.String),
    standardFontFamily: dart.fieldType(core.String),
    saveFormData: dart.fieldType(core.bool),
    thirdPartyCookiesEnabled: dart.fieldType(core.bool),
    hardwareAcceleration: dart.fieldType(core.bool),
    supportMultipleWindows: dart.fieldType(core.bool),
    regexToCancelSubFramesLoading: dart.fieldType(dart.nullable(core.String)),
    useHybridComposition: dart.fieldType(core.bool),
    useShouldInterceptRequest: dart.fieldType(core.bool),
    useOnRenderProcessGone: dart.fieldType(core.bool),
    overScrollMode: dart.fieldType(dart.nullable(types.AndroidOverScrollMode)),
    networkAvailable: dart.fieldType(dart.nullable(core.bool)),
    scrollBarStyle: dart.fieldType(dart.nullable(types.AndroidScrollBarStyle)),
    verticalScrollbarPosition: dart.fieldType(dart.nullable(types.AndroidVerticalScrollbarPosition)),
    scrollBarDefaultDelayBeforeFade: dart.fieldType(dart.nullable(core.int)),
    scrollbarFadingEnabled: dart.fieldType(core.bool),
    scrollBarFadeDuration: dart.fieldType(dart.nullable(core.int)),
    rendererPriorityPolicy: dart.fieldType(dart.nullable(types.RendererPriorityPolicy)),
    disableDefaultErrorPage: dart.fieldType(core.bool),
    verticalScrollbarThumbColor: dart.fieldType(dart.nullable(ui.Color)),
    verticalScrollbarTrackColor: dart.fieldType(dart.nullable(ui.Color)),
    horizontalScrollbarThumbColor: dart.fieldType(dart.nullable(ui.Color)),
    horizontalScrollbarTrackColor: dart.fieldType(dart.nullable(ui.Color))
  }));
  dart.defineExtensionMethods(in_app_webview_options$.AndroidInAppWebViewOptions, ['toString']);
  in_app_webview_options$0.WebViewOptions = class WebViewOptions extends core.Object {
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).new();
    }
    static fromMap(map) {
      if (map == null) dart.nullFailed(I[36], 15, 54, "map");
      return new in_app_webview_options$0.WebViewOptions.new();
    }
    copy() {
      return in_app_webview_options$0.WebViewOptions.fromMap(this.toMap());
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (in_app_webview_options$0.WebViewOptions.new = function() {
    ;
  }).prototype = in_app_webview_options$0.WebViewOptions.prototype;
  dart.addTypeTests(in_app_webview_options$0.WebViewOptions);
  dart.addTypeCaches(in_app_webview_options$0.WebViewOptions);
  dart.setMethodSignature(in_app_webview_options$0.WebViewOptions, () => ({
    __proto__: dart.getMethods(in_app_webview_options$0.WebViewOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_webview_options$0.WebViewOptions, []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(in_app_webview_options$0.WebViewOptions, I[37]);
  dart.defineExtensionMethods(in_app_webview_options$0.WebViewOptions, ['toString']);
  in_app_webview_options$0.InAppWebViewGroupOptions = class InAppWebViewGroupOptions extends core.Object {
    get crossPlatform() {
      let t19;
      return dart.test(this[S.__InAppWebViewGroupOptions_crossPlatform_isSet]) ? (t19 = this[S.__InAppWebViewGroupOptions_crossPlatform], t19) : dart.throw(new _internal.LateError.fieldNI("crossPlatform"));
    }
    set crossPlatform(t19) {
      if (t19 == null) dart.nullFailed(I[36], 36, 28, "null");
      this[S.__InAppWebViewGroupOptions_crossPlatform_isSet] = true;
      this[S.__InAppWebViewGroupOptions_crossPlatform] = t19;
    }
    get android() {
      let t20;
      return dart.test(this[S.__InAppWebViewGroupOptions_android_isSet]) ? (t20 = this[S.__InAppWebViewGroupOptions_android], t20) : dart.throw(new _internal.LateError.fieldNI("android"));
    }
    set android(t20) {
      if (t20 == null) dart.nullFailed(I[36], 39, 35, "null");
      this[S.__InAppWebViewGroupOptions_android_isSet] = true;
      this[S.__InAppWebViewGroupOptions_android] = t20;
    }
    get ios() {
      let t21;
      return dart.test(this[S.__InAppWebViewGroupOptions_ios_isSet]) ? (t21 = this[S.__InAppWebViewGroupOptions_ios], t21) : dart.throw(new _internal.LateError.fieldNI("ios"));
    }
    set ios(t21) {
      if (t21 == null) dart.nullFailed(I[36], 42, 31, "null");
      this[S.__InAppWebViewGroupOptions_ios_isSet] = true;
      this[S.__InAppWebViewGroupOptions_ios] = t21;
    }
    toMap() {
      let options = new (T.IdentityMapOfString$dynamic()).new();
      options[S.$addAll](this.crossPlatform.toMap());
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android)
        options[S.$addAll](this.android.toMap());
      else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) options[S.$addAll](this.ios.toMap());
      return options;
    }
    static fromMap(options) {
      if (options == null) dart.nullFailed(I[36], 64, 64, "options");
      let inAppWebViewGroupOptions = new in_app_webview_options$0.InAppWebViewGroupOptions.new();
      inAppWebViewGroupOptions.crossPlatform = in_app_webview_options$0.InAppWebViewOptions.fromMap(options);
      if (platform.defaultTargetPlatform == platform.TargetPlatform.android)
        inAppWebViewGroupOptions.android = in_app_webview_options$.AndroidInAppWebViewOptions.fromMap(options);
      else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) inAppWebViewGroupOptions.ios = in_app_webview_options.IOSInAppWebViewOptions.fromMap(options);
      return inAppWebViewGroupOptions;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_webview_options$0.InAppWebViewGroupOptions.fromMap(this.toMap());
    }
  };
  (in_app_webview_options$0.InAppWebViewGroupOptions.new = function(opts) {
    let t19, t19$, t19$0;
    let crossPlatform = opts && 'crossPlatform' in opts ? opts.crossPlatform : null;
    let android = opts && 'android' in opts ? opts.android : null;
    let ios = opts && 'ios' in opts ? opts.ios : null;
    this[S.__InAppWebViewGroupOptions_crossPlatform] = null;
    this[S.__InAppWebViewGroupOptions_crossPlatform_isSet] = false;
    this[S.__InAppWebViewGroupOptions_android] = null;
    this[S.__InAppWebViewGroupOptions_android_isSet] = false;
    this[S.__InAppWebViewGroupOptions_ios] = null;
    this[S.__InAppWebViewGroupOptions_ios_isSet] = false;
    this.crossPlatform = (t19 = crossPlatform, t19 == null ? new in_app_webview_options$0.InAppWebViewOptions.new() : t19);
    this.android = (t19$ = android, t19$ == null ? new in_app_webview_options$.AndroidInAppWebViewOptions.new() : t19$);
    this.ios = (t19$0 = ios, t19$0 == null ? new in_app_webview_options.IOSInAppWebViewOptions.new() : t19$0);
  }).prototype = in_app_webview_options$0.InAppWebViewGroupOptions.prototype;
  dart.addTypeTests(in_app_webview_options$0.InAppWebViewGroupOptions);
  dart.addTypeCaches(in_app_webview_options$0.InAppWebViewGroupOptions);
  dart.setMethodSignature(in_app_webview_options$0.InAppWebViewGroupOptions, () => ({
    __proto__: dart.getMethods(in_app_webview_options$0.InAppWebViewGroupOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_webview_options$0.InAppWebViewGroupOptions, [])
  }));
  dart.setGetterSignature(in_app_webview_options$0.InAppWebViewGroupOptions, () => ({
    __proto__: dart.getGetters(in_app_webview_options$0.InAppWebViewGroupOptions.__proto__),
    crossPlatform: in_app_webview_options$0.InAppWebViewOptions,
    android: in_app_webview_options$.AndroidInAppWebViewOptions,
    ios: in_app_webview_options.IOSInAppWebViewOptions
  }));
  dart.setSetterSignature(in_app_webview_options$0.InAppWebViewGroupOptions, () => ({
    __proto__: dart.getSetters(in_app_webview_options$0.InAppWebViewGroupOptions.__proto__),
    crossPlatform: in_app_webview_options$0.InAppWebViewOptions,
    android: in_app_webview_options$.AndroidInAppWebViewOptions,
    ios: in_app_webview_options.IOSInAppWebViewOptions
  }));
  dart.setLibraryUri(in_app_webview_options$0.InAppWebViewGroupOptions, I[37]);
  dart.setFieldSignature(in_app_webview_options$0.InAppWebViewGroupOptions, () => ({
    __proto__: dart.getFields(in_app_webview_options$0.InAppWebViewGroupOptions.__proto__),
    [S.__InAppWebViewGroupOptions_crossPlatform]: dart.fieldType(dart.nullable(in_app_webview_options$0.InAppWebViewOptions)),
    [S.__InAppWebViewGroupOptions_crossPlatform_isSet]: dart.fieldType(core.bool),
    [S.__InAppWebViewGroupOptions_android]: dart.fieldType(dart.nullable(in_app_webview_options$.AndroidInAppWebViewOptions)),
    [S.__InAppWebViewGroupOptions_android_isSet]: dart.fieldType(core.bool),
    [S.__InAppWebViewGroupOptions_ios]: dart.fieldType(dart.nullable(in_app_webview_options.IOSInAppWebViewOptions)),
    [S.__InAppWebViewGroupOptions_ios_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(in_app_webview_options$0.InAppWebViewGroupOptions, ['toString']);
  in_app_webview_options$0.InAppWebViewOptions = class InAppWebViewOptions extends core.Object {
    get useShouldOverrideUrlLoading() {
      return this[S.useShouldOverrideUrlLoading];
    }
    set useShouldOverrideUrlLoading(value) {
      this[S.useShouldOverrideUrlLoading] = value;
    }
    get useOnLoadResource() {
      return this[S.useOnLoadResource];
    }
    set useOnLoadResource(value) {
      this[S.useOnLoadResource] = value;
    }
    get useOnDownloadStart() {
      return this[S.useOnDownloadStart];
    }
    set useOnDownloadStart(value) {
      this[S.useOnDownloadStart] = value;
    }
    get clearCache() {
      return this[S.clearCache];
    }
    set clearCache(value) {
      this[S.clearCache] = value;
    }
    get userAgent() {
      return this[S.userAgent];
    }
    set userAgent(value) {
      this[S.userAgent] = value;
    }
    get applicationNameForUserAgent() {
      return this[S.applicationNameForUserAgent];
    }
    set applicationNameForUserAgent(value) {
      this[S.applicationNameForUserAgent] = value;
    }
    get javaScriptEnabled() {
      return this[S.javaScriptEnabled];
    }
    set javaScriptEnabled(value) {
      this[S.javaScriptEnabled] = value;
    }
    get javaScriptCanOpenWindowsAutomatically() {
      return this[S.javaScriptCanOpenWindowsAutomatically];
    }
    set javaScriptCanOpenWindowsAutomatically(value) {
      this[S.javaScriptCanOpenWindowsAutomatically] = value;
    }
    get mediaPlaybackRequiresUserGesture() {
      return this[S.mediaPlaybackRequiresUserGesture];
    }
    set mediaPlaybackRequiresUserGesture(value) {
      this[S.mediaPlaybackRequiresUserGesture] = value;
    }
    get minimumFontSize() {
      return this[S.minimumFontSize];
    }
    set minimumFontSize(value) {
      this[S.minimumFontSize] = value;
    }
    get verticalScrollBarEnabled() {
      return this[S.verticalScrollBarEnabled];
    }
    set verticalScrollBarEnabled(value) {
      this[S.verticalScrollBarEnabled] = value;
    }
    get horizontalScrollBarEnabled() {
      return this[S.horizontalScrollBarEnabled];
    }
    set horizontalScrollBarEnabled(value) {
      this[S.horizontalScrollBarEnabled] = value;
    }
    get resourceCustomSchemes() {
      return this[S.resourceCustomSchemes];
    }
    set resourceCustomSchemes(value) {
      this[S.resourceCustomSchemes] = value;
    }
    get contentBlockers() {
      return this[S.contentBlockers];
    }
    set contentBlockers(value) {
      this[S.contentBlockers] = value;
    }
    get preferredContentMode() {
      return this[S.preferredContentMode];
    }
    set preferredContentMode(value) {
      this[S.preferredContentMode] = value;
    }
    get useShouldInterceptAjaxRequest() {
      return this[S.useShouldInterceptAjaxRequest];
    }
    set useShouldInterceptAjaxRequest(value) {
      this[S.useShouldInterceptAjaxRequest] = value;
    }
    get useShouldInterceptFetchRequest() {
      return this[S.useShouldInterceptFetchRequest];
    }
    set useShouldInterceptFetchRequest(value) {
      this[S.useShouldInterceptFetchRequest] = value;
    }
    get incognito() {
      return this[S.incognito];
    }
    set incognito(value) {
      this[S.incognito] = value;
    }
    get cacheEnabled() {
      return this[S.cacheEnabled];
    }
    set cacheEnabled(value) {
      this[S.cacheEnabled] = value;
    }
    get transparentBackground() {
      return this[S.transparentBackground];
    }
    set transparentBackground(value) {
      this[S.transparentBackground] = value;
    }
    get disableVerticalScroll() {
      return this[S.disableVerticalScroll];
    }
    set disableVerticalScroll(value) {
      this[S.disableVerticalScroll] = value;
    }
    get disableHorizontalScroll() {
      return this[S.disableHorizontalScroll];
    }
    set disableHorizontalScroll(value) {
      this[S.disableHorizontalScroll] = value;
    }
    get disableContextMenu() {
      return this[S.disableContextMenu];
    }
    set disableContextMenu(value) {
      this[S.disableContextMenu] = value;
    }
    get supportZoom() {
      return this[S.supportZoom];
    }
    set supportZoom(value) {
      this[S.supportZoom] = value;
    }
    get allowFileAccessFromFileURLs() {
      return this[S.allowFileAccessFromFileURLs];
    }
    set allowFileAccessFromFileURLs(value) {
      this[S.allowFileAccessFromFileURLs] = value;
    }
    get allowUniversalAccessFromFileURLs() {
      return this[S.allowUniversalAccessFromFileURLs];
    }
    set allowUniversalAccessFromFileURLs(value) {
      this[S.allowUniversalAccessFromFileURLs] = value;
    }
    toMap() {
      let t22;
      let contentBlockersMapList = T.JSArrayOfMapOfString$MapOfString$dynamic().of([]);
      this.contentBlockers[S.$forEach](dart.fn(contentBlocker => {
        if (contentBlocker == null) dart.nullFailed(I[36], 245, 30, "contentBlocker");
        contentBlockersMapList[S.$add](contentBlocker.toMap());
      }, T.ContentBlockerTovoid()));
      return new (T.IdentityMapOfString$dynamic()).from(["useShouldOverrideUrlLoading", this.useShouldOverrideUrlLoading, "useOnLoadResource", this.useOnLoadResource, "useOnDownloadStart", this.useOnDownloadStart, "clearCache", this.clearCache, "userAgent", this.userAgent, "applicationNameForUserAgent", this.applicationNameForUserAgent, "javaScriptEnabled", this.javaScriptEnabled, "javaScriptCanOpenWindowsAutomatically", this.javaScriptCanOpenWindowsAutomatically, "mediaPlaybackRequiresUserGesture", this.mediaPlaybackRequiresUserGesture, "verticalScrollBarEnabled", this.verticalScrollBarEnabled, "horizontalScrollBarEnabled", this.horizontalScrollBarEnabled, "resourceCustomSchemes", this.resourceCustomSchemes, "contentBlockers", contentBlockersMapList, "preferredContentMode", (t22 = this.preferredContentMode, t22 == null ? null : t22.toValue()), "useShouldInterceptAjaxRequest", this.useShouldInterceptAjaxRequest, "useShouldInterceptFetchRequest", this.useShouldInterceptFetchRequest, "incognito", this.incognito, "cacheEnabled", this.cacheEnabled, "transparentBackground", this.transparentBackground, "disableVerticalScroll", this.disableVerticalScroll, "disableHorizontalScroll", this.disableHorizontalScroll, "disableContextMenu", this.disableContextMenu, "supportZoom", this.supportZoom, "allowFileAccessFromFileURLs", this.allowFileAccessFromFileURLs, "allowUniversalAccessFromFileURLs", this.allowUniversalAccessFromFileURLs]);
    }
    static fromMap(map) {
      let t22;
      if (map == null) dart.nullFailed(I[36], 279, 59, "map");
      let contentBlockers = T.JSArrayOfContentBlocker().of([]);
      let contentBlockersMapList = T.ListN().as(map[S.$_get]("contentBlockers"));
      if (contentBlockersMapList != null) {
        contentBlockersMapList[S.$forEach](dart.fn(contentBlocker => {
          contentBlockers[S.$add](content_blocker.ContentBlocker.fromMap(T.LinkedHashMapOfdynamic$Map().from(collection.LinkedHashMap.from(core.Map.as(contentBlocker)))));
        }, T.dynamicTovoid()));
      }
      let options = new in_app_webview_options$0.InAppWebViewOptions.new();
      options.useShouldOverrideUrlLoading = core.bool.as(map[S.$_get]("useShouldOverrideUrlLoading"));
      options.useOnLoadResource = core.bool.as(map[S.$_get]("useOnLoadResource"));
      options.useOnDownloadStart = core.bool.as(map[S.$_get]("useOnDownloadStart"));
      options.clearCache = core.bool.as(map[S.$_get]("clearCache"));
      options.userAgent = core.String.as(map[S.$_get]("userAgent"));
      options.applicationNameForUserAgent = core.String.as(map[S.$_get]("applicationNameForUserAgent"));
      options.javaScriptEnabled = core.bool.as(map[S.$_get]("javaScriptEnabled"));
      options.javaScriptCanOpenWindowsAutomatically = core.bool.as(map[S.$_get]("javaScriptCanOpenWindowsAutomatically"));
      options.mediaPlaybackRequiresUserGesture = core.bool.as(map[S.$_get]("mediaPlaybackRequiresUserGesture"));
      options.verticalScrollBarEnabled = core.bool.as(map[S.$_get]("verticalScrollBarEnabled"));
      options.horizontalScrollBarEnabled = core.bool.as(map[S.$_get]("horizontalScrollBarEnabled"));
      options.resourceCustomSchemes = T.ListOfString().from(core.Iterable.as((t22 = map[S.$_get]("resourceCustomSchemes"), t22 == null ? [] : t22)));
      options.contentBlockers = contentBlockers;
      options.preferredContentMode = types.UserPreferredContentMode.fromValue(T.intN().as(map[S.$_get]("preferredContentMode")));
      options.useShouldInterceptAjaxRequest = core.bool.as(map[S.$_get]("useShouldInterceptAjaxRequest"));
      options.useShouldInterceptFetchRequest = core.bool.as(map[S.$_get]("useShouldInterceptFetchRequest"));
      options.incognito = core.bool.as(map[S.$_get]("incognito"));
      options.cacheEnabled = core.bool.as(map[S.$_get]("cacheEnabled"));
      options.transparentBackground = core.bool.as(map[S.$_get]("transparentBackground"));
      options.disableVerticalScroll = core.bool.as(map[S.$_get]("disableVerticalScroll"));
      options.disableHorizontalScroll = core.bool.as(map[S.$_get]("disableHorizontalScroll"));
      options.disableContextMenu = core.bool.as(map[S.$_get]("disableContextMenu"));
      options.supportZoom = core.bool.as(map[S.$_get]("supportZoom"));
      options.allowFileAccessFromFileURLs = core.bool.as(map[S.$_get]("allowFileAccessFromFileURLs"));
      options.allowUniversalAccessFromFileURLs = core.bool.as(map[S.$_get]("allowUniversalAccessFromFileURLs"));
      return options;
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    copy() {
      return in_app_webview_options$0.InAppWebViewOptions.fromMap(this.toMap());
    }
  };
  (in_app_webview_options$0.InAppWebViewOptions.new = function(opts) {
    let useShouldOverrideUrlLoading = opts && 'useShouldOverrideUrlLoading' in opts ? opts.useShouldOverrideUrlLoading : false;
    if (useShouldOverrideUrlLoading == null) dart.nullFailed(I[36], 209, 13, "useShouldOverrideUrlLoading");
    let useOnLoadResource = opts && 'useOnLoadResource' in opts ? opts.useOnLoadResource : false;
    if (useOnLoadResource == null) dart.nullFailed(I[36], 210, 12, "useOnLoadResource");
    let useOnDownloadStart = opts && 'useOnDownloadStart' in opts ? opts.useOnDownloadStart : false;
    if (useOnDownloadStart == null) dart.nullFailed(I[36], 211, 12, "useOnDownloadStart");
    let clearCache = opts && 'clearCache' in opts ? opts.clearCache : false;
    if (clearCache == null) dart.nullFailed(I[36], 212, 12, "clearCache");
    let userAgent = opts && 'userAgent' in opts ? opts.userAgent : "";
    if (userAgent == null) dart.nullFailed(I[36], 213, 12, "userAgent");
    let applicationNameForUserAgent = opts && 'applicationNameForUserAgent' in opts ? opts.applicationNameForUserAgent : "";
    if (applicationNameForUserAgent == null) dart.nullFailed(I[36], 214, 12, "applicationNameForUserAgent");
    let javaScriptEnabled = opts && 'javaScriptEnabled' in opts ? opts.javaScriptEnabled : true;
    if (javaScriptEnabled == null) dart.nullFailed(I[36], 215, 12, "javaScriptEnabled");
    let javaScriptCanOpenWindowsAutomatically = opts && 'javaScriptCanOpenWindowsAutomatically' in opts ? opts.javaScriptCanOpenWindowsAutomatically : false;
    if (javaScriptCanOpenWindowsAutomatically == null) dart.nullFailed(I[36], 216, 12, "javaScriptCanOpenWindowsAutomatically");
    let mediaPlaybackRequiresUserGesture = opts && 'mediaPlaybackRequiresUserGesture' in opts ? opts.mediaPlaybackRequiresUserGesture : true;
    if (mediaPlaybackRequiresUserGesture == null) dart.nullFailed(I[36], 217, 12, "mediaPlaybackRequiresUserGesture");
    let minimumFontSize = opts && 'minimumFontSize' in opts ? opts.minimumFontSize : null;
    let verticalScrollBarEnabled = opts && 'verticalScrollBarEnabled' in opts ? opts.verticalScrollBarEnabled : true;
    if (verticalScrollBarEnabled == null) dart.nullFailed(I[36], 219, 12, "verticalScrollBarEnabled");
    let horizontalScrollBarEnabled = opts && 'horizontalScrollBarEnabled' in opts ? opts.horizontalScrollBarEnabled : true;
    if (horizontalScrollBarEnabled == null) dart.nullFailed(I[36], 220, 12, "horizontalScrollBarEnabled");
    let resourceCustomSchemes = opts && 'resourceCustomSchemes' in opts ? opts.resourceCustomSchemes : C[44] || CT.C44;
    if (resourceCustomSchemes == null) dart.nullFailed(I[36], 221, 12, "resourceCustomSchemes");
    let contentBlockers = opts && 'contentBlockers' in opts ? opts.contentBlockers : C[56] || CT.C56;
    if (contentBlockers == null) dart.nullFailed(I[36], 222, 12, "contentBlockers");
    let preferredContentMode = opts && 'preferredContentMode' in opts ? opts.preferredContentMode : C[57] || CT.C57;
    let useShouldInterceptAjaxRequest = opts && 'useShouldInterceptAjaxRequest' in opts ? opts.useShouldInterceptAjaxRequest : false;
    if (useShouldInterceptAjaxRequest == null) dart.nullFailed(I[36], 224, 12, "useShouldInterceptAjaxRequest");
    let useShouldInterceptFetchRequest = opts && 'useShouldInterceptFetchRequest' in opts ? opts.useShouldInterceptFetchRequest : false;
    if (useShouldInterceptFetchRequest == null) dart.nullFailed(I[36], 225, 12, "useShouldInterceptFetchRequest");
    let incognito = opts && 'incognito' in opts ? opts.incognito : false;
    if (incognito == null) dart.nullFailed(I[36], 226, 12, "incognito");
    let cacheEnabled = opts && 'cacheEnabled' in opts ? opts.cacheEnabled : true;
    if (cacheEnabled == null) dart.nullFailed(I[36], 227, 12, "cacheEnabled");
    let transparentBackground = opts && 'transparentBackground' in opts ? opts.transparentBackground : false;
    if (transparentBackground == null) dart.nullFailed(I[36], 228, 12, "transparentBackground");
    let disableVerticalScroll = opts && 'disableVerticalScroll' in opts ? opts.disableVerticalScroll : false;
    if (disableVerticalScroll == null) dart.nullFailed(I[36], 229, 12, "disableVerticalScroll");
    let disableHorizontalScroll = opts && 'disableHorizontalScroll' in opts ? opts.disableHorizontalScroll : false;
    if (disableHorizontalScroll == null) dart.nullFailed(I[36], 230, 12, "disableHorizontalScroll");
    let disableContextMenu = opts && 'disableContextMenu' in opts ? opts.disableContextMenu : false;
    if (disableContextMenu == null) dart.nullFailed(I[36], 231, 12, "disableContextMenu");
    let supportZoom = opts && 'supportZoom' in opts ? opts.supportZoom : true;
    if (supportZoom == null) dart.nullFailed(I[36], 232, 12, "supportZoom");
    let allowFileAccessFromFileURLs = opts && 'allowFileAccessFromFileURLs' in opts ? opts.allowFileAccessFromFileURLs : false;
    if (allowFileAccessFromFileURLs == null) dart.nullFailed(I[36], 233, 12, "allowFileAccessFromFileURLs");
    let allowUniversalAccessFromFileURLs = opts && 'allowUniversalAccessFromFileURLs' in opts ? opts.allowUniversalAccessFromFileURLs : false;
    if (allowUniversalAccessFromFileURLs == null) dart.nullFailed(I[36], 234, 12, "allowUniversalAccessFromFileURLs");
    this[S.useShouldOverrideUrlLoading] = useShouldOverrideUrlLoading;
    this[S.useOnLoadResource] = useOnLoadResource;
    this[S.useOnDownloadStart] = useOnDownloadStart;
    this[S.clearCache] = clearCache;
    this[S.userAgent] = userAgent;
    this[S.applicationNameForUserAgent] = applicationNameForUserAgent;
    this[S.javaScriptEnabled] = javaScriptEnabled;
    this[S.javaScriptCanOpenWindowsAutomatically] = javaScriptCanOpenWindowsAutomatically;
    this[S.mediaPlaybackRequiresUserGesture] = mediaPlaybackRequiresUserGesture;
    this[S.minimumFontSize] = minimumFontSize;
    this[S.verticalScrollBarEnabled] = verticalScrollBarEnabled;
    this[S.horizontalScrollBarEnabled] = horizontalScrollBarEnabled;
    this[S.resourceCustomSchemes] = resourceCustomSchemes;
    this[S.contentBlockers] = contentBlockers;
    this[S.preferredContentMode] = preferredContentMode;
    this[S.useShouldInterceptAjaxRequest] = useShouldInterceptAjaxRequest;
    this[S.useShouldInterceptFetchRequest] = useShouldInterceptFetchRequest;
    this[S.incognito] = incognito;
    this[S.cacheEnabled] = cacheEnabled;
    this[S.transparentBackground] = transparentBackground;
    this[S.disableVerticalScroll] = disableVerticalScroll;
    this[S.disableHorizontalScroll] = disableHorizontalScroll;
    this[S.disableContextMenu] = disableContextMenu;
    this[S.supportZoom] = supportZoom;
    this[S.allowFileAccessFromFileURLs] = allowFileAccessFromFileURLs;
    this[S.allowUniversalAccessFromFileURLs] = allowUniversalAccessFromFileURLs;
    if (this.minimumFontSize == null) this.minimumFontSize = platform.defaultTargetPlatform == platform.TargetPlatform.android ? 8 : 0;
    if (!(!dart.test(this.resourceCustomSchemes[S.$contains]("http")) && !dart.test(this.resourceCustomSchemes[S.$contains]("https")))) dart.assertFailed(null, I[36], 238, 12, "!this.resourceCustomSchemes.contains(\"http\") &&\n        !this.resourceCustomSchemes.contains(\"https\")");
  }).prototype = in_app_webview_options$0.InAppWebViewOptions.prototype;
  dart.addTypeTests(in_app_webview_options$0.InAppWebViewOptions);
  dart.addTypeCaches(in_app_webview_options$0.InAppWebViewOptions);
  in_app_webview_options$0.InAppWebViewOptions[dart.implements] = () => [in_app_webview_options$0.WebViewOptions, in_app_browser_options$0.BrowserOptions, in_app_webview_options$.AndroidOptions, in_app_webview_options.IosOptions];
  dart.setMethodSignature(in_app_webview_options$0.InAppWebViewOptions, () => ({
    __proto__: dart.getMethods(in_app_webview_options$0.InAppWebViewOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copy: dart.fnType(in_app_webview_options$0.InAppWebViewOptions, [])
  }));
  dart.setLibraryUri(in_app_webview_options$0.InAppWebViewOptions, I[37]);
  dart.setFieldSignature(in_app_webview_options$0.InAppWebViewOptions, () => ({
    __proto__: dart.getFields(in_app_webview_options$0.InAppWebViewOptions.__proto__),
    useShouldOverrideUrlLoading: dart.fieldType(core.bool),
    useOnLoadResource: dart.fieldType(core.bool),
    useOnDownloadStart: dart.fieldType(core.bool),
    clearCache: dart.fieldType(core.bool),
    userAgent: dart.fieldType(core.String),
    applicationNameForUserAgent: dart.fieldType(core.String),
    javaScriptEnabled: dart.fieldType(core.bool),
    javaScriptCanOpenWindowsAutomatically: dart.fieldType(core.bool),
    mediaPlaybackRequiresUserGesture: dart.fieldType(core.bool),
    minimumFontSize: dart.fieldType(dart.nullable(core.int)),
    verticalScrollBarEnabled: dart.fieldType(core.bool),
    horizontalScrollBarEnabled: dart.fieldType(core.bool),
    resourceCustomSchemes: dart.fieldType(core.List$(core.String)),
    contentBlockers: dart.fieldType(core.List$(content_blocker.ContentBlocker)),
    preferredContentMode: dart.fieldType(dart.nullable(types.UserPreferredContentMode)),
    useShouldInterceptAjaxRequest: dart.fieldType(core.bool),
    useShouldInterceptFetchRequest: dart.fieldType(core.bool),
    incognito: dart.fieldType(core.bool),
    cacheEnabled: dart.fieldType(core.bool),
    transparentBackground: dart.fieldType(core.bool),
    disableVerticalScroll: dart.fieldType(core.bool),
    disableHorizontalScroll: dart.fieldType(core.bool),
    disableContextMenu: dart.fieldType(core.bool),
    supportZoom: dart.fieldType(core.bool),
    allowFileAccessFromFileURLs: dart.fieldType(core.bool),
    allowUniversalAccessFromFileURLs: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(in_app_webview_options$0.InAppWebViewOptions, ['toString']);
  headless_in_app_webview.HeadlessInAppWebView = class HeadlessInAppWebView extends core.Object {
    get windowId() {
      return this[S.windowId$1];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get initialSize() {
      return this[S.initialSize];
    }
    set initialSize(value) {
      super.initialSize = value;
    }
    get initialData() {
      return this[S.initialData$1];
    }
    set initialData(value) {
      super.initialData = value;
    }
    get initialFile() {
      return this[S.initialFile$1];
    }
    set initialFile(value) {
      super.initialFile = value;
    }
    get initialOptions() {
      return this[S.initialOptions$1];
    }
    set initialOptions(value) {
      super.initialOptions = value;
    }
    get contextMenu() {
      return this[S.contextMenu$1];
    }
    set contextMenu(value) {
      super.contextMenu = value;
    }
    get initialUrlRequest() {
      return this[S.initialUrlRequest$1];
    }
    set initialUrlRequest(value) {
      super.initialUrlRequest = value;
    }
    get initialUserScripts() {
      return this[S.initialUserScripts$1];
    }
    set initialUserScripts(value) {
      super.initialUserScripts = value;
    }
    get pullToRefreshController() {
      return this[S.pullToRefreshController$1];
    }
    set pullToRefreshController(value) {
      super.pullToRefreshController = value;
    }
    get androidOnGeolocationPermissionsHidePrompt() {
      return this[S.androidOnGeolocationPermissionsHidePrompt$1];
    }
    set androidOnGeolocationPermissionsHidePrompt(value) {
      this[S.androidOnGeolocationPermissionsHidePrompt$1] = value;
    }
    get androidOnGeolocationPermissionsShowPrompt() {
      return this[S.androidOnGeolocationPermissionsShowPrompt$1];
    }
    set androidOnGeolocationPermissionsShowPrompt(value) {
      this[S.androidOnGeolocationPermissionsShowPrompt$1] = value;
    }
    get androidOnPermissionRequest() {
      return this[S.androidOnPermissionRequest$1];
    }
    set androidOnPermissionRequest(value) {
      this[S.androidOnPermissionRequest$1] = value;
    }
    get androidOnSafeBrowsingHit() {
      return this[S.androidOnSafeBrowsingHit$1];
    }
    set androidOnSafeBrowsingHit(value) {
      this[S.androidOnSafeBrowsingHit$1] = value;
    }
    get onPageCommitVisible() {
      return this[S.onPageCommitVisible$1];
    }
    set onPageCommitVisible(value) {
      this[S.onPageCommitVisible$1] = value;
    }
    get onTitleChanged() {
      return this[S.onTitleChanged$1];
    }
    set onTitleChanged(value) {
      this[S.onTitleChanged$1] = value;
    }
    get iosOnDidReceiveServerRedirectForProvisionalNavigation() {
      return this[S.iosOnDidReceiveServerRedirectForProvisionalNavigation$1];
    }
    set iosOnDidReceiveServerRedirectForProvisionalNavigation(value) {
      this[S.iosOnDidReceiveServerRedirectForProvisionalNavigation$1] = value;
    }
    get iosOnWebContentProcessDidTerminate() {
      return this[S.iosOnWebContentProcessDidTerminate$1];
    }
    set iosOnWebContentProcessDidTerminate(value) {
      this[S.iosOnWebContentProcessDidTerminate$1] = value;
    }
    get iosOnNavigationResponse() {
      return this[S.iosOnNavigationResponse$1];
    }
    set iosOnNavigationResponse(value) {
      this[S.iosOnNavigationResponse$1] = value;
    }
    get iosShouldAllowDeprecatedTLS() {
      return this[S.iosShouldAllowDeprecatedTLS$1];
    }
    set iosShouldAllowDeprecatedTLS(value) {
      this[S.iosShouldAllowDeprecatedTLS$1] = value;
    }
    get onAjaxProgress() {
      return this[S.onAjaxProgress$1];
    }
    set onAjaxProgress(value) {
      this[S.onAjaxProgress$1] = value;
    }
    get onAjaxReadyStateChange() {
      return this[S.onAjaxReadyStateChange$1];
    }
    set onAjaxReadyStateChange(value) {
      this[S.onAjaxReadyStateChange$1] = value;
    }
    get onConsoleMessage() {
      return this[S.onConsoleMessage$1];
    }
    set onConsoleMessage(value) {
      this[S.onConsoleMessage$1] = value;
    }
    get onCreateWindow() {
      return this[S.onCreateWindow$1];
    }
    set onCreateWindow(value) {
      this[S.onCreateWindow$1] = value;
    }
    get onCloseWindow() {
      return this[S.onCloseWindow$1];
    }
    set onCloseWindow(value) {
      this[S.onCloseWindow$1] = value;
    }
    get onWindowFocus() {
      return this[S.onWindowFocus$1];
    }
    set onWindowFocus(value) {
      this[S.onWindowFocus$1] = value;
    }
    get onWindowBlur() {
      return this[S.onWindowBlur$1];
    }
    set onWindowBlur(value) {
      this[S.onWindowBlur$1] = value;
    }
    get onDownloadStart() {
      return this[S.onDownloadStart$1];
    }
    set onDownloadStart(value) {
      this[S.onDownloadStart$1] = value;
    }
    get onFindResultReceived() {
      return this[S.onFindResultReceived$1];
    }
    set onFindResultReceived(value) {
      this[S.onFindResultReceived$1] = value;
    }
    get onJsAlert() {
      return this[S.onJsAlert$1];
    }
    set onJsAlert(value) {
      this[S.onJsAlert$1] = value;
    }
    get onJsConfirm() {
      return this[S.onJsConfirm$1];
    }
    set onJsConfirm(value) {
      this[S.onJsConfirm$1] = value;
    }
    get onJsPrompt() {
      return this[S.onJsPrompt$1];
    }
    set onJsPrompt(value) {
      this[S.onJsPrompt$1] = value;
    }
    get onLoadError() {
      return this[S.onLoadError$1];
    }
    set onLoadError(value) {
      this[S.onLoadError$1] = value;
    }
    get onLoadHttpError() {
      return this[S.onLoadHttpError$1];
    }
    set onLoadHttpError(value) {
      this[S.onLoadHttpError$1] = value;
    }
    get onLoadResource() {
      return this[S.onLoadResource$1];
    }
    set onLoadResource(value) {
      this[S.onLoadResource$1] = value;
    }
    get onLoadResourceCustomScheme() {
      return this[S.onLoadResourceCustomScheme$1];
    }
    set onLoadResourceCustomScheme(value) {
      this[S.onLoadResourceCustomScheme$1] = value;
    }
    get onLoadStart() {
      return this[S.onLoadStart$1];
    }
    set onLoadStart(value) {
      this[S.onLoadStart$1] = value;
    }
    get onLoadStop() {
      return this[S.onLoadStop$1];
    }
    set onLoadStop(value) {
      this[S.onLoadStop$1] = value;
    }
    get onLongPressHitTestResult() {
      return this[S.onLongPressHitTestResult$1];
    }
    set onLongPressHitTestResult(value) {
      this[S.onLongPressHitTestResult$1] = value;
    }
    get onPrint() {
      return this[S.onPrint$1];
    }
    set onPrint(value) {
      this[S.onPrint$1] = value;
    }
    get onProgressChanged() {
      return this[S.onProgressChanged$1];
    }
    set onProgressChanged(value) {
      this[S.onProgressChanged$1] = value;
    }
    get onReceivedClientCertRequest() {
      return this[S.onReceivedClientCertRequest$1];
    }
    set onReceivedClientCertRequest(value) {
      this[S.onReceivedClientCertRequest$1] = value;
    }
    get onReceivedHttpAuthRequest() {
      return this[S.onReceivedHttpAuthRequest$1];
    }
    set onReceivedHttpAuthRequest(value) {
      this[S.onReceivedHttpAuthRequest$1] = value;
    }
    get onReceivedServerTrustAuthRequest() {
      return this[S.onReceivedServerTrustAuthRequest$1];
    }
    set onReceivedServerTrustAuthRequest(value) {
      this[S.onReceivedServerTrustAuthRequest$1] = value;
    }
    get onScrollChanged() {
      return this[S.onScrollChanged$1];
    }
    set onScrollChanged(value) {
      this[S.onScrollChanged$1] = value;
    }
    get onUpdateVisitedHistory() {
      return this[S.onUpdateVisitedHistory$1];
    }
    set onUpdateVisitedHistory(value) {
      this[S.onUpdateVisitedHistory$1] = value;
    }
    get onWebViewCreated() {
      return this[S.onWebViewCreated$1];
    }
    set onWebViewCreated(value) {
      this[S.onWebViewCreated$1] = value;
    }
    get shouldInterceptAjaxRequest() {
      return this[S.shouldInterceptAjaxRequest$1];
    }
    set shouldInterceptAjaxRequest(value) {
      this[S.shouldInterceptAjaxRequest$1] = value;
    }
    get shouldInterceptFetchRequest() {
      return this[S.shouldInterceptFetchRequest$1];
    }
    set shouldInterceptFetchRequest(value) {
      this[S.shouldInterceptFetchRequest$1] = value;
    }
    get shouldOverrideUrlLoading() {
      return this[S.shouldOverrideUrlLoading$1];
    }
    set shouldOverrideUrlLoading(value) {
      this[S.shouldOverrideUrlLoading$1] = value;
    }
    get onEnterFullscreen() {
      return this[S.onEnterFullscreen$1];
    }
    set onEnterFullscreen(value) {
      this[S.onEnterFullscreen$1] = value;
    }
    get onExitFullscreen() {
      return this[S.onExitFullscreen$1];
    }
    set onExitFullscreen(value) {
      this[S.onExitFullscreen$1] = value;
    }
    get onOverScrolled() {
      return this[S.onOverScrolled$1];
    }
    set onOverScrolled(value) {
      this[S.onOverScrolled$1] = value;
    }
    get onZoomScaleChanged() {
      return this[S.onZoomScaleChanged$1];
    }
    set onZoomScaleChanged(value) {
      this[S.onZoomScaleChanged$1] = value;
    }
    get androidShouldInterceptRequest() {
      return this[S.androidShouldInterceptRequest$1];
    }
    set androidShouldInterceptRequest(value) {
      this[S.androidShouldInterceptRequest$1] = value;
    }
    get androidOnRenderProcessUnresponsive() {
      return this[S.androidOnRenderProcessUnresponsive$1];
    }
    set androidOnRenderProcessUnresponsive(value) {
      this[S.androidOnRenderProcessUnresponsive$1] = value;
    }
    get androidOnRenderProcessResponsive() {
      return this[S.androidOnRenderProcessResponsive$1];
    }
    set androidOnRenderProcessResponsive(value) {
      this[S.androidOnRenderProcessResponsive$1] = value;
    }
    get androidOnRenderProcessGone() {
      return this[S.androidOnRenderProcessGone$1];
    }
    set androidOnRenderProcessGone(value) {
      this[S.androidOnRenderProcessGone$1] = value;
    }
    get androidOnFormResubmission() {
      return this[S.androidOnFormResubmission$1];
    }
    set androidOnFormResubmission(value) {
      this[S.androidOnFormResubmission$1] = value;
    }
    get androidOnScaleChanged() {
      return this[S.androidOnScaleChanged$1];
    }
    set androidOnScaleChanged(value) {
      this[S.androidOnScaleChanged$1] = value;
    }
    get androidOnReceivedIcon() {
      return this[S.androidOnReceivedIcon$1];
    }
    set androidOnReceivedIcon(value) {
      this[S.androidOnReceivedIcon$1] = value;
    }
    get androidOnReceivedTouchIconUrl() {
      return this[S.androidOnReceivedTouchIconUrl$1];
    }
    set androidOnReceivedTouchIconUrl(value) {
      this[S.androidOnReceivedTouchIconUrl$1] = value;
    }
    get androidOnJsBeforeUnload() {
      return this[S.androidOnJsBeforeUnload$1];
    }
    set androidOnJsBeforeUnload(value) {
      this[S.androidOnJsBeforeUnload$1] = value;
    }
    get androidOnReceivedLoginRequest() {
      return this[S.androidOnReceivedLoginRequest$1];
    }
    set androidOnReceivedLoginRequest(value) {
      this[S.androidOnReceivedLoginRequest$1] = value;
    }
    get id() {
      let t22;
      return dart.test(this[S.__HeadlessInAppWebView_id_isSet]) ? (t22 = this[S.__HeadlessInAppWebView_id], t22) : dart.throw(new _internal.LateError.fieldNI("id"));
    }
    set id(t22) {
      if (t22 == null) dart.nullFailed(I[38], 23, 21, "null");
      if (dart.test(this[S.__HeadlessInAppWebView_id_isSet]))
        dart.throw(new _internal.LateError.fieldAI("id"));
      else {
        this[S.__HeadlessInAppWebView_id_isSet] = true;
        this[S.__HeadlessInAppWebView_id] = t22;
      }
    }
    get [S._channel$1]() {
      let t23;
      return dart.test(this[S.__HeadlessInAppWebView__channel_isSet]) ? (t23 = this[S.__HeadlessInAppWebView__channel], t23) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel$1](t23) {
      if (t23 == null) dart.nullFailed(I[38], 30, 22, "null");
      this[S.__HeadlessInAppWebView__channel_isSet] = true;
      this[S.__HeadlessInAppWebView__channel] = t23;
    }
    get webViewController() {
      let t24;
      return dart.test(this[S.__HeadlessInAppWebView_webViewController_isSet]) ? (t24 = this[S.__HeadlessInAppWebView_webViewController], t24) : dart.throw(new _internal.LateError.fieldNI("webViewController"));
    }
    set webViewController(t24) {
      if (t24 == null) dart.nullFailed(I[38], 33, 37, "null");
      if (dart.test(this[S.__HeadlessInAppWebView_webViewController_isSet]))
        dart.throw(new _internal.LateError.fieldAI("webViewController"));
      else {
        this[S.__HeadlessInAppWebView_webViewController_isSet] = true;
        this[S.__HeadlessInAppWebView_webViewController] = t24;
      }
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[38], 117, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        let t25;
        switch (call.method) {
          case "onWebViewCreated":
          {
            t25 = this.pullToRefreshController;
            t25 == null ? null : t25.initMethodChannel(this.id);
            if (this.onWebViewCreated != null) {
              dart.nullCheck(this.onWebViewCreated)(this.webViewController);
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
        return null;
      }).bind(this));
    }
    run() {
      return async.async(dart.void, (function* run() {
        if (dart.test(this[S._started])) {
          return;
        }
        this[S._started] = true;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("id", dart.fn(() => this.id, T.VoidToString()));
        args[S.$putIfAbsent]("params", dart.fn(() => {
          let t25, t25$, t25$0, t25$1, t25$2, t25$3, t25$4, t25$5, t25$6, t25$7;
          return new (T.IdentityMapOfString$dynamic()).from(["initialUrlRequest", (t25 = this.initialUrlRequest, t25 == null ? new types.URLRequest.new({url: core.Uri.parse("about:blank")}) : t25).toMap(), "initialFile", this.initialFile, "initialData", (t25$ = this.initialData, t25$ == null ? null : t25$.toMap()), "initialOptions", (t25$1 = (t25$0 = this.initialOptions, t25$0 == null ? null : t25$0.toMap()), t25$1 == null ? new _js_helper.LinkedMap.new() : t25$1), "contextMenu", (t25$3 = (t25$2 = this.contextMenu, t25$2 == null ? null : t25$2.toMap()), t25$3 == null ? new _js_helper.LinkedMap.new() : t25$3), "windowId", this.windowId, "initialUserScripts", (t25$5 = (t25$4 = this.initialUserScripts, t25$4 == null ? null : t25$4[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
              if (e == null) dart.nullFailed(I[38], 151, 49, "e");
              return e.toMap();
            }, T.UserScriptToMapOfString$dynamic()))[S.$toList]()), t25$5 == null ? [] : t25$5), "pullToRefreshOptions", (t25$7 = (t25$6 = this.pullToRefreshController, t25$6 == null ? null : t25$6.options.toMap()), t25$7 == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t25$7), "initialSize", util['MapSize|toMap'](this.initialSize)]);
        }, T.VoidToMapOfString$dynamic()));
        yield headless_in_app_webview.HeadlessInAppWebView._sharedChannel.invokeMethod(dart.dynamic, "run", args);
        this[S._running] = true;
      }).bind(this));
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (!dart.test(this[S._running])) {
          return;
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$1].invokeMethod(dart.dynamic, "dispose", args);
        this[S._started] = false;
        this[S._running] = false;
      }).bind(this));
    }
    isRunning() {
      return this[S._running];
    }
    setSize(size) {
      if (size == null) dart.nullFailed(I[38], 185, 29, "size");
      return async.async(dart.void, (function* setSize() {
        if (!dart.test(this[S._running])) {
          return;
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("size", dart.fn(() => util['MapSize|toMap'](size), T.VoidToMapOfString$double()));
        yield this[S._channel$1].invokeMethod(dart.dynamic, "setSize", args);
      }).bind(this));
    }
    getSize() {
      return async.async(T.SizeN(), (function* getSize() {
        let t25;
        if (!dart.test(this[S._running])) {
          return null;
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let sizeMap = T.MapOfString$dynamic().as((t25 = (yield this[S._channel$1].invokeMethod(dart.dynamic, "getSize", args)), t25 == null ? null : dart.dgsend(t25, [core.String, dart.dynamic], 'cast', [])));
        return util['MapSize|fromMap'](sizeMap);
      }).bind(this));
    }
  };
  (headless_in_app_webview.HeadlessInAppWebView.new = function(opts) {
    let initialSize = opts && 'initialSize' in opts ? opts.initialSize : C[58] || CT.C58;
    if (initialSize == null) dart.nullFailed(I[38], 47, 13, "initialSize");
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let initialUrlRequest = opts && 'initialUrlRequest' in opts ? opts.initialUrlRequest : null;
    let initialFile = opts && 'initialFile' in opts ? opts.initialFile : null;
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let initialOptions = opts && 'initialOptions' in opts ? opts.initialOptions : null;
    let contextMenu = opts && 'contextMenu' in opts ? opts.contextMenu : null;
    let initialUserScripts = opts && 'initialUserScripts' in opts ? opts.initialUserScripts : null;
    let pullToRefreshController = opts && 'pullToRefreshController' in opts ? opts.pullToRefreshController : null;
    let onWebViewCreated = opts && 'onWebViewCreated' in opts ? opts.onWebViewCreated : null;
    let onLoadStart = opts && 'onLoadStart' in opts ? opts.onLoadStart : null;
    let onLoadStop = opts && 'onLoadStop' in opts ? opts.onLoadStop : null;
    let onLoadError = opts && 'onLoadError' in opts ? opts.onLoadError : null;
    let onLoadHttpError = opts && 'onLoadHttpError' in opts ? opts.onLoadHttpError : null;
    let onProgressChanged = opts && 'onProgressChanged' in opts ? opts.onProgressChanged : null;
    let onConsoleMessage = opts && 'onConsoleMessage' in opts ? opts.onConsoleMessage : null;
    let shouldOverrideUrlLoading = opts && 'shouldOverrideUrlLoading' in opts ? opts.shouldOverrideUrlLoading : null;
    let onLoadResource = opts && 'onLoadResource' in opts ? opts.onLoadResource : null;
    let onScrollChanged = opts && 'onScrollChanged' in opts ? opts.onScrollChanged : null;
    let onDownloadStart = opts && 'onDownloadStart' in opts ? opts.onDownloadStart : null;
    let onLoadResourceCustomScheme = opts && 'onLoadResourceCustomScheme' in opts ? opts.onLoadResourceCustomScheme : null;
    let onCreateWindow = opts && 'onCreateWindow' in opts ? opts.onCreateWindow : null;
    let onCloseWindow = opts && 'onCloseWindow' in opts ? opts.onCloseWindow : null;
    let onJsAlert = opts && 'onJsAlert' in opts ? opts.onJsAlert : null;
    let onJsConfirm = opts && 'onJsConfirm' in opts ? opts.onJsConfirm : null;
    let onJsPrompt = opts && 'onJsPrompt' in opts ? opts.onJsPrompt : null;
    let onReceivedHttpAuthRequest = opts && 'onReceivedHttpAuthRequest' in opts ? opts.onReceivedHttpAuthRequest : null;
    let onReceivedServerTrustAuthRequest = opts && 'onReceivedServerTrustAuthRequest' in opts ? opts.onReceivedServerTrustAuthRequest : null;
    let onReceivedClientCertRequest = opts && 'onReceivedClientCertRequest' in opts ? opts.onReceivedClientCertRequest : null;
    let onFindResultReceived = opts && 'onFindResultReceived' in opts ? opts.onFindResultReceived : null;
    let shouldInterceptAjaxRequest = opts && 'shouldInterceptAjaxRequest' in opts ? opts.shouldInterceptAjaxRequest : null;
    let onAjaxReadyStateChange = opts && 'onAjaxReadyStateChange' in opts ? opts.onAjaxReadyStateChange : null;
    let onAjaxProgress = opts && 'onAjaxProgress' in opts ? opts.onAjaxProgress : null;
    let shouldInterceptFetchRequest = opts && 'shouldInterceptFetchRequest' in opts ? opts.shouldInterceptFetchRequest : null;
    let onUpdateVisitedHistory = opts && 'onUpdateVisitedHistory' in opts ? opts.onUpdateVisitedHistory : null;
    let onPrint = opts && 'onPrint' in opts ? opts.onPrint : null;
    let onLongPressHitTestResult = opts && 'onLongPressHitTestResult' in opts ? opts.onLongPressHitTestResult : null;
    let onEnterFullscreen = opts && 'onEnterFullscreen' in opts ? opts.onEnterFullscreen : null;
    let onExitFullscreen = opts && 'onExitFullscreen' in opts ? opts.onExitFullscreen : null;
    let onPageCommitVisible = opts && 'onPageCommitVisible' in opts ? opts.onPageCommitVisible : null;
    let onTitleChanged = opts && 'onTitleChanged' in opts ? opts.onTitleChanged : null;
    let onWindowFocus = opts && 'onWindowFocus' in opts ? opts.onWindowFocus : null;
    let onWindowBlur = opts && 'onWindowBlur' in opts ? opts.onWindowBlur : null;
    let onOverScrolled = opts && 'onOverScrolled' in opts ? opts.onOverScrolled : null;
    let androidOnSafeBrowsingHit = opts && 'androidOnSafeBrowsingHit' in opts ? opts.androidOnSafeBrowsingHit : null;
    let androidOnPermissionRequest = opts && 'androidOnPermissionRequest' in opts ? opts.androidOnPermissionRequest : null;
    let androidOnGeolocationPermissionsShowPrompt = opts && 'androidOnGeolocationPermissionsShowPrompt' in opts ? opts.androidOnGeolocationPermissionsShowPrompt : null;
    let androidOnGeolocationPermissionsHidePrompt = opts && 'androidOnGeolocationPermissionsHidePrompt' in opts ? opts.androidOnGeolocationPermissionsHidePrompt : null;
    let androidShouldInterceptRequest = opts && 'androidShouldInterceptRequest' in opts ? opts.androidShouldInterceptRequest : null;
    let androidOnRenderProcessGone = opts && 'androidOnRenderProcessGone' in opts ? opts.androidOnRenderProcessGone : null;
    let androidOnRenderProcessResponsive = opts && 'androidOnRenderProcessResponsive' in opts ? opts.androidOnRenderProcessResponsive : null;
    let androidOnRenderProcessUnresponsive = opts && 'androidOnRenderProcessUnresponsive' in opts ? opts.androidOnRenderProcessUnresponsive : null;
    let androidOnFormResubmission = opts && 'androidOnFormResubmission' in opts ? opts.androidOnFormResubmission : null;
    let androidOnScaleChanged = opts && 'androidOnScaleChanged' in opts ? opts.androidOnScaleChanged : null;
    let androidOnReceivedIcon = opts && 'androidOnReceivedIcon' in opts ? opts.androidOnReceivedIcon : null;
    let androidOnReceivedTouchIconUrl = opts && 'androidOnReceivedTouchIconUrl' in opts ? opts.androidOnReceivedTouchIconUrl : null;
    let androidOnJsBeforeUnload = opts && 'androidOnJsBeforeUnload' in opts ? opts.androidOnJsBeforeUnload : null;
    let androidOnReceivedLoginRequest = opts && 'androidOnReceivedLoginRequest' in opts ? opts.androidOnReceivedLoginRequest : null;
    let iosOnWebContentProcessDidTerminate = opts && 'iosOnWebContentProcessDidTerminate' in opts ? opts.iosOnWebContentProcessDidTerminate : null;
    let iosOnDidReceiveServerRedirectForProvisionalNavigation = opts && 'iosOnDidReceiveServerRedirectForProvisionalNavigation' in opts ? opts.iosOnDidReceiveServerRedirectForProvisionalNavigation : null;
    let iosOnNavigationResponse = opts && 'iosOnNavigationResponse' in opts ? opts.iosOnNavigationResponse : null;
    let iosShouldAllowDeprecatedTLS = opts && 'iosShouldAllowDeprecatedTLS' in opts ? opts.iosShouldAllowDeprecatedTLS : null;
    this[S.__HeadlessInAppWebView_id] = null;
    this[S.__HeadlessInAppWebView_id_isSet] = false;
    this[S._started] = false;
    this[S._running] = false;
    this[S.__HeadlessInAppWebView__channel] = null;
    this[S.__HeadlessInAppWebView__channel_isSet] = false;
    this[S.__HeadlessInAppWebView_webViewController] = null;
    this[S.__HeadlessInAppWebView_webViewController_isSet] = false;
    this[S.onZoomScaleChanged$1] = null;
    this[S.initialSize] = initialSize;
    this[S.windowId$1] = windowId;
    this[S.initialUrlRequest$1] = initialUrlRequest;
    this[S.initialFile$1] = initialFile;
    this[S.initialData$1] = initialData;
    this[S.initialOptions$1] = initialOptions;
    this[S.contextMenu$1] = contextMenu;
    this[S.initialUserScripts$1] = initialUserScripts;
    this[S.pullToRefreshController$1] = pullToRefreshController;
    this[S.onWebViewCreated$1] = onWebViewCreated;
    this[S.onLoadStart$1] = onLoadStart;
    this[S.onLoadStop$1] = onLoadStop;
    this[S.onLoadError$1] = onLoadError;
    this[S.onLoadHttpError$1] = onLoadHttpError;
    this[S.onProgressChanged$1] = onProgressChanged;
    this[S.onConsoleMessage$1] = onConsoleMessage;
    this[S.shouldOverrideUrlLoading$1] = shouldOverrideUrlLoading;
    this[S.onLoadResource$1] = onLoadResource;
    this[S.onScrollChanged$1] = onScrollChanged;
    this[S.onDownloadStart$1] = onDownloadStart;
    this[S.onLoadResourceCustomScheme$1] = onLoadResourceCustomScheme;
    this[S.onCreateWindow$1] = onCreateWindow;
    this[S.onCloseWindow$1] = onCloseWindow;
    this[S.onJsAlert$1] = onJsAlert;
    this[S.onJsConfirm$1] = onJsConfirm;
    this[S.onJsPrompt$1] = onJsPrompt;
    this[S.onReceivedHttpAuthRequest$1] = onReceivedHttpAuthRequest;
    this[S.onReceivedServerTrustAuthRequest$1] = onReceivedServerTrustAuthRequest;
    this[S.onReceivedClientCertRequest$1] = onReceivedClientCertRequest;
    this[S.onFindResultReceived$1] = onFindResultReceived;
    this[S.shouldInterceptAjaxRequest$1] = shouldInterceptAjaxRequest;
    this[S.onAjaxReadyStateChange$1] = onAjaxReadyStateChange;
    this[S.onAjaxProgress$1] = onAjaxProgress;
    this[S.shouldInterceptFetchRequest$1] = shouldInterceptFetchRequest;
    this[S.onUpdateVisitedHistory$1] = onUpdateVisitedHistory;
    this[S.onPrint$1] = onPrint;
    this[S.onLongPressHitTestResult$1] = onLongPressHitTestResult;
    this[S.onEnterFullscreen$1] = onEnterFullscreen;
    this[S.onExitFullscreen$1] = onExitFullscreen;
    this[S.onPageCommitVisible$1] = onPageCommitVisible;
    this[S.onTitleChanged$1] = onTitleChanged;
    this[S.onWindowFocus$1] = onWindowFocus;
    this[S.onWindowBlur$1] = onWindowBlur;
    this[S.onOverScrolled$1] = onOverScrolled;
    this[S.androidOnSafeBrowsingHit$1] = androidOnSafeBrowsingHit;
    this[S.androidOnPermissionRequest$1] = androidOnPermissionRequest;
    this[S.androidOnGeolocationPermissionsShowPrompt$1] = androidOnGeolocationPermissionsShowPrompt;
    this[S.androidOnGeolocationPermissionsHidePrompt$1] = androidOnGeolocationPermissionsHidePrompt;
    this[S.androidShouldInterceptRequest$1] = androidShouldInterceptRequest;
    this[S.androidOnRenderProcessGone$1] = androidOnRenderProcessGone;
    this[S.androidOnRenderProcessResponsive$1] = androidOnRenderProcessResponsive;
    this[S.androidOnRenderProcessUnresponsive$1] = androidOnRenderProcessUnresponsive;
    this[S.androidOnFormResubmission$1] = androidOnFormResubmission;
    this[S.androidOnScaleChanged$1] = androidOnScaleChanged;
    this[S.androidOnReceivedIcon$1] = androidOnReceivedIcon;
    this[S.androidOnReceivedTouchIconUrl$1] = androidOnReceivedTouchIconUrl;
    this[S.androidOnJsBeforeUnload$1] = androidOnJsBeforeUnload;
    this[S.androidOnReceivedLoginRequest$1] = androidOnReceivedLoginRequest;
    this[S.iosOnWebContentProcessDidTerminate$1] = iosOnWebContentProcessDidTerminate;
    this[S.iosOnDidReceiveServerRedirectForProvisionalNavigation$1] = iosOnDidReceiveServerRedirectForProvisionalNavigation;
    this[S.iosOnNavigationResponse$1] = iosOnNavigationResponse;
    this[S.iosShouldAllowDeprecatedTLS$1] = iosShouldAllowDeprecatedTLS;
    this.id = util.IdGenerator.generate();
    this.webViewController = new in_app_webview_controller$0.InAppWebViewController.new(this.id, this);
    this[S._channel$1] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_headless_inappwebview_" + dart.str(this.id));
    this[S._channel$1].setMethodCallHandler(dart.bind(this, 'handleMethod'));
  }).prototype = headless_in_app_webview.HeadlessInAppWebView.prototype;
  dart.addTypeTests(headless_in_app_webview.HeadlessInAppWebView);
  dart.addTypeCaches(headless_in_app_webview.HeadlessInAppWebView);
  headless_in_app_webview.HeadlessInAppWebView[dart.implements] = () => [webview.WebView];
  dart.setMethodSignature(headless_in_app_webview.HeadlessInAppWebView, () => ({
    __proto__: dart.getMethods(headless_in_app_webview.HeadlessInAppWebView.__proto__),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall]),
    run: dart.fnType(async.Future$(dart.void), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    isRunning: dart.fnType(core.bool, []),
    setSize: dart.fnType(async.Future$(dart.void), [ui.Size]),
    getSize: dart.fnType(async.Future$(dart.nullable(ui.Size)), [])
  }));
  dart.setGetterSignature(headless_in_app_webview.HeadlessInAppWebView, () => ({
    __proto__: dart.getGetters(headless_in_app_webview.HeadlessInAppWebView.__proto__),
    id: core.String,
    [S._channel$1]: platform_channel.MethodChannel,
    webViewController: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setSetterSignature(headless_in_app_webview.HeadlessInAppWebView, () => ({
    __proto__: dart.getSetters(headless_in_app_webview.HeadlessInAppWebView.__proto__),
    id: core.String,
    [S._channel$1]: platform_channel.MethodChannel,
    webViewController: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setLibraryUri(headless_in_app_webview.HeadlessInAppWebView, I[39]);
  dart.setFieldSignature(headless_in_app_webview.HeadlessInAppWebView, () => ({
    __proto__: dart.getFields(headless_in_app_webview.HeadlessInAppWebView.__proto__),
    [S.__HeadlessInAppWebView_id]: dart.fieldType(dart.nullable(core.String)),
    [S.__HeadlessInAppWebView_id_isSet]: dart.fieldType(core.bool),
    [S._started]: dart.fieldType(core.bool),
    [S._running]: dart.fieldType(core.bool),
    [S.__HeadlessInAppWebView__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__HeadlessInAppWebView__channel_isSet]: dart.fieldType(core.bool),
    [S.__HeadlessInAppWebView_webViewController]: dart.fieldType(dart.nullable(in_app_webview_controller$0.InAppWebViewController)),
    [S.__HeadlessInAppWebView_webViewController_isSet]: dart.fieldType(core.bool),
    windowId: dart.finalFieldType(dart.nullable(core.int)),
    initialSize: dart.finalFieldType(ui.Size),
    initialData: dart.finalFieldType(dart.nullable(types.InAppWebViewInitialData)),
    initialFile: dart.finalFieldType(dart.nullable(core.String)),
    initialOptions: dart.finalFieldType(dart.nullable(in_app_webview_options$0.InAppWebViewGroupOptions)),
    contextMenu: dart.finalFieldType(dart.nullable(context_menu.ContextMenu)),
    initialUrlRequest: dart.finalFieldType(dart.nullable(types.URLRequest)),
    initialUserScripts: dart.finalFieldType(dart.nullable(collection.UnmodifiableListView$(types.UserScript))),
    pullToRefreshController: dart.finalFieldType(dart.nullable(pull_to_refresh_controller.PullToRefreshController)),
    androidOnGeolocationPermissionsHidePrompt: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    androidOnGeolocationPermissionsShowPrompt: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.GeolocationPermissionShowPromptResponse)), [in_app_webview_controller$0.InAppWebViewController, core.String]))),
    androidOnPermissionRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.PermissionRequestResponse)), [in_app_webview_controller$0.InAppWebViewController, core.String, core.List$(core.String)]))),
    androidOnSafeBrowsingHit: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.SafeBrowsingResponse)), [in_app_webview_controller$0.InAppWebViewController, core.Uri, dart.nullable(types.SafeBrowsingThreat)]))),
    onPageCommitVisible: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onTitleChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.String)]))),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    iosOnWebContentProcessDidTerminate: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    iosOnNavigationResponse: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.IOSNavigationResponseAction)), [in_app_webview_controller$0.InAppWebViewController, types.IOSWKNavigationResponse]))),
    iosShouldAllowDeprecatedTLS: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.IOSShouldAllowDeprecatedTLSAction)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onAjaxProgress: dart.fieldType(dart.nullable(dart.fnType(async.Future$(types.AjaxRequestAction), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    onAjaxReadyStateChange: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequestAction)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    onConsoleMessage: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.ConsoleMessage]))),
    onCreateWindow: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(core.bool)), [in_app_webview_controller$0.InAppWebViewController, types.CreateWindowAction]))),
    onCloseWindow: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onWindowFocus: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onWindowBlur: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onDownloadStart: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.Uri]))),
    onFindResultReceived: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int, core.bool]))),
    onJsAlert: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsAlertResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsAlertRequest]))),
    onJsConfirm: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsConfirmResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsConfirmRequest]))),
    onJsPrompt: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsPromptResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsPromptRequest]))),
    onLoadError: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), core.int, core.String]))),
    onLoadHttpError: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), core.int, core.String]))),
    onLoadResource: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.LoadedResource]))),
    onLoadResourceCustomScheme: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.CustomSchemeResponse)), [in_app_webview_controller$0.InAppWebViewController, core.Uri]))),
    onLoadStart: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLoadStop: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLongPressHitTestResult: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.InAppWebViewHitTestResult]))),
    onPrint: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onProgressChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int]))),
    onReceivedClientCertRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.ClientCertResponse)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onReceivedHttpAuthRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.HttpAuthResponse)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onReceivedServerTrustAuthRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.ServerTrustAuthResponse)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    onScrollChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int]))),
    onUpdateVisitedHistory: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), dart.nullable(core.bool)]))),
    onWebViewCreated: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    shouldInterceptAjaxRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequest)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    shouldInterceptFetchRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.FetchRequest)), [in_app_webview_controller$0.InAppWebViewController, types.FetchRequest]))),
    shouldOverrideUrlLoading: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.NavigationActionPolicy)), [in_app_webview_controller$0.InAppWebViewController, types.NavigationAction]))),
    onEnterFullscreen: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onExitFullscreen: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onOverScrolled: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int, core.bool, core.bool]))),
    onZoomScaleChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.double, core.double]))),
    androidShouldInterceptRequest: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebResourceResponse)), [in_app_webview_controller$0.InAppWebViewController, types.WebResourceRequest]))),
    androidOnRenderProcessUnresponsive: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebViewRenderProcessAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnRenderProcessResponsive: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebViewRenderProcessAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnRenderProcessGone: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.RenderProcessGoneDetail]))),
    androidOnFormResubmission: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.FormResubmissionAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnScaleChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.double, core.double]))),
    androidOnReceivedIcon: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, typed_data.Uint8List]))),
    androidOnReceivedTouchIconUrl: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.Uri, core.bool]))),
    androidOnJsBeforeUnload: dart.fieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsBeforeUnloadResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsBeforeUnloadRequest]))),
    androidOnReceivedLoginRequest: dart.fieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.LoginRequest])))
  }));
  dart.defineLazy(headless_in_app_webview.HeadlessInAppWebView, {
    /*headless_in_app_webview.HeadlessInAppWebView._sharedChannel*/get _sharedChannel() {
      return C[59] || CT.C59;
    }
  }, false);
  web_message_listener.WebMessageListener = class WebMessageListener extends core.Object {
    get jsObjectName() {
      return this[S.jsObjectName];
    }
    set jsObjectName(value) {
      super.jsObjectName = value;
    }
    get onPostMessage() {
      return this[S.onPostMessage];
    }
    set onPostMessage(value) {
      this[S.onPostMessage] = value;
    }
    get allowedOriginRules() {
      let t25;
      return dart.test(this[S.__WebMessageListener_allowedOriginRules_isSet]) ? (t25 = this[S.__WebMessageListener_allowedOriginRules], t25) : dart.throw(new _internal.LateError.fieldNI("allowedOriginRules"));
    }
    set allowedOriginRules(t25) {
      if (t25 == null) dart.nullFailed(I[40], 11, 20, "null");
      this[S.__WebMessageListener_allowedOriginRules_isSet] = true;
      this[S.__WebMessageListener_allowedOriginRules] = t25;
    }
    get [S._channel$2]() {
      let t26;
      return dart.test(this[S.__WebMessageListener__channel_isSet]) ? (t26 = this[S.__WebMessageListener__channel], t26) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel$2](t26) {
      if (t26 == null) dart.nullFailed(I[40], 27, 22, "null");
      this[S.__WebMessageListener__channel_isSet] = true;
      this[S.__WebMessageListener__channel] = t26;
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[40], 42, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        switch (call.method) {
          case "onPostMessage":
          {
            if (this[S._replyProxy] == null) {
              this[S._replyProxy] = new web_message_listener.JavaScriptReplyProxy.new(this);
            }
            if (this.onPostMessage != null) {
              let message = T.StringN().as(dart.dsend(call.arguments, '_get', ["message"]));
              let sourceOrigin = dart.dsend(call.arguments, '_get', ["sourceOrigin"]) != null ? core.Uri.parse(core.String.as(dart.dsend(call.arguments, '_get', ["sourceOrigin"]))) : null;
              let isMainFrame = core.bool.as(dart.dsend(call.arguments, '_get', ["isMainFrame"]));
              dart.nullCheck(this.onPostMessage)(message, sourceOrigin, isMainFrame, dart.nullCheck(this[S._replyProxy]));
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
        return null;
      }).bind(this));
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["jsObjectName", this.jsObjectName, "allowedOriginRules", this.allowedOriginRules[S.$toList]()]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (web_message_listener.WebMessageListener.new = function(opts) {
    let jsObjectName = opts && 'jsObjectName' in opts ? opts.jsObjectName : null;
    if (jsObjectName == null) dart.nullFailed(I[40], 30, 22, "jsObjectName");
    let allowedOriginRules = opts && 'allowedOriginRules' in opts ? opts.allowedOriginRules : null;
    let onPostMessage = opts && 'onPostMessage' in opts ? opts.onPostMessage : null;
    this[S.__WebMessageListener_allowedOriginRules] = null;
    this[S.__WebMessageListener_allowedOriginRules_isSet] = false;
    this[S._replyProxy] = null;
    this[S.__WebMessageListener__channel] = null;
    this[S.__WebMessageListener__channel_isSet] = false;
    this[S.jsObjectName] = jsObjectName;
    this[S.onPostMessage] = onPostMessage;
    this.allowedOriginRules = allowedOriginRules != null ? allowedOriginRules : T.LinkedHashSetOfString().from(["*"]);
    if (!!dart.test(this.allowedOriginRules.contains(""))) dart.assertFailed("allowedOriginRules cannot contain empty strings", I[40], 35, 12, "!this.allowedOriginRules.contains(\"\")");
    this[S._channel$2] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappwebview_web_message_listener_" + dart.str(this.jsObjectName));
    this[S._channel$2].setMethodCallHandler(dart.bind(this, 'handleMethod'));
  }).prototype = web_message_listener.WebMessageListener.prototype;
  dart.addTypeTests(web_message_listener.WebMessageListener);
  dart.addTypeCaches(web_message_listener.WebMessageListener);
  dart.setMethodSignature(web_message_listener.WebMessageListener, () => ({
    __proto__: dart.getMethods(web_message_listener.WebMessageListener.__proto__),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall]),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(web_message_listener.WebMessageListener, () => ({
    __proto__: dart.getGetters(web_message_listener.WebMessageListener.__proto__),
    allowedOriginRules: core.Set$(core.String),
    [S._channel$2]: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(web_message_listener.WebMessageListener, () => ({
    __proto__: dart.getSetters(web_message_listener.WebMessageListener.__proto__),
    allowedOriginRules: core.Set$(core.String),
    [S._channel$2]: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(web_message_listener.WebMessageListener, I[41]);
  dart.setFieldSignature(web_message_listener.WebMessageListener, () => ({
    __proto__: dart.getFields(web_message_listener.WebMessageListener.__proto__),
    jsObjectName: dart.finalFieldType(core.String),
    [S.__WebMessageListener_allowedOriginRules]: dart.fieldType(dart.nullable(core.Set$(core.String))),
    [S.__WebMessageListener_allowedOriginRules_isSet]: dart.fieldType(core.bool),
    [S._replyProxy]: dart.fieldType(dart.nullable(web_message_listener.JavaScriptReplyProxy)),
    onPostMessage: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.String), dart.nullable(core.Uri), core.bool, web_message_listener.JavaScriptReplyProxy]))),
    [S.__WebMessageListener__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__WebMessageListener__channel_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(web_message_listener.WebMessageListener, ['toString']);
  web_message_listener.JavaScriptReplyProxy = class JavaScriptReplyProxy extends core.Object {
    get [S._webMessageListener]() {
      let t27;
      return dart.test(this[S.__JavaScriptReplyProxy__webMessageListener_isSet]) ? (t27 = this[S.__JavaScriptReplyProxy__webMessageListener], t27) : dart.throw(new _internal.LateError.fieldNI("_webMessageListener"));
    }
    set [S._webMessageListener](t27) {
      if (t27 == null) dart.nullFailed(I[40], 86, 27, "null");
      this[S.__JavaScriptReplyProxy__webMessageListener_isSet] = true;
      this[S.__JavaScriptReplyProxy__webMessageListener] = t27;
    }
    postMessage(message) {
      if (message == null) dart.nullFailed(I[40], 95, 35, "message");
      return async.async(dart.void, (function* postMessage() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("message", dart.fn(() => message, T.VoidToString()));
        yield this[S._webMessageListener][S._channel$2].invokeMethod(dart.dynamic, "postMessage", args);
      }).bind(this));
    }
  };
  (web_message_listener.JavaScriptReplyProxy.new = function(webMessageListener) {
    if (webMessageListener == null) dart.nullFailed(I[40], 88, 43, "webMessageListener");
    this[S.__JavaScriptReplyProxy__webMessageListener] = null;
    this[S.__JavaScriptReplyProxy__webMessageListener_isSet] = false;
    this[S._webMessageListener] = webMessageListener;
  }).prototype = web_message_listener.JavaScriptReplyProxy.prototype;
  dart.addTypeTests(web_message_listener.JavaScriptReplyProxy);
  dart.addTypeCaches(web_message_listener.JavaScriptReplyProxy);
  dart.setMethodSignature(web_message_listener.JavaScriptReplyProxy, () => ({
    __proto__: dart.getMethods(web_message_listener.JavaScriptReplyProxy.__proto__),
    postMessage: dart.fnType(async.Future$(dart.void), [core.String])
  }));
  dart.setGetterSignature(web_message_listener.JavaScriptReplyProxy, () => ({
    __proto__: dart.getGetters(web_message_listener.JavaScriptReplyProxy.__proto__),
    [S._webMessageListener]: web_message_listener.WebMessageListener
  }));
  dart.setSetterSignature(web_message_listener.JavaScriptReplyProxy, () => ({
    __proto__: dart.getSetters(web_message_listener.JavaScriptReplyProxy.__proto__),
    [S._webMessageListener]: web_message_listener.WebMessageListener
  }));
  dart.setLibraryUri(web_message_listener.JavaScriptReplyProxy, I[41]);
  dart.setFieldSignature(web_message_listener.JavaScriptReplyProxy, () => ({
    __proto__: dart.getFields(web_message_listener.JavaScriptReplyProxy.__proto__),
    [S.__JavaScriptReplyProxy__webMessageListener]: dart.fieldType(dart.nullable(web_message_listener.WebMessageListener)),
    [S.__JavaScriptReplyProxy__webMessageListener_isSet]: dart.fieldType(core.bool)
  }));
  web_message_channel.WebMessageChannel = class WebMessageChannel extends core.Object {
    get id() {
      return this[S.id$1];
    }
    set id(value) {
      super.id = value;
    }
    get port1() {
      return this[S.port1];
    }
    set port1(value) {
      super.port1 = value;
    }
    get port2() {
      return this[S.port2];
    }
    set port2(value) {
      super.port2 = value;
    }
    get [S._channel$3]() {
      let t28;
      return dart.test(this[S.__WebMessageChannel__channel_isSet]) ? (t28 = this[S.__WebMessageChannel__channel], t28) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel$3](t28) {
      if (t28 == null) dart.nullFailed(I[42], 16, 22, "null");
      this[S.__WebMessageChannel__channel_isSet] = true;
      this[S.__WebMessageChannel__channel] = t28;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      let webMessageChannel = new web_message_channel.WebMessageChannel.new({id: core.String.as(map[S.$_get]("id")), port1: new web_message_channel.WebMessagePort.new({index: 0}), port2: new web_message_channel.WebMessagePort.new({index: 1})});
      webMessageChannel.port1[S._webMessageChannel] = webMessageChannel;
      webMessageChannel.port2[S._webMessageChannel] = webMessageChannel;
      return webMessageChannel;
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[42], 38, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        switch (call.method) {
          case "onMessage":
          {
            let index = core.int.as(dart.dsend(call.arguments, '_get', ["index"]));
            let port = index === 0 ? this.port1 : this.port2;
            if (port[S._onMessage] != null) {
              let message = T.StringN().as(dart.dsend(call.arguments, '_get', ["message"]));
              dart.nullCheck(port[S._onMessage])(message);
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
        return null;
      }).bind(this));
    }
  };
  (web_message_channel.WebMessageChannel.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    if (id == null) dart.nullFailed(I[42], 19, 22, "id");
    let port1 = opts && 'port1' in opts ? opts.port1 : null;
    if (port1 == null) dart.nullFailed(I[42], 19, 40, "port1");
    let port2 = opts && 'port2' in opts ? opts.port2 : null;
    if (port2 == null) dart.nullFailed(I[42], 19, 61, "port2");
    this[S.__WebMessageChannel__channel] = null;
    this[S.__WebMessageChannel__channel_isSet] = false;
    this[S.id$1] = id;
    this[S.port1] = port1;
    this[S.port2] = port2;
    this[S._channel$3] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappwebview_web_message_channel_" + dart.str(this.id));
    this[S._channel$3].setMethodCallHandler(dart.bind(this, 'handleMethod'));
  }).prototype = web_message_channel.WebMessageChannel.prototype;
  dart.addTypeTests(web_message_channel.WebMessageChannel);
  dart.addTypeCaches(web_message_channel.WebMessageChannel);
  dart.setMethodSignature(web_message_channel.WebMessageChannel, () => ({
    __proto__: dart.getMethods(web_message_channel.WebMessageChannel.__proto__),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall])
  }));
  dart.setGetterSignature(web_message_channel.WebMessageChannel, () => ({
    __proto__: dart.getGetters(web_message_channel.WebMessageChannel.__proto__),
    [S._channel$3]: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(web_message_channel.WebMessageChannel, () => ({
    __proto__: dart.getSetters(web_message_channel.WebMessageChannel.__proto__),
    [S._channel$3]: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(web_message_channel.WebMessageChannel, I[43]);
  dart.setFieldSignature(web_message_channel.WebMessageChannel, () => ({
    __proto__: dart.getFields(web_message_channel.WebMessageChannel.__proto__),
    id: dart.finalFieldType(core.String),
    port1: dart.finalFieldType(web_message_channel.WebMessagePort),
    port2: dart.finalFieldType(web_message_channel.WebMessagePort),
    [S.__WebMessageChannel__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__WebMessageChannel__channel_isSet]: dart.fieldType(core.bool)
  }));
  web_message_channel.WebMessagePort = class WebMessagePort extends core.Object {
    get [S._index]() {
      let t29;
      return dart.test(this[S.__WebMessagePort__index_isSet]) ? (t29 = this[S.__WebMessagePort__index], t29) : dart.throw(new _internal.LateError.fieldNI("_index"));
    }
    set [S._index](t29) {
      if (t29 == null) dart.nullFailed(I[42], 74, 18, "null");
      if (dart.test(this[S.__WebMessagePort__index_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_index"));
      else {
        this[S.__WebMessagePort__index_isSet] = true;
        this[S.__WebMessagePort__index] = t29;
      }
    }
    get [S._webMessageChannel]() {
      let t30;
      return dart.test(this[S.__WebMessagePort__webMessageChannel_isSet]) ? (t30 = this[S.__WebMessagePort__webMessageChannel], t30) : dart.throw(new _internal.LateError.fieldNI("_webMessageChannel"));
    }
    set [S._webMessageChannel](t30) {
      if (t30 == null) dart.nullFailed(I[42], 77, 26, "null");
      this[S.__WebMessagePort__webMessageChannel_isSet] = true;
      this[S.__WebMessagePort__webMessageChannel] = t30;
    }
    setWebMessageCallback(onMessage) {
      return async.async(dart.void, (function* setWebMessageCallback() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("index", dart.fn(() => this[S._index], T.VoidToint()));
        yield this[S._webMessageChannel][S._channel$3].invokeMethod(dart.dynamic, "setWebMessageCallback", args);
        this[S._onMessage] = onMessage;
      }).bind(this));
    }
    postMessage(message) {
      if (message == null) dart.nullFailed(I[42], 93, 39, "message");
      return async.async(dart.void, (function* postMessage() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("index", dart.fn(() => this[S._index], T.VoidToint()));
        args[S.$putIfAbsent]("message", dart.fn(() => message.toMap(), T.VoidToMapOfString$dynamic()));
        yield this[S._webMessageChannel][S._channel$3].invokeMethod(dart.dynamic, "postMessage", args);
      }).bind(this));
    }
    close() {
      return async.async(dart.void, (function* close() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("index", dart.fn(() => this[S._index], T.VoidToint()));
        yield this[S._webMessageChannel][S._channel$3].invokeMethod(dart.dynamic, "close", args);
      }).bind(this));
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["index", this[S._index], "webMessageChannelId", this[S._webMessageChannel].id]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (web_message_channel.WebMessagePort.new = function(opts) {
    let index = opts && 'index' in opts ? opts.index : null;
    if (index == null) dart.nullFailed(I[42], 79, 32, "index");
    this[S.__WebMessagePort__index] = null;
    this[S.__WebMessagePort__index_isSet] = false;
    this[S._onMessage] = null;
    this[S.__WebMessagePort__webMessageChannel] = null;
    this[S.__WebMessagePort__webMessageChannel_isSet] = false;
    this[S._index] = index;
  }).prototype = web_message_channel.WebMessagePort.prototype;
  dart.addTypeTests(web_message_channel.WebMessagePort);
  dart.addTypeCaches(web_message_channel.WebMessagePort);
  dart.setMethodSignature(web_message_channel.WebMessagePort, () => ({
    __proto__: dart.getMethods(web_message_channel.WebMessagePort.__proto__),
    setWebMessageCallback: dart.fnType(async.Future$(dart.void), [dart.nullable(dart.fnType(dart.void, [dart.nullable(core.String)]))]),
    postMessage: dart.fnType(async.Future$(dart.void), [web_message_channel.WebMessage]),
    close: dart.fnType(async.Future$(dart.void), []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(web_message_channel.WebMessagePort, () => ({
    __proto__: dart.getGetters(web_message_channel.WebMessagePort.__proto__),
    [S._index]: core.int,
    [S._webMessageChannel]: web_message_channel.WebMessageChannel
  }));
  dart.setSetterSignature(web_message_channel.WebMessagePort, () => ({
    __proto__: dart.getSetters(web_message_channel.WebMessagePort.__proto__),
    [S._index]: core.int,
    [S._webMessageChannel]: web_message_channel.WebMessageChannel
  }));
  dart.setLibraryUri(web_message_channel.WebMessagePort, I[43]);
  dart.setFieldSignature(web_message_channel.WebMessagePort, () => ({
    __proto__: dart.getFields(web_message_channel.WebMessagePort.__proto__),
    [S.__WebMessagePort__index]: dart.fieldType(dart.nullable(core.int)),
    [S.__WebMessagePort__index_isSet]: dart.fieldType(core.bool),
    [S._onMessage]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.String)]))),
    [S.__WebMessagePort__webMessageChannel]: dart.fieldType(dart.nullable(web_message_channel.WebMessageChannel)),
    [S.__WebMessagePort__webMessageChannel_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(web_message_channel.WebMessagePort, ['toString']);
  web_message_channel.WebMessage = class WebMessage extends core.Object {
    get data() {
      return this[S.data];
    }
    set data(value) {
      this[S.data] = value;
    }
    get ports() {
      return this[S.ports];
    }
    set ports(value) {
      this[S.ports] = value;
    }
    toMap() {
      let t31;
      return new (T.IdentityMapOfString$dynamic()).from(["data", this.data, "ports", (t31 = this.ports, t31 == null ? null : t31[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
          if (e == null) dart.nullFailed(I[42], 138, 33, "e");
          return e.toMap();
        }, T.WebMessagePortToMapOfString$dynamic()))[S.$toList]())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (web_message_channel.WebMessage.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let ports = opts && 'ports' in opts ? opts.ports : null;
    this[S.data] = data;
    this[S.ports] = ports;
    ;
  }).prototype = web_message_channel.WebMessage.prototype;
  dart.addTypeTests(web_message_channel.WebMessage);
  dart.addTypeCaches(web_message_channel.WebMessage);
  dart.setMethodSignature(web_message_channel.WebMessage, () => ({
    __proto__: dart.getMethods(web_message_channel.WebMessage.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(web_message_channel.WebMessage, I[43]);
  dart.setFieldSignature(web_message_channel.WebMessage, () => ({
    __proto__: dart.getFields(web_message_channel.WebMessage.__proto__),
    data: dart.fieldType(dart.nullable(core.String)),
    ports: dart.fieldType(dart.nullable(core.List$(web_message_channel.WebMessagePort)))
  }));
  dart.defineExtensionMethods(web_message_channel.WebMessage, ['toString']);
  web_storage.WebStorage = class WebStorage extends core.Object {
    get localStorage() {
      return this[S.localStorage];
    }
    set localStorage(value) {
      this[S.localStorage] = value;
    }
    get sessionStorage() {
      return this[S.sessionStorage];
    }
    set sessionStorage(value) {
      this[S.sessionStorage] = value;
    }
  };
  (web_storage.WebStorage.new = function(opts) {
    let localStorage = opts && 'localStorage' in opts ? opts.localStorage : null;
    if (localStorage == null) dart.nullFailed(I[44], 15, 29, "localStorage");
    let sessionStorage = opts && 'sessionStorage' in opts ? opts.sessionStorage : null;
    if (sessionStorage == null) dart.nullFailed(I[44], 15, 57, "sessionStorage");
    this[S.localStorage] = localStorage;
    this[S.sessionStorage] = sessionStorage;
    ;
  }).prototype = web_storage.WebStorage.prototype;
  dart.addTypeTests(web_storage.WebStorage);
  dart.addTypeCaches(web_storage.WebStorage);
  dart.setLibraryUri(web_storage.WebStorage, I[45]);
  dart.setFieldSignature(web_storage.WebStorage, () => ({
    __proto__: dart.getFields(web_storage.WebStorage.__proto__),
    localStorage: dart.fieldType(web_storage.LocalStorage),
    sessionStorage: dart.fieldType(web_storage.SessionStorage)
  }));
  web_storage.WebStorageItem = class WebStorageItem extends core.Object {
    get key() {
      return this[S.key];
    }
    set key(value) {
      this[S.key] = value;
    }
    get value() {
      return this[S.value];
    }
    set value(value) {
      this[S.value] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["key", this.key, "value", this.value]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (web_storage.WebStorageItem.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[S.key] = key;
    this[S.value] = value;
    ;
  }).prototype = web_storage.WebStorageItem.prototype;
  dart.addTypeTests(web_storage.WebStorageItem);
  dart.addTypeCaches(web_storage.WebStorageItem);
  dart.setMethodSignature(web_storage.WebStorageItem, () => ({
    __proto__: dart.getMethods(web_storage.WebStorageItem.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(web_storage.WebStorageItem, I[45]);
  dart.setFieldSignature(web_storage.WebStorageItem, () => ({
    __proto__: dart.getFields(web_storage.WebStorageItem.__proto__),
    key: dart.fieldType(dart.nullable(core.String)),
    value: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(web_storage.WebStorageItem, ['toString']);
  web_storage.Storage = class Storage extends core.Object {
    get webStorageType() {
      return this[S.webStorageType];
    }
    set webStorageType(value) {
      this[S.webStorageType] = value;
    }
    get [S._controller$1]() {
      let t31;
      return dart.test(this[S.__Storage__controller_isSet]) ? (t31 = this[S.__Storage__controller], t31) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [S._controller$1](t31) {
      if (t31 == null) dart.nullFailed(I[44], 48, 31, "null");
      this[S.__Storage__controller_isSet] = true;
      this[S.__Storage__controller] = t31;
    }
    length() {
      return async.async(T.intN(), (function* length() {
        let result = (yield this[S._controller$1].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".length;\n    "}));
        return result != null ? core.int.parse(core.String.as(convert.json.decode(core.String.as(result)))) : null;
      }).bind(this));
    }
    setItem(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      if (key == null) dart.nullFailed(I[44], 66, 41, "key");
      let value = opts && 'value' in opts ? opts.value : null;
      return async.async(dart.void, (function* setItem() {
        let encodedValue = convert.json.encode(value);
        yield this[S._controller$1].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".setItem(\"" + dart.str(key) + "\", " + dart.str(typeof value == 'string' ? encodedValue : "JSON.stringify(" + dart.str(encodedValue) + ")") + ");\n    "});
      }).bind(this));
    }
    getItem(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      if (key == null) dart.nullFailed(I[44], 74, 44, "key");
      return async.async(dart.dynamic, (function* getItem() {
        let itemValue = (yield this[S._controller$1].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".getItem(\"" + dart.str(key) + "\");\n    "}));
        if (itemValue == null) {
          return null;
        }
        try {
          return convert.json.decode(core.String.as(itemValue));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return itemValue;
      }).bind(this));
    }
    removeItem(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      if (key == null) dart.nullFailed(I[44], 91, 44, "key");
      return async.async(dart.void, (function* removeItem() {
        yield this[S._controller$1].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".removeItem(\"" + dart.str(key) + "\");\n    "});
      }).bind(this));
    }
    getItems() {
      return async.async(T.ListOfWebStorageItem(), (function* getItems() {
        let webStorageItems = T.JSArrayOfWebStorageItem().of([]);
        let items = T.ListNOfMap().as(dart.dgsend(yield this[S._controller$1].evaluateJavascript({source: "(function() {\n  var webStorageItems = [];\n  for(var i = 0; i < window." + dart.str(this.webStorageType) + ".length; i++){\n    var key = window." + dart.str(this.webStorageType) + ".key(i);\n    webStorageItems.push(\n      {\n        key: key,\n        value: window." + dart.str(this.webStorageType) + ".getItem(key)\n      }\n    );\n  }\n  return webStorageItems;\n})();\n    "}), [core.Map], 'cast', []));
        if (items == null) {
          return webStorageItems;
        }
        for (let item of items) {
          webStorageItems[S.$add](new web_storage.WebStorageItem.new({key: T.StringN().as(item[S.$_get]("key")), value: item[S.$_get]("value")}));
        }
        return webStorageItems;
      }).bind(this));
    }
    clear() {
      return async.async(dart.void, (function* clear() {
        yield this[S._controller$1].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".clear();\n    "});
      }).bind(this));
    }
    key(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      if (index == null) dart.nullFailed(I[44], 139, 36, "index");
      return async.async(core.String, (function* key() {
        let result = (yield this[S._controller$1].evaluateJavascript({source: "    window." + dart.str(this.webStorageType) + ".key(" + dart.str(index) + ");\n    "}));
        return T.FutureOrOfString().as(result != null ? convert.json.decode(core.String.as(result)) : null);
      }).bind(this));
    }
  };
  (web_storage.Storage.new = function(controller, webStorageType) {
    if (controller == null) dart.nullFailed(I[44], 53, 34, "controller");
    if (webStorageType == null) dart.nullFailed(I[44], 53, 51, "webStorageType");
    this[S.__Storage__controller] = null;
    this[S.__Storage__controller_isSet] = false;
    this[S.webStorageType] = webStorageType;
    this[S._controller$1] = controller;
  }).prototype = web_storage.Storage.prototype;
  dart.addTypeTests(web_storage.Storage);
  dart.addTypeCaches(web_storage.Storage);
  dart.setMethodSignature(web_storage.Storage, () => ({
    __proto__: dart.getMethods(web_storage.Storage.__proto__),
    length: dart.fnType(async.Future$(dart.nullable(core.int)), []),
    setItem: dart.fnType(async.Future$(dart.void), [], {}, {key: core.String, value: dart.dynamic}),
    getItem: dart.fnType(async.Future, [], {}, {key: core.String}),
    removeItem: dart.fnType(async.Future$(dart.void), [], {}, {key: core.String}),
    getItems: dart.fnType(async.Future$(core.List$(web_storage.WebStorageItem)), []),
    clear: dart.fnType(async.Future$(dart.void), []),
    key: dart.fnType(async.Future$(core.String), [], {}, {index: core.int})
  }));
  dart.setGetterSignature(web_storage.Storage, () => ({
    __proto__: dart.getGetters(web_storage.Storage.__proto__),
    [S._controller$1]: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setSetterSignature(web_storage.Storage, () => ({
    __proto__: dart.getSetters(web_storage.Storage.__proto__),
    [S._controller$1]: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setLibraryUri(web_storage.Storage, I[45]);
  dart.setFieldSignature(web_storage.Storage, () => ({
    __proto__: dart.getFields(web_storage.Storage.__proto__),
    [S.__Storage__controller]: dart.fieldType(dart.nullable(in_app_webview_controller$0.InAppWebViewController)),
    [S.__Storage__controller_isSet]: dart.fieldType(core.bool),
    webStorageType: dart.fieldType(types.WebStorageType)
  }));
  web_storage.LocalStorage = class LocalStorage extends web_storage.Storage {};
  (web_storage.LocalStorage.new = function(controller) {
    if (controller == null) dart.nullFailed(I[44], 150, 39, "controller");
    web_storage.LocalStorage.__proto__.new.call(this, controller, types.WebStorageType.LOCAL_STORAGE);
    ;
  }).prototype = web_storage.LocalStorage.prototype;
  dart.addTypeTests(web_storage.LocalStorage);
  dart.addTypeCaches(web_storage.LocalStorage);
  dart.setLibraryUri(web_storage.LocalStorage, I[45]);
  web_storage.SessionStorage = class SessionStorage extends web_storage.Storage {};
  (web_storage.SessionStorage.new = function(controller) {
    if (controller == null) dart.nullFailed(I[44], 157, 41, "controller");
    web_storage.SessionStorage.__proto__.new.call(this, controller, types.WebStorageType.SESSION_STORAGE);
    ;
  }).prototype = web_storage.SessionStorage.prototype;
  dart.addTypeTests(web_storage.SessionStorage);
  dart.addTypeCaches(web_storage.SessionStorage);
  dart.setLibraryUri(web_storage.SessionStorage, I[45]);
  in_app_webview_controller.IOSInAppWebViewController = class IOSInAppWebViewController extends core.Object {
    get [S._channel$4]() {
      let t33;
      return dart.test(this[S.__IOSInAppWebViewController__channel_isSet]) ? (t33 = this[S.__IOSInAppWebViewController__channel], t33) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel$4](t33) {
      if (t33 == null) dart.nullFailed(I[46], 13, 22, "null");
      this[S.__IOSInAppWebViewController__channel_isSet] = true;
      this[S.__IOSInAppWebViewController__channel] = t33;
    }
    reloadFromOrigin() {
      return async.async(dart.void, (function* reloadFromOrigin() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$4].invokeMethod(dart.dynamic, "reloadFromOrigin", args);
      }).bind(this));
    }
    createPdf(opts) {
      let iosWKPdfConfiguration = opts && 'iosWKPdfConfiguration' in opts ? opts.iosWKPdfConfiguration : null;
      return async.async(T.Uint8ListN(), (function* createPdf() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("iosWKPdfConfiguration", dart.fn(() => {
          let t34;
          t34 = iosWKPdfConfiguration;
          return t34 == null ? null : t34.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        return yield this[S._channel$4].invokeMethod(typed_data.Uint8List, "createPdf", args);
      }).bind(this));
    }
    createWebArchiveData() {
      return async.async(T.Uint8ListN(), (function* createWebArchiveData() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$4].invokeMethod(typed_data.Uint8List, "createWebArchiveData", args);
      }).bind(this));
    }
    hasOnlySecureContent() {
      return async.async(core.bool, (function* hasOnlySecureContent() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$4].invokeMethod(dart.dynamic, "hasOnlySecureContent", args));
      }).bind(this));
    }
    static handlesURLScheme(urlScheme) {
      if (urlScheme == null) dart.nullFailed(I[46], 70, 47, "urlScheme");
      return async.async(core.bool, function* handlesURLScheme() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("urlScheme", dart.fn(() => urlScheme, T.VoidToString()));
        return T.FutureOrOfbool().as(yield in_app_webview_controller.IOSInAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "handlesURLScheme", args));
      });
    }
  };
  (in_app_webview_controller.IOSInAppWebViewController.new = function(opts) {
    let channel = opts && 'channel' in opts ? opts.channel : null;
    if (channel == null) dart.nullFailed(I[46], 16, 53, "channel");
    this[S.__IOSInAppWebViewController__channel] = null;
    this[S.__IOSInAppWebViewController__channel_isSet] = false;
    this[S._channel$4] = channel;
  }).prototype = in_app_webview_controller.IOSInAppWebViewController.prototype;
  dart.addTypeTests(in_app_webview_controller.IOSInAppWebViewController);
  dart.addTypeCaches(in_app_webview_controller.IOSInAppWebViewController);
  dart.setMethodSignature(in_app_webview_controller.IOSInAppWebViewController, () => ({
    __proto__: dart.getMethods(in_app_webview_controller.IOSInAppWebViewController.__proto__),
    reloadFromOrigin: dart.fnType(async.Future$(dart.void), []),
    createPdf: dart.fnType(async.Future$(dart.nullable(typed_data.Uint8List)), [], {iosWKPdfConfiguration: dart.nullable(types.IOSWKPDFConfiguration)}, {}),
    createWebArchiveData: dart.fnType(async.Future$(dart.nullable(typed_data.Uint8List)), []),
    hasOnlySecureContent: dart.fnType(async.Future$(core.bool), [])
  }));
  dart.setGetterSignature(in_app_webview_controller.IOSInAppWebViewController, () => ({
    __proto__: dart.getGetters(in_app_webview_controller.IOSInAppWebViewController.__proto__),
    [S._channel$4]: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(in_app_webview_controller.IOSInAppWebViewController, () => ({
    __proto__: dart.getSetters(in_app_webview_controller.IOSInAppWebViewController.__proto__),
    [S._channel$4]: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(in_app_webview_controller.IOSInAppWebViewController, I[47]);
  dart.setFieldSignature(in_app_webview_controller.IOSInAppWebViewController, () => ({
    __proto__: dart.getFields(in_app_webview_controller.IOSInAppWebViewController.__proto__),
    [S.__IOSInAppWebViewController__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__IOSInAppWebViewController__channel_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(in_app_webview_controller.IOSInAppWebViewController, {
    /*in_app_webview_controller.IOSInAppWebViewController._staticChannel*/get _staticChannel() {
      return _static_channel$.IN_APP_WEBVIEW_STATIC_CHANNEL;
    },
    set _staticChannel(_) {}
  }, false);
  in_app_webview_controller$.AndroidInAppWebViewController = class AndroidInAppWebViewController extends core.Object {
    get [S._channel$5]() {
      let t34;
      return dart.test(this[S.__AndroidInAppWebViewController__channel_isSet]) ? (t34 = this[S.__AndroidInAppWebViewController__channel], t34) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel$5](t34) {
      if (t34 == null) dart.nullFailed(I[48], 14, 22, "null");
      this[S.__AndroidInAppWebViewController__channel_isSet] = true;
      this[S.__AndroidInAppWebViewController__channel] = t34;
    }
    startSafeBrowsing() {
      return async.async(core.bool, (function* startSafeBrowsing() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$5].invokeMethod(dart.dynamic, "startSafeBrowsing", args));
      }).bind(this));
    }
    clearSslPreferences() {
      return async.async(dart.void, (function* clearSslPreferences() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$5].invokeMethod(dart.dynamic, "clearSslPreferences", args);
      }).bind(this));
    }
    pause() {
      return async.async(dart.void, (function* pause() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$5].invokeMethod(dart.dynamic, "pause", args);
      }).bind(this));
    }
    resume() {
      return async.async(dart.void, (function* resume() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$5].invokeMethod(dart.dynamic, "resume", args);
      }).bind(this));
    }
    getOriginalUrl() {
      return async.async(T.UriN(), (function* getOriginalUrl() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let url = (yield this[S._channel$5].invokeMethod(core.String, "getOriginalUrl", args));
        return url != null ? core.Uri.parse(url) : null;
      }).bind(this));
    }
    pageDown(opts) {
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      if (bottom == null) dart.nullFailed(I[48], 79, 40, "bottom");
      return async.async(core.bool, (function* pageDown() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("bottom", dart.fn(() => bottom, T.VoidTobool()));
        return T.FutureOrOfbool().as(yield this[S._channel$5].invokeMethod(dart.dynamic, "pageDown", args));
      }).bind(this));
    }
    pageUp(opts) {
      let top = opts && 'top' in opts ? opts.top : null;
      if (top == null) dart.nullFailed(I[48], 91, 38, "top");
      return async.async(core.bool, (function* pageUp() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("top", dart.fn(() => top, T.VoidTobool()));
        return T.FutureOrOfbool().as(yield this[S._channel$5].invokeMethod(dart.dynamic, "pageUp", args));
      }).bind(this));
    }
    zoomIn() {
      return async.async(core.bool, (function* zoomIn() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$5].invokeMethod(dart.dynamic, "zoomIn", args));
      }).bind(this));
    }
    zoomOut() {
      return async.async(core.bool, (function* zoomOut() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$5].invokeMethod(dart.dynamic, "zoomOut", args));
      }).bind(this));
    }
    clearHistory() {
      return async.async(dart.void, (function* clearHistory() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$5].invokeMethod(dart.void, "clearHistory", args);
      }).bind(this));
    }
    static clearClientCertPreferences() {
      return async.async(dart.void, function* clearClientCertPreferences() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield in_app_webview_controller$.AndroidInAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "clearClientCertPreferences", args);
      });
    }
    static getSafeBrowsingPrivacyPolicyUrl() {
      return async.async(T.UriN(), function* getSafeBrowsingPrivacyPolicyUrl() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let url = (yield in_app_webview_controller$.AndroidInAppWebViewController._staticChannel.invokeMethod(core.String, "getSafeBrowsingPrivacyPolicyUrl", args));
        return url != null ? core.Uri.parse(url) : null;
      });
    }
    static setSafeBrowsingWhitelist(opts) {
      let hosts = opts && 'hosts' in opts ? opts.hosts : null;
      if (hosts == null) dart.nullFailed(I[48], 167, 30, "hosts");
      return async.async(core.bool, function* setSafeBrowsingWhitelist() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("hosts", dart.fn(() => hosts, T.VoidToListOfString()));
        return T.FutureOrOfbool().as(yield in_app_webview_controller$.AndroidInAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "setSafeBrowsingWhitelist", args));
      });
    }
    static getCurrentWebViewPackage() {
      return async.async(T.AndroidWebViewPackageInfoN(), function* getCurrentWebViewPackage() {
        let t35;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let packageInfo = T.MapNOfString$dynamic().as((t35 = (yield in_app_webview_controller$.AndroidInAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "getCurrentWebViewPackage", args)), t35 == null ? null : dart.dgsend(t35, [core.String, dart.dynamic], 'cast', [])));
        return types.AndroidWebViewPackageInfo.fromMap(packageInfo);
      });
    }
    static setWebContentsDebuggingEnabled(debuggingEnabled) {
      if (debuggingEnabled == null) dart.nullFailed(I[48], 202, 12, "debuggingEnabled");
      return async.async(dart.void, function* setWebContentsDebuggingEnabled() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("debuggingEnabled", dart.fn(() => debuggingEnabled, T.VoidTobool()));
        return yield in_app_webview_controller$.AndroidInAppWebViewController._staticChannel.invokeMethod(dart.void, "setWebContentsDebuggingEnabled", args);
      });
    }
  };
  (in_app_webview_controller$.AndroidInAppWebViewController.new = function(opts) {
    let channel = opts && 'channel' in opts ? opts.channel : null;
    if (channel == null) dart.nullFailed(I[48], 17, 57, "channel");
    this[S.__AndroidInAppWebViewController__channel] = null;
    this[S.__AndroidInAppWebViewController__channel_isSet] = false;
    this[S._channel$5] = channel;
  }).prototype = in_app_webview_controller$.AndroidInAppWebViewController.prototype;
  dart.addTypeTests(in_app_webview_controller$.AndroidInAppWebViewController);
  dart.addTypeCaches(in_app_webview_controller$.AndroidInAppWebViewController);
  dart.setMethodSignature(in_app_webview_controller$.AndroidInAppWebViewController, () => ({
    __proto__: dart.getMethods(in_app_webview_controller$.AndroidInAppWebViewController.__proto__),
    startSafeBrowsing: dart.fnType(async.Future$(core.bool), []),
    clearSslPreferences: dart.fnType(async.Future$(dart.void), []),
    pause: dart.fnType(async.Future$(dart.void), []),
    resume: dart.fnType(async.Future$(dart.void), []),
    getOriginalUrl: dart.fnType(async.Future$(dart.nullable(core.Uri)), []),
    pageDown: dart.fnType(async.Future$(core.bool), [], {}, {bottom: core.bool}),
    pageUp: dart.fnType(async.Future$(core.bool), [], {}, {top: core.bool}),
    zoomIn: dart.fnType(async.Future$(core.bool), []),
    zoomOut: dart.fnType(async.Future$(core.bool), []),
    clearHistory: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(in_app_webview_controller$.AndroidInAppWebViewController, () => ({
    __proto__: dart.getGetters(in_app_webview_controller$.AndroidInAppWebViewController.__proto__),
    [S._channel$5]: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(in_app_webview_controller$.AndroidInAppWebViewController, () => ({
    __proto__: dart.getSetters(in_app_webview_controller$.AndroidInAppWebViewController.__proto__),
    [S._channel$5]: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(in_app_webview_controller$.AndroidInAppWebViewController, I[49]);
  dart.setFieldSignature(in_app_webview_controller$.AndroidInAppWebViewController, () => ({
    __proto__: dart.getFields(in_app_webview_controller$.AndroidInAppWebViewController.__proto__),
    [S.__AndroidInAppWebViewController__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__AndroidInAppWebViewController__channel_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(in_app_webview_controller$.AndroidInAppWebViewController, {
    /*in_app_webview_controller$.AndroidInAppWebViewController._staticChannel*/get _staticChannel() {
      return _static_channel$.IN_APP_WEBVIEW_STATIC_CHANNEL;
    },
    set _staticChannel(_) {}
  }, false);
  in_app_webview_controller$0.InAppWebViewController = class InAppWebViewController extends core.Object {
    get javaScriptHandlersMap() {
      return this[S.javaScriptHandlersMap];
    }
    set javaScriptHandlersMap(value) {
      this[S.javaScriptHandlersMap] = value;
    }
    get [S._channel$6]() {
      let t35;
      return dart.test(this[S.__InAppWebViewController__channel_isSet]) ? (t35 = this[S.__InAppWebViewController__channel], t35) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S._channel$6](t35) {
      if (t35 == null) dart.nullFailed(I[50], 52, 22, "null");
      this[S.__InAppWebViewController__channel_isSet] = true;
      this[S.__InAppWebViewController__channel] = t35;
    }
    get android() {
      let t36;
      return dart.test(this[S.__InAppWebViewController_android_isSet]) ? (t36 = this[S.__InAppWebViewController_android], t36) : dart.throw(new _internal.LateError.fieldNI("android"));
    }
    set android(t36) {
      if (t36 == null) dart.nullFailed(I[50], 66, 38, "null");
      this[S.__InAppWebViewController_android_isSet] = true;
      this[S.__InAppWebViewController_android] = t36;
    }
    get ios() {
      let t37;
      return dart.test(this[S.__InAppWebViewController_ios_isSet]) ? (t37 = this[S.__InAppWebViewController_ios], t37) : dart.throw(new _internal.LateError.fieldNI("ios"));
    }
    set ios(t37) {
      if (t37 == null) dart.nullFailed(I[50], 69, 34, "null");
      this[S.__InAppWebViewController_ios_isSet] = true;
      this[S.__InAppWebViewController_ios] = t37;
    }
    get webStorage() {
      let t38;
      return dart.test(this[S.__InAppWebViewController_webStorage_isSet]) ? (t38 = this[S.__InAppWebViewController_webStorage], t38) : dart.throw(new _internal.LateError.fieldNI("webStorage"));
    }
    set webStorage(t38) {
      if (t38 == null) dart.nullFailed(I[50], 72, 19, "null");
      this[S.__InAppWebViewController_webStorage_isSet] = true;
      this[S.__InAppWebViewController_webStorage] = t38;
    }
    [S._init]() {
      this.android = new in_app_webview_controller$.AndroidInAppWebViewController.new({channel: this[S._channel$6]});
      this.ios = new in_app_webview_controller.IOSInAppWebViewController.new({channel: this[S._channel$6]});
      this.webStorage = new web_storage.WebStorage.new({localStorage: new web_storage.LocalStorage.new(this), sessionStorage: new web_storage.SessionStorage.new(this)});
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[50], 103, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        let t39, t39$, t39$0, t39$1, t39$2, t39$3, t39$4, t39$5, t39$6, t39$7, t39$8, t39$9, t39$10, t39$11, t39$12, t39$13, t39$14, t39$15, t39$16, t39$17, t39$18, t39$19, t39$20, t39$21, t39$22, t39$23, t39$24, t39$25, t39$26, t39$27, t39$28, t39$29, t39$30, t39$31, t39$32, t39$33, t39$34, t39$35;
        switch (call.method) {
          case "onLoadStart":
          {
            this[S._injectedScriptsFromURL][S.$clear]();
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadStart != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadStart != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onLoadStart)(this, uri);
              else
                dart.nullCheck(this[S._inAppBrowser]).onLoadStart(uri);
            }
            break;
          }
          case "onLoadStop":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadStop != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadStop != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onLoadStop)(this, uri);
              else
                dart.nullCheck(this[S._inAppBrowser]).onLoadStop(uri);
            }
            break;
          }
          case "onLoadError":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadError != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let code = core.int.as(dart.dsend(call.arguments, '_get', ["code"]));
              let message = core.String.as(dart.dsend(call.arguments, '_get', ["message"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadError != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onLoadError)(this, uri, code, message);
              else
                dart.nullCheck(this[S._inAppBrowser]).onLoadError(uri, code, message);
            }
            break;
          }
          case "onLoadHttpError":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadHttpError != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let statusCode = core.int.as(dart.dsend(call.arguments, '_get', ["statusCode"]));
              let description = core.String.as(dart.dsend(call.arguments, '_get', ["description"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadHttpError != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onLoadHttpError)(this, uri, statusCode, description);
              else
                dart.nullCheck(this[S._inAppBrowser]).onLoadHttpError(uri, statusCode, description);
            }
            break;
          }
          case "onProgressChanged":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onProgressChanged != null || this[S._inAppBrowser] != null) {
              let progress = core.int.as(dart.dsend(call.arguments, '_get', ["progress"]));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onProgressChanged != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onProgressChanged)(this, progress);
              else
                dart.nullCheck(this[S._inAppBrowser]).onProgressChanged(progress);
            }
            break;
          }
          case "shouldOverrideUrlLoading":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).shouldOverrideUrlLoading != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let navigationAction = dart.nullCheck(types.NavigationAction.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).shouldOverrideUrlLoading != null) {
                t39 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).shouldOverrideUrlLoading)(this, navigationAction));
                return t39 == null ? null : t39.toMap();
              }
              t39$ = (yield dart.nullCheck(this[S._inAppBrowser]).shouldOverrideUrlLoading(navigationAction));
              return t39$ == null ? null : t39$.toMap();
            }
            break;
          }
          case "onConsoleMessage":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onConsoleMessage != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let consoleMessage = dart.nullCheck(types.ConsoleMessage.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onConsoleMessage != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onConsoleMessage)(this, consoleMessage);
              else
                dart.nullCheck(this[S._inAppBrowser]).onConsoleMessage(consoleMessage);
            }
            break;
          }
          case "onScrollChanged":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onScrollChanged != null || this[S._inAppBrowser] != null) {
              let x = core.int.as(dart.dsend(call.arguments, '_get', ["x"]));
              let y = core.int.as(dart.dsend(call.arguments, '_get', ["y"]));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onScrollChanged != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onScrollChanged)(this, x, y);
              else
                dart.nullCheck(this[S._inAppBrowser]).onScrollChanged(x, y);
            }
            break;
          }
          case "onDownloadStart":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onDownloadStart != null || this[S._inAppBrowser] != null) {
              let url = core.String.as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = core.Uri.parse(url);
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onDownloadStart != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onDownloadStart)(this, uri);
              else
                dart.nullCheck(this[S._inAppBrowser]).onDownloadStart(uri);
            }
            break;
          }
          case "onLoadResourceCustomScheme":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadResourceCustomScheme != null || this[S._inAppBrowser] != null) {
              let url = core.String.as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = core.Uri.parse(url);
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadResourceCustomScheme != null) {
                t39$0 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onLoadResourceCustomScheme)(this, uri));
                return t39$0 == null ? null : t39$0.toMap();
              } else {
                t39$1 = (yield dart.nullCheck(this[S._inAppBrowser]).onLoadResourceCustomScheme(uri));
                return t39$1 == null ? null : t39$1.toMap();
              }
            }
            break;
          }
          case "onCreateWindow":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onCreateWindow != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let createWindowAction = dart.nullCheck(types.CreateWindowAction.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onCreateWindow != null)
                return yield dart.nullCheck(dart.nullCheck(this[S._webview]).onCreateWindow)(this, createWindowAction);
              else
                return yield dart.nullCheck(this[S._inAppBrowser]).onCreateWindow(createWindowAction);
            }
            break;
          }
          case "onCloseWindow":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onCloseWindow != null)
              dart.nullCheck(dart.nullCheck(this[S._webview]).onCloseWindow)(this);
            else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).onCloseWindow();
            break;
          }
          case "onTitleChanged":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onTitleChanged != null || this[S._inAppBrowser] != null) {
              let title = T.StringN().as(dart.dsend(call.arguments, '_get', ["title"]));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onTitleChanged != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onTitleChanged)(this, title);
              else
                dart.nullCheck(this[S._inAppBrowser]).onTitleChanged(title);
            }
            break;
          }
          case "onGeolocationPermissionsShowPrompt":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnGeolocationPermissionsShowPrompt != null || this[S._inAppBrowser] != null) {
              let origin = core.String.as(dart.dsend(call.arguments, '_get', ["origin"]));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnGeolocationPermissionsShowPrompt != null) {
                t39$2 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnGeolocationPermissionsShowPrompt)(this, origin));
                return t39$2 == null ? null : t39$2.toMap();
              } else {
                t39$3 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnGeolocationPermissionsShowPrompt(origin));
                return t39$3 == null ? null : t39$3.toMap();
              }
            }
            break;
          }
          case "onGeolocationPermissionsHidePrompt":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnGeolocationPermissionsHidePrompt != null)
              dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnGeolocationPermissionsHidePrompt)(this);
            else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).androidOnGeolocationPermissionsHidePrompt();
            break;
          }
          case "shouldInterceptRequest":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidShouldInterceptRequest != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let request = dart.nullCheck(types.WebResourceRequest.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidShouldInterceptRequest != null) {
                t39$4 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidShouldInterceptRequest)(this, request));
                return t39$4 == null ? null : t39$4.toMap();
              } else {
                t39$5 = (yield dart.nullCheck(this[S._inAppBrowser]).androidShouldInterceptRequest(request));
                return t39$5 == null ? null : t39$5.toMap();
              }
            }
            break;
          }
          case "onRenderProcessUnresponsive":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnRenderProcessUnresponsive != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnRenderProcessUnresponsive != null) {
                t39$6 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnRenderProcessUnresponsive)(this, uri));
                return t39$6 == null ? null : t39$6.toMap();
              } else {
                t39$7 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnRenderProcessUnresponsive(uri));
                return t39$7 == null ? null : t39$7.toMap();
              }
            }
            break;
          }
          case "onRenderProcessResponsive":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnRenderProcessResponsive != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnRenderProcessResponsive != null) {
                t39$8 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnRenderProcessResponsive)(this, uri));
                return t39$8 == null ? null : t39$8.toMap();
              } else {
                t39$9 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnRenderProcessResponsive(uri));
                return t39$9 == null ? null : t39$9.toMap();
              }
            }
            break;
          }
          case "onRenderProcessGone":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnRenderProcessGone != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let detail = dart.nullCheck(types.RenderProcessGoneDetail.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnRenderProcessGone != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnRenderProcessGone)(this, detail);
              else
                dart.nullCheck(this[S._inAppBrowser]).androidOnRenderProcessGone(detail);
            }
            break;
          }
          case "onFormResubmission":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnFormResubmission != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnFormResubmission != null) {
                t39$10 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnFormResubmission)(this, uri));
                return t39$10 == null ? null : t39$10.toMap();
              } else {
                t39$11 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnFormResubmission(uri));
                return t39$11 == null ? null : t39$11.toMap();
              }
            }
            break;
          }
          case "onZoomScaleChanged":
          {
            if (this[S._webview] != null && (dart.nullCheck(this[S._webview]).androidOnScaleChanged != null || dart.nullCheck(this[S._webview]).onZoomScaleChanged != null) || this[S._inAppBrowser] != null) {
              let oldScale = core.double.as(dart.dsend(call.arguments, '_get', ["oldScale"]));
              let newScale = core.double.as(dart.dsend(call.arguments, '_get', ["newScale"]));
              if (this[S._webview] != null) {
                if (dart.nullCheck(this[S._webview]).onZoomScaleChanged != null)
                  dart.nullCheck(dart.nullCheck(this[S._webview]).onZoomScaleChanged)(this, oldScale, newScale);
                else {
                  dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnScaleChanged)(this, oldScale, newScale);
                }
              } else {
                dart.nullCheck(this[S._inAppBrowser]).androidOnScaleChanged(oldScale, newScale);
              }
            }
            break;
          }
          case "onReceivedIcon":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnReceivedIcon != null || this[S._inAppBrowser] != null) {
              let icon = _native_typed_data.NativeUint8List.fromList(T.ListOfint().as(dart.dgsend(dart.dsend(call.arguments, '_get', ["icon"]), [core.int], 'cast', [])));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnReceivedIcon != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnReceivedIcon)(this, icon);
              else
                dart.nullCheck(this[S._inAppBrowser]).androidOnReceivedIcon(icon);
            }
            break;
          }
          case "onReceivedTouchIconUrl":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnReceivedTouchIconUrl != null || this[S._inAppBrowser] != null) {
              let url = core.String.as(dart.dsend(call.arguments, '_get', ["url"]));
              let precomposed = core.bool.as(dart.dsend(call.arguments, '_get', ["precomposed"]));
              let uri = core.Uri.parse(url);
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnReceivedTouchIconUrl != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnReceivedTouchIconUrl)(this, uri, precomposed);
              else
                dart.nullCheck(this[S._inAppBrowser]).androidOnReceivedTouchIconUrl(uri, precomposed);
            }
            break;
          }
          case "onJsAlert":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onJsAlert != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let jsAlertRequest = dart.nullCheck(types.JsAlertRequest.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onJsAlert != null) {
                t39$12 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onJsAlert)(this, jsAlertRequest));
                return t39$12 == null ? null : t39$12.toMap();
              } else {
                t39$13 = (yield dart.nullCheck(this[S._inAppBrowser]).onJsAlert(jsAlertRequest));
                return t39$13 == null ? null : t39$13.toMap();
              }
            }
            break;
          }
          case "onJsConfirm":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onJsConfirm != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let jsConfirmRequest = dart.nullCheck(types.JsConfirmRequest.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onJsConfirm != null) {
                t39$14 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onJsConfirm)(this, jsConfirmRequest));
                return t39$14 == null ? null : t39$14.toMap();
              } else {
                t39$15 = (yield dart.nullCheck(this[S._inAppBrowser]).onJsConfirm(jsConfirmRequest));
                return t39$15 == null ? null : t39$15.toMap();
              }
            }
            break;
          }
          case "onJsPrompt":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onJsPrompt != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let jsPromptRequest = dart.nullCheck(types.JsPromptRequest.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onJsPrompt != null) {
                t39$16 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onJsPrompt)(this, jsPromptRequest));
                return t39$16 == null ? null : t39$16.toMap();
              } else {
                t39$17 = (yield dart.nullCheck(this[S._inAppBrowser]).onJsPrompt(jsPromptRequest));
                return t39$17 == null ? null : t39$17.toMap();
              }
            }
            break;
          }
          case "onJsBeforeUnload":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnJsBeforeUnload != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let jsBeforeUnloadRequest = dart.nullCheck(types.JsBeforeUnloadRequest.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnJsBeforeUnload != null) {
                t39$18 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnJsBeforeUnload)(this, jsBeforeUnloadRequest));
                return t39$18 == null ? null : t39$18.toMap();
              } else {
                t39$19 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnJsBeforeUnload(jsBeforeUnloadRequest));
                return t39$19 == null ? null : t39$19.toMap();
              }
            }
            break;
          }
          case "onSafeBrowsingHit":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnSafeBrowsingHit != null || this[S._inAppBrowser] != null) {
              let url = core.String.as(dart.dsend(call.arguments, '_get', ["url"]));
              let threatType = types.SafeBrowsingThreat.fromValue(T.intN().as(dart.dsend(call.arguments, '_get', ["threatType"])));
              let uri = core.Uri.parse(url);
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnSafeBrowsingHit != null) {
                t39$20 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnSafeBrowsingHit)(this, uri, threatType));
                return t39$20 == null ? null : t39$20.toMap();
              } else {
                t39$21 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnSafeBrowsingHit(uri, threatType));
                return t39$21 == null ? null : t39$21.toMap();
              }
            }
            break;
          }
          case "onReceivedLoginRequest":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnReceivedLoginRequest != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let loginRequest = dart.nullCheck(types.LoginRequest.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnReceivedLoginRequest != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnReceivedLoginRequest)(this, loginRequest);
              else
                dart.nullCheck(this[S._inAppBrowser]).androidOnReceivedLoginRequest(loginRequest);
            }
            break;
          }
          case "onReceivedHttpAuthRequest":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onReceivedHttpAuthRequest != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let challenge = dart.nullCheck(types.HttpAuthenticationChallenge.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onReceivedHttpAuthRequest != null) {
                t39$22 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onReceivedHttpAuthRequest)(this, challenge));
                return t39$22 == null ? null : t39$22.toMap();
              } else {
                t39$23 = (yield dart.nullCheck(this[S._inAppBrowser]).onReceivedHttpAuthRequest(challenge));
                return t39$23 == null ? null : t39$23.toMap();
              }
            }
            break;
          }
          case "onReceivedServerTrustAuthRequest":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onReceivedServerTrustAuthRequest != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let challenge = dart.nullCheck(types.ServerTrustChallenge.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onReceivedServerTrustAuthRequest != null) {
                t39$24 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onReceivedServerTrustAuthRequest)(this, challenge));
                return t39$24 == null ? null : t39$24.toMap();
              } else {
                t39$25 = (yield dart.nullCheck(this[S._inAppBrowser]).onReceivedServerTrustAuthRequest(challenge));
                return t39$25 == null ? null : t39$25.toMap();
              }
            }
            break;
          }
          case "onReceivedClientCertRequest":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onReceivedClientCertRequest != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let challenge = dart.nullCheck(types.ClientCertChallenge.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onReceivedClientCertRequest != null) {
                t39$26 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).onReceivedClientCertRequest)(this, challenge));
                return t39$26 == null ? null : t39$26.toMap();
              } else {
                t39$27 = (yield dart.nullCheck(this[S._inAppBrowser]).onReceivedClientCertRequest(challenge));
                return t39$27 == null ? null : t39$27.toMap();
              }
            }
            break;
          }
          case "onFindResultReceived":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onFindResultReceived != null || this[S._inAppBrowser] != null) {
              let activeMatchOrdinal = core.int.as(dart.dsend(call.arguments, '_get', ["activeMatchOrdinal"]));
              let numberOfMatches = core.int.as(dart.dsend(call.arguments, '_get', ["numberOfMatches"]));
              let isDoneCounting = core.bool.as(dart.dsend(call.arguments, '_get', ["isDoneCounting"]));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onFindResultReceived != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onFindResultReceived)(this, activeMatchOrdinal, numberOfMatches, isDoneCounting);
              else
                dart.nullCheck(this[S._inAppBrowser]).onFindResultReceived(activeMatchOrdinal, numberOfMatches, isDoneCounting);
            }
            break;
          }
          case "onPermissionRequest":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnPermissionRequest != null || this[S._inAppBrowser] != null) {
              let origin = core.String.as(dart.dsend(call.arguments, '_get', ["origin"]));
              let resources = T.ListOfString().as(dart.dgsend(dart.dsend(call.arguments, '_get', ["resources"]), [core.String], 'cast', []));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).androidOnPermissionRequest != null) {
                t39$28 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).androidOnPermissionRequest)(this, origin, resources));
                return t39$28 == null ? null : t39$28.toMap();
              } else {
                t39$29 = (yield dart.nullCheck(this[S._inAppBrowser]).androidOnPermissionRequest(origin, resources));
                return t39$29 == null ? null : t39$29.toMap();
              }
            }
            break;
          }
          case "onUpdateVisitedHistory":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onUpdateVisitedHistory != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let androidIsReload = T.boolN().as(dart.dsend(call.arguments, '_get', ["androidIsReload"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onUpdateVisitedHistory != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onUpdateVisitedHistory)(this, uri, androidIsReload);
              else
                dart.nullCheck(this[S._inAppBrowser]).onUpdateVisitedHistory(uri, androidIsReload);
            }
            break;
          }
          case "onWebContentProcessDidTerminate":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).iosOnWebContentProcessDidTerminate != null)
              dart.nullCheck(dart.nullCheck(this[S._webview]).iosOnWebContentProcessDidTerminate)(this);
            else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).iosOnWebContentProcessDidTerminate();
            break;
          }
          case "onPageCommitVisible":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onPageCommitVisible != null || this[S._inAppBrowser] != null) {
              let url = T.StringN().as(dart.dsend(call.arguments, '_get', ["url"]));
              let uri = url != null ? core.Uri.parse(url) : null;
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onPageCommitVisible != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onPageCommitVisible)(this, uri);
              else
                dart.nullCheck(this[S._inAppBrowser]).onPageCommitVisible(uri);
            }
            break;
          }
          case "onDidReceiveServerRedirectForProvisionalNavigation":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).iosOnDidReceiveServerRedirectForProvisionalNavigation != null)
              dart.nullCheck(dart.nullCheck(this[S._webview]).iosOnDidReceiveServerRedirectForProvisionalNavigation)(this);
            else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).iosOnDidReceiveServerRedirectForProvisionalNavigation();
            break;
          }
          case "onNavigationResponse":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).iosOnNavigationResponse != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let iosOnNavigationResponse = dart.nullCheck(types.IOSWKNavigationResponse.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).iosOnNavigationResponse != null) {
                t39$30 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).iosOnNavigationResponse)(this, iosOnNavigationResponse));
                return t39$30 == null ? null : t39$30.toMap();
              } else {
                t39$31 = (yield dart.nullCheck(this[S._inAppBrowser]).iosOnNavigationResponse(iosOnNavigationResponse));
                return t39$31 == null ? null : t39$31.toMap();
              }
            }
            break;
          }
          case "shouldAllowDeprecatedTLS":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).iosShouldAllowDeprecatedTLS != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let challenge = dart.nullCheck(types.URLAuthenticationChallenge.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).iosShouldAllowDeprecatedTLS != null) {
                t39$32 = (yield dart.nullCheck(dart.nullCheck(this[S._webview]).iosShouldAllowDeprecatedTLS)(this, challenge));
                return t39$32 == null ? null : t39$32.toMap();
              } else {
                t39$33 = (yield dart.nullCheck(this[S._inAppBrowser]).iosShouldAllowDeprecatedTLS(challenge));
                return t39$33 == null ? null : t39$33.toMap();
              }
            }
            break;
          }
          case "onLongPressHitTestResult":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLongPressHitTestResult != null || this[S._inAppBrowser] != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let hitTestResult = dart.nullCheck(types.InAppWebViewHitTestResult.fromMap($arguments));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLongPressHitTestResult != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onLongPressHitTestResult)(this, hitTestResult);
              else
                dart.nullCheck(this[S._inAppBrowser]).onLongPressHitTestResult(hitTestResult);
            }
            break;
          }
          case "onCreateContextMenu":
          {
            let contextMenu = null;
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).contextMenu != null) {
              contextMenu = dart.nullCheck(this[S._webview]).contextMenu;
            } else if (this[S._inAppBrowser] != null && dart.nullCheck(this[S._inAppBrowser]).contextMenu != null) {
              contextMenu = dart.nullCheck(this[S._inAppBrowser]).contextMenu;
            }
            if (contextMenu != null && contextMenu.onCreateContextMenu != null) {
              let $arguments = T.MapOfString$dynamic().as(dart.dgsend(call.arguments, [core.String, dart.dynamic], 'cast', []));
              let hitTestResult = dart.nullCheck(types.InAppWebViewHitTestResult.fromMap($arguments));
              dart.nullCheck(contextMenu.onCreateContextMenu)(hitTestResult);
            }
            break;
          }
          case "onHideContextMenu":
          {
            let contextMenu = null;
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).contextMenu != null) {
              contextMenu = dart.nullCheck(this[S._webview]).contextMenu;
            } else if (this[S._inAppBrowser] != null && dart.nullCheck(this[S._inAppBrowser]).contextMenu != null) {
              contextMenu = dart.nullCheck(this[S._inAppBrowser]).contextMenu;
            }
            if (contextMenu != null && contextMenu.onHideContextMenu != null) {
              dart.nullCheck(contextMenu.onHideContextMenu)();
            }
            break;
          }
          case "onContextMenuActionItemClicked":
          {
            let contextMenu = null;
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).contextMenu != null) {
              contextMenu = dart.nullCheck(this[S._webview]).contextMenu;
            } else if (this[S._inAppBrowser] != null && dart.nullCheck(this[S._inAppBrowser]).contextMenu != null) {
              contextMenu = dart.nullCheck(this[S._inAppBrowser]).contextMenu;
            }
            if (contextMenu != null) {
              let androidId = T.intN().as(dart.dsend(call.arguments, '_get', ["androidId"]));
              let iosId = T.StringN().as(dart.dsend(call.arguments, '_get', ["iosId"]));
              let title = core.String.as(dart.dsend(call.arguments, '_get', ["title"]));
              let menuItemClicked = new context_menu.ContextMenuItem.new({androidId: androidId, iosId: iosId, title: title, action: null});
              for (let menuItem of contextMenu.menuItems) {
                if (platform.defaultTargetPlatform == platform.TargetPlatform.android && menuItem.androidId == androidId || platform.defaultTargetPlatform == platform.TargetPlatform.iOS && menuItem.iosId == iosId) {
                  menuItemClicked = menuItem;
                  if (menuItem.action != null) {
                    dart.nullCheck(menuItem.action)();
                  }
                  break;
                }
              }
              if (contextMenu.onContextMenuActionItemClicked != null) {
                dart.nullCheck(contextMenu.onContextMenuActionItemClicked)(menuItemClicked);
              }
            }
            break;
          }
          case "onEnterFullscreen":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onEnterFullscreen != null)
              dart.nullCheck(dart.nullCheck(this[S._webview]).onEnterFullscreen)(this);
            else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).onEnterFullscreen();
            break;
          }
          case "onExitFullscreen":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onExitFullscreen != null)
              dart.nullCheck(dart.nullCheck(this[S._webview]).onExitFullscreen)(this);
            else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).onExitFullscreen();
            break;
          }
          case "onOverScrolled":
          {
            if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onOverScrolled != null || this[S._inAppBrowser] != null) {
              let x = core.int.as(dart.dsend(call.arguments, '_get', ["x"]));
              let y = core.int.as(dart.dsend(call.arguments, '_get', ["y"]));
              let clampedX = core.bool.as(dart.dsend(call.arguments, '_get', ["clampedX"]));
              let clampedY = core.bool.as(dart.dsend(call.arguments, '_get', ["clampedY"]));
              if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onOverScrolled != null)
                dart.nullCheck(dart.nullCheck(this[S._webview]).onOverScrolled)(this, x, y, clampedX, clampedY);
              else
                dart.nullCheck(this[S._inAppBrowser]).onOverScrolled(x, y, clampedX, clampedY);
            }
            break;
          }
          case "onCallJsHandler":
          {
            let handlerName = core.String.as(dart.dsend(call.arguments, '_get', ["handlerName"]));
            let args = core.List.as(convert.jsonDecode(core.String.as(dart.dsend(call.arguments, '_get', ["args"]))));
            switch (handlerName) {
              case "onLoadResource":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadResource != null || this[S._inAppBrowser] != null) {
                  let $arguments = T.MapOfString$dynamic().as(dart.dgsend(args[S.$_get](0), [core.String, dart.dynamic], 'cast', []));
                  $arguments[S.$_set]("startTime", core.int.is($arguments[S.$_get]("startTime")) ? dart.dsend($arguments[S.$_get]("startTime"), 'toDouble', []) : $arguments[S.$_get]("startTime"));
                  $arguments[S.$_set]("duration", core.int.is($arguments[S.$_get]("duration")) ? dart.dsend($arguments[S.$_get]("duration"), 'toDouble', []) : $arguments[S.$_get]("duration"));
                  let response = dart.nullCheck(types.LoadedResource.fromMap($arguments));
                  if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onLoadResource != null)
                    dart.nullCheck(dart.nullCheck(this[S._webview]).onLoadResource)(this, response);
                  else
                    dart.nullCheck(this[S._inAppBrowser]).onLoadResource(response);
                }
                return null;
              }
              case "shouldInterceptAjaxRequest":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).shouldInterceptAjaxRequest != null || this[S._inAppBrowser] != null) {
                  let $arguments = T.MapOfString$dynamic().as(dart.dgsend(args[S.$_get](0), [core.String, dart.dynamic], 'cast', []));
                  let request = dart.nullCheck(types.AjaxRequest.fromMap($arguments));
                  if (this[S._webview] != null && dart.nullCheck(this[S._webview]).shouldInterceptAjaxRequest != null)
                    return convert.jsonEncode(yield dart.nullCheck(dart.nullCheck(this[S._webview]).shouldInterceptAjaxRequest)(this, request));
                  else
                    return convert.jsonEncode(yield dart.nullCheck(this[S._inAppBrowser]).shouldInterceptAjaxRequest(request));
                }
                return null;
              }
              case "onAjaxReadyStateChange":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onAjaxReadyStateChange != null || this[S._inAppBrowser] != null) {
                  let $arguments = T.MapOfString$dynamic().as(dart.dgsend(args[S.$_get](0), [core.String, dart.dynamic], 'cast', []));
                  let request = dart.nullCheck(types.AjaxRequest.fromMap($arguments));
                  if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onAjaxReadyStateChange != null)
                    return convert.jsonEncode(yield dart.nullCheck(dart.nullCheck(this[S._webview]).onAjaxReadyStateChange)(this, request));
                  else
                    return convert.jsonEncode(yield dart.nullCheck(this[S._inAppBrowser]).onAjaxReadyStateChange(request));
                }
                return null;
              }
              case "onAjaxProgress":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onAjaxProgress != null || this[S._inAppBrowser] != null) {
                  let $arguments = T.MapOfString$dynamic().as(dart.dgsend(args[S.$_get](0), [core.String, dart.dynamic], 'cast', []));
                  let request = dart.nullCheck(types.AjaxRequest.fromMap($arguments));
                  if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onAjaxProgress != null)
                    return convert.jsonEncode(yield dart.nullCheck(dart.nullCheck(this[S._webview]).onAjaxProgress)(this, request));
                  else
                    return convert.jsonEncode(yield dart.nullCheck(this[S._inAppBrowser]).onAjaxProgress(request));
                }
                return null;
              }
              case "shouldInterceptFetchRequest":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).shouldInterceptFetchRequest != null || this[S._inAppBrowser] != null) {
                  let $arguments = T.MapOfString$dynamic().as(dart.dgsend(args[S.$_get](0), [core.String, dart.dynamic], 'cast', []));
                  let request = dart.nullCheck(types.FetchRequest.fromMap($arguments));
                  if (this[S._webview] != null && dart.nullCheck(this[S._webview]).shouldInterceptFetchRequest != null)
                    return convert.jsonEncode(yield dart.nullCheck(dart.nullCheck(this[S._webview]).shouldInterceptFetchRequest)(this, request));
                  else
                    return convert.jsonEncode(yield dart.nullCheck(this[S._inAppBrowser]).shouldInterceptFetchRequest(request));
                }
                return null;
              }
              case "onPrint":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onPrint != null || this[S._inAppBrowser] != null) {
                  let url = T.StringN().as(args[S.$_get](0));
                  let uri = url != null ? core.Uri.parse(url) : null;
                  if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onPrint != null)
                    dart.nullCheck(dart.nullCheck(this[S._webview]).onPrint)(this, uri);
                  else
                    dart.nullCheck(this[S._inAppBrowser]).onPrint(uri);
                }
                return null;
              }
              case "onWindowFocus":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onWindowFocus != null)
                  dart.nullCheck(dart.nullCheck(this[S._webview]).onWindowFocus)(this);
                else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).onWindowFocus();
                return null;
              }
              case "onWindowBlur":
              {
                if (this[S._webview] != null && dart.nullCheck(this[S._webview]).onWindowBlur != null)
                  dart.nullCheck(dart.nullCheck(this[S._webview]).onWindowBlur)(this);
                else if (this[S._inAppBrowser] != null) dart.nullCheck(this[S._inAppBrowser]).onWindowBlur();
                return null;
              }
              case "onInjectedScriptLoaded":
              {
                let id = core.String.as(args[S.$_get](0));
                let onLoadCallback = (t39$34 = this[S._injectedScriptsFromURL][S.$_get](id), t39$34 == null ? null : t39$34.onLoad);
                if ((this[S._webview] != null || this[S._inAppBrowser] != null) && onLoadCallback != null) {
                  onLoadCallback();
                }
                return null;
              }
              case "onInjectedScriptError":
              {
                let id = core.String.as(args[S.$_get](0));
                let onErrorCallback = (t39$35 = this[S._injectedScriptsFromURL][S.$_get](id), t39$35 == null ? null : t39$35.onError);
                if ((this[S._webview] != null || this[S._inAppBrowser] != null) && onErrorCallback != null) {
                  onErrorCallback();
                }
                return null;
              }
            }
            if (dart.test(this.javaScriptHandlersMap[S.$containsKey](handlerName))) {
              try {
                return convert.jsonEncode(yield dart.nullCheck(this.javaScriptHandlersMap[S.$_get](handlerName))(args));
              } catch (e) {
                let error = dart.getThrown(e);
                if (core.Object.is(error)) {
                  core.print(error);
                  return null;
                } else
                  throw e;
              }
            }
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
        return null;
      }).bind(this));
    }
    getUrl() {
      return async.async(T.UriN(), (function* getUrl() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let url = (yield this[S._channel$6].invokeMethod(core.String, "getUrl", args));
        return url != null ? core.Uri.parse(url) : null;
      }).bind(this));
    }
    getTitle() {
      return async.async(T.StringN(), (function* getTitle() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.String, "getTitle", args);
      }).bind(this));
    }
    getProgress() {
      return async.async(T.intN(), (function* getProgress() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.int, "getProgress", args);
      }).bind(this));
    }
    getHtml() {
      return async.async(T.StringN(), (function* getHtml() {
        let html = null;
        let options = (yield this.getOptions());
        if (options != null && options.crossPlatform.javaScriptEnabled === true) {
          html = T.StringN().as(yield this.evaluateJavascript({source: "window.document.getElementsByTagName('html')[0].outerHTML;"}));
          if (html != null && html[S.$isNotEmpty]) return html;
        }
        let webviewUrl = (yield this.getUrl());
        if (webviewUrl == null) {
          return html;
        }
        if (dart.test(webviewUrl.isScheme("file"))) {
          let assetPathSplitted = dart.toString(webviewUrl)[S.$split]("/flutter_assets/");
          let assetPath = assetPathSplitted[S.$_get](dart.notNull(assetPathSplitted[S.$length]) - 1);
          try {
            let bytes = (yield asset_bundle.rootBundle.load(assetPath));
            html = convert.utf8.decode(bytes[S.$buffer][S.$asUint8List]());
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
            } else
              throw e$;
          }
        } else {
          let client = _http.HttpClient.new();
          try {
            let htmlRequest = (yield client.getUrl(webviewUrl));
            html = (yield (yield htmlRequest.close()).transform(core.String, new convert.Utf8Decoder.new()).join());
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            if (core.Object.is(e)) {
              core.print(e);
            } else
              throw e$0;
          }
        }
        return html;
      }).bind(this));
    }
    getFavicons() {
      return async.async(T.ListOfFavicon(), (function* getFavicons() {
        let t42, t42$, t43;
        let favicons = T.JSArrayOfFavicon().of([]);
        let client = _http.HttpClient.new();
        let webviewUrl = (yield this.getUrl());
        if (webviewUrl == null) {
          return favicons;
        }
        let manifestUrl = null;
        let html = (yield this.getHtml());
        if (html == null || html[S.$isEmpty]) {
          return favicons;
        }
        let assetPathBase = null;
        if (dart.test(webviewUrl.isScheme("file"))) {
          let assetPathSplitted = dart.toString(webviewUrl)[S.$split]("/flutter_assets/");
          assetPathBase = dart.notNull(assetPathSplitted[S.$_get](0)) + "/flutter_assets/";
        }
        let options = (yield this.getOptions());
        if (options != null && options.crossPlatform.javaScriptEnabled === true) {
          let links = T.ListOfMap().as((t42$ = (t42 = (yield this.evaluateJavascript({source: "(function() {\n  var linkNodes = document.head.getElementsByTagName(\"link\");\n  var links = [];\n  for (var i = 0; i < linkNodes.length; i++) {\n    var linkNode = linkNodes[i];\n    if (linkNode.rel === 'manifest') {\n      links.push(\n        {\n          rel: linkNode.rel,\n          href: linkNode.href,\n          sizes: null\n        }\n      );\n    } else if (linkNode.rel != null && linkNode.rel.indexOf('icon') >= 0) {\n      links.push(\n        {\n          rel: linkNode.rel,\n          href: linkNode.href,\n          sizes: linkNode.sizes != null && linkNode.sizes.value != \"\" ? linkNode.sizes.value : null\n        }\n      );\n    }\n  }\n  return links;\n})();\n"})), t42 == null ? null : dart.dgsend(t42, [core.Map], 'cast', [])), t42$ == null ? T.JSArrayOfMap().of([]) : t42$));
          for (let link of links) {
            if (dart.equals(link[S.$_get]("rel"), "manifest")) {
              manifestUrl = T.StringN().as(link[S.$_get]("href"));
              if (!dart.test(this[S._isUrlAbsolute](dart.nullCheck(manifestUrl)))) {
                if (manifestUrl[S.$startsWith]("/")) {
                  manifestUrl = manifestUrl[S.$substring](1);
                }
                manifestUrl = T.StringN().as(dart.dsend(assetPathBase == null ? dart.notNull(webviewUrl.scheme) + "://" + dart.notNull(webviewUrl.host) + "/" : assetPathBase, '+', [manifestUrl]));
              }
              continue;
            }
            favicons[S.$addAll](this[S._createFavicons](webviewUrl, T.StringN().as(assetPathBase), core.String.as(link[S.$_get]("href")), T.StringN().as(link[S.$_get]("rel")), T.StringN().as(link[S.$_get]("sizes")), false));
          }
        }
        try {
          let faviconUrl = dart.notNull(webviewUrl.scheme) + "://" + dart.notNull(webviewUrl.host) + "/favicon.ico";
          let faviconUri = core.Uri.parse(faviconUrl);
          let headRequest = (yield client.headUrl(faviconUri));
          let headResponse = (yield headRequest.close());
          if (headResponse.statusCode === 200) {
            favicons[S.$add](new types.Favicon.new({url: faviconUri, rel: "shortcut icon"}));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            core.print("/favicon.ico file not found: " + dart.notNull(dart.toString(e)));
          } else
            throw e$;
        }
        let manifestRequest = null;
        let manifestResponse = null;
        let manifestFound = false;
        if (manifestUrl == null) {
          manifestUrl = dart.notNull(webviewUrl.scheme) + "://" + dart.notNull(webviewUrl.host) + "/manifest.json";
        }
        try {
          manifestRequest = (yield client.getUrl(core.Uri.parse(manifestUrl)));
          manifestResponse = (yield manifestRequest.close());
          manifestFound = manifestResponse.statusCode === 200 && (t43 = manifestResponse.headers.contentType, t43 == null ? null : t43.mimeType) === "application/json";
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          if (core.Object.is(e)) {
            core.print("Manifest file not found: " + dart.notNull(dart.toString(e)));
          } else
            throw e$0;
        }
        if (manifestFound) {
          let manifest = T.MapOfString$dynamic().as(convert.json.decode(yield dart.nullCheck(manifestResponse).transform(core.String, new convert.Utf8Decoder.new()).join()));
          if (dart.test(manifest[S.$containsKey]("icons"))) {
            for (let t44 of core.Iterable.as(manifest[S.$_get]("icons"))) {
              let icon = T.MapOfString$dynamic().as(t44);
              favicons[S.$addAll](this[S._createFavicons](webviewUrl, T.StringN().as(assetPathBase), core.String.as(icon[S.$_get]("src")), T.StringN().as(icon[S.$_get]("rel")), T.StringN().as(icon[S.$_get]("sizes")), true));
            }
          }
        }
        return favicons;
      }).bind(this));
    }
    [S._isUrlAbsolute](url) {
      if (url == null) dart.nullFailed(I[50], 1097, 30, "url");
      return url[S.$startsWith]("http://") || url[S.$startsWith]("https://");
    }
    [S._createFavicons](url, assetPathBase, urlIcon, rel, sizes, isManifest) {
      if (url == null) dart.nullFailed(I[50], 1101, 37, "url");
      if (urlIcon == null) dart.nullFailed(I[50], 1101, 72, "urlIcon");
      if (isManifest == null) dart.nullFailed(I[50], 1102, 40, "isManifest");
      let favicons = T.JSArrayOfFavicon().of([]);
      let urlSplitted = urlIcon[S.$split]("/");
      if (!dart.test(this[S._isUrlAbsolute](urlIcon))) {
        if (urlIcon[S.$startsWith]("/")) {
          urlIcon = urlIcon[S.$substring](1);
        }
        urlIcon = dart.notNull(assetPathBase == null ? dart.notNull(url.scheme) + "://" + dart.notNull(url.host) + "/" : assetPathBase) + dart.notNull(urlIcon);
      }
      if (dart.test(isManifest)) {
        rel = sizes != null ? urlSplitted[S.$_get](dart.notNull(urlSplitted[S.$length]) - 1)[S.$replaceFirst]("-" + dart.notNull(sizes), "")[S.$split](" ")[S.$_get](0)[S.$split](".")[S.$_get](0) : null;
      }
      if (sizes != null && sizes[S.$isNotEmpty] && sizes !== "any") {
        let sizesSplitted = sizes[S.$split](" ");
        for (let size of sizesSplitted) {
          let width = core.int.parse(size[S.$split]("x")[S.$_get](0));
          let height = core.int.parse(size[S.$split]("x")[S.$_get](1));
          favicons[S.$add](new types.Favicon.new({url: core.Uri.parse(urlIcon), rel: rel, width: width, height: height}));
        }
      } else {
        favicons[S.$add](new types.Favicon.new({url: core.Uri.parse(urlIcon), rel: rel, width: null, height: null}));
      }
      return favicons;
    }
    loadUrl(opts) {
      let urlRequest = opts && 'urlRequest' in opts ? opts.urlRequest : null;
      if (urlRequest == null) dart.nullFailed(I[50], 1155, 28, "urlRequest");
      let iosAllowingReadAccessTo = opts && 'iosAllowingReadAccessTo' in opts ? opts.iosAllowingReadAccessTo : null;
      return async.async(dart.void, (function* loadUrl() {
        if (!(urlRequest.url != null && dart.toString(urlRequest.url)[S.$isNotEmpty])) dart.assertFailed(null, I[50], 1156, 12, "urlRequest.url != null && urlRequest.url.toString().isNotEmpty");
        if (!(iosAllowingReadAccessTo == null || dart.test(iosAllowingReadAccessTo.isScheme("file")))) dart.assertFailed(null, I[50], 1157, 12, "iosAllowingReadAccessTo == null ||\n        iosAllowingReadAccessTo.isScheme(\"file\")");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("urlRequest", dart.fn(() => urlRequest.toMap(), T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("allowingReadAccessTo", dart.fn(() => {
          let t45;
          t45 = iosAllowingReadAccessTo;
          return t45 == null ? null : dart.toString(t45);
        }, T.VoidToStringN()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "loadUrl", args);
      }).bind(this));
    }
    postUrl(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[50], 1176, 38, "url");
      let postData = opts && 'postData' in opts ? opts.postData : null;
      if (postData == null) dart.nullFailed(I[50], 1176, 62, "postData");
      return async.async(dart.void, (function* postUrl() {
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[50], 1177, 12, "url.toString().isNotEmpty");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        args[S.$putIfAbsent]("postData", dart.fn(() => postData, T.VoidToUint8List()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "postUrl", args);
      }).bind(this));
    }
    loadData(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      if (data == null) dart.nullFailed(I[50], 1201, 24, "data");
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "text/html";
      if (mimeType == null) dart.nullFailed(I[50], 1202, 14, "mimeType");
      let encoding = opts && 'encoding' in opts ? opts.encoding : "utf8";
      if (encoding == null) dart.nullFailed(I[50], 1203, 14, "encoding");
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let androidHistoryUrl = opts && 'androidHistoryUrl' in opts ? opts.androidHistoryUrl : null;
      let iosAllowingReadAccessTo = opts && 'iosAllowingReadAccessTo' in opts ? opts.iosAllowingReadAccessTo : null;
      return async.async(dart.void, (function* loadData() {
        if (!(iosAllowingReadAccessTo == null || dart.test(iosAllowingReadAccessTo.isScheme("file")))) dart.assertFailed(null, I[50], 1207, 12, "iosAllowingReadAccessTo == null ||\n        iosAllowingReadAccessTo.isScheme(\"file\")");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("data", dart.fn(() => data, T.VoidToString()));
        args[S.$putIfAbsent]("mimeType", dart.fn(() => mimeType, T.VoidToString()));
        args[S.$putIfAbsent]("encoding", dart.fn(() => encoding, T.VoidToString()));
        args[S.$putIfAbsent]("baseUrl", dart.fn(() => {
          let t45, t45$;
          t45$ = (t45 = baseUrl, t45 == null ? null : dart.toString(t45));
          return t45$ == null ? "about:blank" : t45$;
        }, T.VoidToString()));
        args[S.$putIfAbsent]("historyUrl", dart.fn(() => {
          let t45, t45$;
          t45$ = (t45 = androidHistoryUrl, t45 == null ? null : dart.toString(t45));
          return t45$ == null ? "about:blank" : t45$;
        }, T.VoidToString()));
        args[S.$putIfAbsent]("allowingReadAccessTo", dart.fn(() => {
          let t45;
          t45 = iosAllowingReadAccessTo;
          return t45 == null ? null : dart.toString(t45);
        }, T.VoidToStringN()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "loadData", args);
      }).bind(this));
    }
    loadFile(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      if (assetFilePath == null) dart.nullFailed(I[50], 1251, 42, "assetFilePath");
      return async.async(dart.void, (function* loadFile() {
        if (!assetFilePath[S.$isNotEmpty]) dart.assertFailed(null, I[50], 1252, 12, "assetFilePath.isNotEmpty");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("assetFilePath", dart.fn(() => assetFilePath, T.VoidToString()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "loadFile", args);
      }).bind(this));
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "reload", args);
      }).bind(this));
    }
    goBack() {
      return async.async(dart.void, (function* goBack() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "goBack", args);
      }).bind(this));
    }
    canGoBack() {
      return async.async(core.bool, (function* canGoBack() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "canGoBack", args));
      }).bind(this));
    }
    goForward() {
      return async.async(dart.void, (function* goForward() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "goForward", args);
      }).bind(this));
    }
    canGoForward() {
      return async.async(core.bool, (function* canGoForward() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "canGoForward", args));
      }).bind(this));
    }
    goBackOrForward(opts) {
      let steps = opts && 'steps' in opts ? opts.steps : null;
      if (steps == null) dart.nullFailed(I[50], 1313, 46, "steps");
      return async.async(dart.void, (function* goBackOrForward() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("steps", dart.fn(() => steps, T.VoidToint()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "goBackOrForward", args);
      }).bind(this));
    }
    canGoBackOrForward(opts) {
      let steps = opts && 'steps' in opts ? opts.steps : null;
      if (steps == null) dart.nullFailed(I[50], 1322, 49, "steps");
      return async.async(core.bool, (function* canGoBackOrForward() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("steps", dart.fn(() => steps, T.VoidToint()));
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "canGoBackOrForward", args));
      }).bind(this));
    }
    goTo(opts) {
      let historyItem = opts && 'historyItem' in opts ? opts.historyItem : null;
      if (historyItem == null) dart.nullFailed(I[50], 1329, 46, "historyItem");
      return async.async(dart.void, (function* goTo() {
        if (historyItem.offset != null) {
          yield this.goBackOrForward({steps: dart.nullCheck(historyItem.offset)});
        }
      }).bind(this));
    }
    isLoading() {
      return async.async(core.bool, (function* isLoading() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "isLoading", args));
      }).bind(this));
    }
    stopLoading() {
      return async.async(dart.void, (function* stopLoading() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "stopLoading", args);
      }).bind(this));
    }
    evaluateJavascript(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      if (source == null) dart.nullFailed(I[50], 1371, 24, "source");
      let contentWorld = opts && 'contentWorld' in opts ? opts.contentWorld : null;
      return async.async(dart.dynamic, (function* evaluateJavascript() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("source", dart.fn(() => source, T.VoidToString()));
        args[S.$putIfAbsent]("contentWorld", dart.fn(() => {
          let t45;
          t45 = contentWorld;
          return t45 == null ? null : t45.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        let data = (yield this[S._channel$6].invokeMethod(dart.dynamic, "evaluateJavascript", args));
        if (data != null && platform.defaultTargetPlatform == platform.TargetPlatform.android) data = convert.json.decode(core.String.as(data));
        return data;
      }).bind(this));
    }
    injectJavascriptFileFromUrl(opts) {
      let urlFile = opts && 'urlFile' in opts ? opts.urlFile : null;
      if (urlFile == null) dart.nullFailed(I[50], 1390, 21, "urlFile");
      let scriptHtmlTagAttributes = opts && 'scriptHtmlTagAttributes' in opts ? opts.scriptHtmlTagAttributes : null;
      return async.async(dart.void, (function* injectJavascriptFileFromUrl() {
        let t45;
        if (!dart.toString(urlFile)[S.$isNotEmpty]) dart.assertFailed(null, I[50], 1392, 12, "urlFile.toString().isNotEmpty");
        let id = (t45 = scriptHtmlTagAttributes, t45 == null ? null : t45.id);
        if (scriptHtmlTagAttributes != null && id != null) {
          this[S._injectedScriptsFromURL][S.$_set](id, scriptHtmlTagAttributes);
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("urlFile", dart.fn(() => dart.toString(urlFile), T.VoidToString()));
        args[S.$putIfAbsent]("scriptHtmlTagAttributes", dart.fn(() => {
          let t45;
          t45 = scriptHtmlTagAttributes;
          return t45 == null ? null : t45.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "injectJavascriptFileFromUrl", args);
      }).bind(this));
    }
    injectJavascriptFileFromAsset(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      if (assetFilePath == null) dart.nullFailed(I[50], 1411, 24, "assetFilePath");
      return async.async(dart.dynamic, (function* injectJavascriptFileFromAsset() {
        let source = (yield asset_bundle.rootBundle.loadString(assetFilePath));
        return yield this.evaluateJavascript({source: source});
      }).bind(this));
    }
    injectCSSCode(opts) {
      let source = opts && 'source' in opts ? opts.source : null;
      if (source == null) dart.nullFailed(I[50], 1422, 47, "source");
      return async.async(dart.void, (function* injectCSSCode() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("source", dart.fn(() => source, T.VoidToString()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "injectCSSCode", args);
      }).bind(this));
    }
    injectCSSFileFromUrl(opts) {
      let urlFile = opts && 'urlFile' in opts ? opts.urlFile : null;
      if (urlFile == null) dart.nullFailed(I[50], 1437, 21, "urlFile");
      let cssLinkHtmlTagAttributes = opts && 'cssLinkHtmlTagAttributes' in opts ? opts.cssLinkHtmlTagAttributes : null;
      return async.async(dart.void, (function* injectCSSFileFromUrl() {
        if (!dart.toString(urlFile)[S.$isNotEmpty]) dart.assertFailed(null, I[50], 1439, 12, "urlFile.toString().isNotEmpty");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("urlFile", dart.fn(() => dart.toString(urlFile), T.VoidToString()));
        args[S.$putIfAbsent]("cssLinkHtmlTagAttributes", dart.fn(() => {
          let t45;
          t45 = cssLinkHtmlTagAttributes;
          return t45 == null ? null : t45.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "injectCSSFileFromUrl", args);
      }).bind(this));
    }
    injectCSSFileFromAsset(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      if (assetFilePath == null) dart.nullFailed(I[50], 1453, 56, "assetFilePath");
      return async.async(dart.void, (function* injectCSSFileFromAsset() {
        let source = (yield asset_bundle.rootBundle.loadString(assetFilePath));
        yield this.injectCSSCode({source: source});
      }).bind(this));
    }
    addJavaScriptHandler(opts) {
      let handlerName = opts && 'handlerName' in opts ? opts.handlerName : null;
      if (handlerName == null) dart.nullFailed(I[50], 1509, 24, "handlerName");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[50], 1510, 42, "callback");
      if (!!dart.test(in_app_webview_controller$0._JAVASCRIPT_HANDLER_FORBIDDEN_NAMES[S.$contains](handlerName))) dart.assertFailed("\"" + dart.str(handlerName) + "\" is a forbidden name!", I[50], 1511, 12, "!_JAVASCRIPT_HANDLER_FORBIDDEN_NAMES.contains(handlerName)");
      this.javaScriptHandlersMap[S.$_set](handlerName, callback);
    }
    removeJavaScriptHandler(opts) {
      let handlerName = opts && 'handlerName' in opts ? opts.handlerName : null;
      if (handlerName == null) dart.nullFailed(I[50], 1520, 24, "handlerName");
      return this.javaScriptHandlersMap[S.$remove](handlerName);
    }
    takeScreenshot(opts) {
      let screenshotConfiguration = opts && 'screenshotConfiguration' in opts ? opts.screenshotConfiguration : null;
      return async.async(T.Uint8ListN(), (function* takeScreenshot() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("screenshotConfiguration", dart.fn(() => {
          let t45;
          t45 = screenshotConfiguration;
          return t45 == null ? null : t45.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        return yield this[S._channel$6].invokeMethod(typed_data.Uint8List, "takeScreenshot", args);
      }).bind(this));
    }
    setOptions(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      if (options == null) dart.nullFailed(I[50], 1540, 62, "options");
      return async.async(dart.void, (function* setOptions() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("options", dart.fn(() => options.toMap(), T.VoidToMapOfString$dynamic()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "setOptions", args);
      }).bind(this));
    }
    getOptions() {
      return async.async(T.InAppWebViewGroupOptionsN(), (function* getOptions() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let options = (yield this[S._channel$6].invokeMethod(core.Map, "getOptions", args));
        if (options != null) {
          options = options[S.$cast](core.String, dart.dynamic);
          return in_app_webview_options$0.InAppWebViewGroupOptions.fromMap(T.MapOfString$dynamic().as(options));
        }
        return null;
      }).bind(this));
    }
    getCopyBackForwardList() {
      return async.async(T.WebHistoryN(), (function* getCopyBackForwardList() {
        let t45;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let result = T.MapNOfString$dynamic().as((t45 = (yield this[S._channel$6].invokeMethod(dart.dynamic, "getCopyBackForwardList", args)), t45 == null ? null : dart.dgsend(t45, [core.String, dart.dynamic], 'cast', [])));
        return types.WebHistory.fromMap(result);
      }).bind(this));
    }
    clearCache() {
      return async.async(dart.void, (function* clearCache() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "clearCache", args);
      }).bind(this));
    }
    findAllAsync(opts) {
      let find = opts && 'find' in opts ? opts.find : null;
      if (find == null) dart.nullFailed(I[50], 1592, 46, "find");
      return async.async(dart.void, (function* findAllAsync() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("find", dart.fn(() => find, T.VoidToString()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "findAllAsync", args);
      }).bind(this));
    }
    findNext(opts) {
      let forward = opts && 'forward' in opts ? opts.forward : null;
      if (forward == null) dart.nullFailed(I[50], 1605, 40, "forward");
      return async.async(dart.void, (function* findNext() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("forward", dart.fn(() => forward, T.VoidTobool()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "findNext", args);
      }).bind(this));
    }
    clearMatches() {
      return async.async(dart.void, (function* clearMatches() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "clearMatches", args);
      }).bind(this));
    }
    getTRexRunnerHtml() {
      return async.async(core.String, function* getTRexRunnerHtml() {
        return yield asset_bundle.rootBundle.loadString("packages/flutter_inappwebview/t_rex_runner/t-rex.html");
      });
    }
    getTRexRunnerCss() {
      return async.async(core.String, function* getTRexRunnerCss() {
        return yield asset_bundle.rootBundle.loadString("packages/flutter_inappwebview/t_rex_runner/t-rex.css");
      });
    }
    scrollTo(opts) {
      let x = opts && 'x' in opts ? opts.x : null;
      if (x == null) dart.nullFailed(I[50], 1645, 21, "x");
      let y = opts && 'y' in opts ? opts.y : null;
      if (y == null) dart.nullFailed(I[50], 1645, 37, "y");
      let animated = opts && 'animated' in opts ? opts.animated : false;
      if (animated == null) dart.nullFailed(I[50], 1645, 45, "animated");
      return async.async(dart.void, (function* scrollTo() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("x", dart.fn(() => x, T.VoidToint()));
        args[S.$putIfAbsent]("y", dart.fn(() => y, T.VoidToint()));
        args[S.$putIfAbsent]("animated", dart.fn(() => animated, T.VoidTobool()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "scrollTo", args);
      }).bind(this));
    }
    scrollBy(opts) {
      let x = opts && 'x' in opts ? opts.x : null;
      if (x == null) dart.nullFailed(I[50], 1665, 21, "x");
      let y = opts && 'y' in opts ? opts.y : null;
      if (y == null) dart.nullFailed(I[50], 1665, 37, "y");
      let animated = opts && 'animated' in opts ? opts.animated : false;
      if (animated == null) dart.nullFailed(I[50], 1665, 45, "animated");
      return async.async(dart.void, (function* scrollBy() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("x", dart.fn(() => x, T.VoidToint()));
        args[S.$putIfAbsent]("y", dart.fn(() => y, T.VoidToint()));
        args[S.$putIfAbsent]("animated", dart.fn(() => animated, T.VoidTobool()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "scrollBy", args);
      }).bind(this));
    }
    pauseTimers() {
      return async.async(dart.void, (function* pauseTimers() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "pauseTimers", args);
      }).bind(this));
    }
    resumeTimers() {
      return async.async(dart.void, (function* resumeTimers() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "resumeTimers", args);
      }).bind(this));
    }
    printCurrentPage() {
      return async.async(dart.void, (function* printCurrentPage() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "printCurrentPage", args);
      }).bind(this));
    }
    getContentHeight() {
      return async.async(T.intN(), (function* getContentHeight() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.int, "getContentHeight", args);
      }).bind(this));
    }
    zoomBy(opts) {
      let zoomFactor = opts && 'zoomFactor' in opts ? opts.zoomFactor : null;
      if (zoomFactor == null) dart.nullFailed(I[50], 1729, 24, "zoomFactor");
      let iosAnimated = opts && 'iosAnimated' in opts ? opts.iosAnimated : false;
      if (iosAnimated == null) dart.nullFailed(I[50], 1729, 41, "iosAnimated");
      return async.async(dart.void, (function* zoomBy() {
        if (!(platform.defaultTargetPlatform != platform.TargetPlatform.android || platform.defaultTargetPlatform == platform.TargetPlatform.android && dart.notNull(zoomFactor) > 0.01 && dart.notNull(zoomFactor) <= 100.0)) dart.assertFailed(null, I[50], 1730, 12, "defaultTargetPlatform != TargetPlatform.android ||\n        (defaultTargetPlatform == TargetPlatform.android &&\n            zoomFactor > 0.01 &&\n            zoomFactor <= 100.0)");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("zoomFactor", dart.fn(() => zoomFactor, T.VoidTodouble()));
        args[S.$putIfAbsent]("iosAnimated", dart.fn(() => iosAnimated, T.VoidTobool()));
        return yield this[S._channel$6].invokeMethod(dart.void, "zoomBy", args);
      }).bind(this));
    }
    getZoomScale() {
      return async.async(T.doubleN(), (function* getZoomScale() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.double, "getZoomScale", args);
      }).bind(this));
    }
    getScale() {
      return async.async(T.doubleN(), (function* getScale() {
        return yield this.getZoomScale();
      }).bind(this));
    }
    getSelectedText() {
      return async.async(T.StringN(), (function* getSelectedText() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.String, "getSelectedText", args);
      }).bind(this));
    }
    getHitTestResult() {
      return async.async(T.InAppWebViewHitTestResultN(), (function* getHitTestResult() {
        let t45;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let hitTestResultMap = (yield this[S._channel$6].invokeMethod(core.Map, "getHitTestResult", args));
        if (hitTestResultMap == null) {
          return null;
        }
        hitTestResultMap = hitTestResultMap[S.$cast](core.String, dart.dynamic);
        let type = types.InAppWebViewHitTestResultType.fromValue(T.intN().as((t45 = hitTestResultMap[S.$_get]("type"), t45 == null ? null : dart.dsend(t45, 'toInt', []))));
        let extra = T.StringN().as(hitTestResultMap[S.$_get]("extra"));
        return new types.InAppWebViewHitTestResult.new({type: type, extra: extra});
      }).bind(this));
    }
    clearFocus() {
      return async.async(dart.void, (function* clearFocus() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(dart.void, "clearFocus", args);
      }).bind(this));
    }
    setContextMenu(contextMenu) {
      return async.async(dart.void, (function* setContextMenu() {
        let t45;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("contextMenu", dart.fn(() => {
          let t45;
          t45 = contextMenu;
          return t45 == null ? null : t45.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "setContextMenu", args);
        t45 = this[S._inAppBrowser];
        t45 == null ? null : t45.contextMenu = contextMenu;
      }).bind(this));
    }
    requestFocusNodeHref() {
      return async.async(T.RequestFocusNodeHrefResultN(), (function* requestFocusNodeHref() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let result = (yield this[S._channel$6].invokeMethod(core.Map, "requestFocusNodeHref", args));
        return result != null ? new types.RequestFocusNodeHrefResult.new({url: result[S.$_get]("url") != null ? core.Uri.parse(core.String.as(result[S.$_get]("url"))) : null, title: T.StringN().as(result[S.$_get]("title")), src: T.StringN().as(result[S.$_get]("src"))}) : null;
      }).bind(this));
    }
    requestImageRef() {
      return async.async(T.RequestImageRefResultN(), (function* requestImageRef() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let result = (yield this[S._channel$6].invokeMethod(core.Map, "requestImageRef", args));
        return result != null ? new types.RequestImageRefResult.new({url: result[S.$_get]("url") != null ? core.Uri.parse(core.String.as(result[S.$_get]("url"))) : null}) : null;
      }).bind(this));
    }
    getMetaTags() {
      return async.async(T.ListOfMetaTag(), (function* getMetaTags() {
        let t45;
        let metaTags = T.JSArrayOfMetaTag().of([]);
        let metaTagList = T.ListNOfMap().as((t45 = (yield this.evaluateJavascript({source: "(function() {\n  var metaTags = [];\n  var metaTagNodes = document.head.getElementsByTagName('meta');\n  for (var i = 0; i < metaTagNodes.length; i++) {\n    var metaTagNode = metaTagNodes[i];\n    \n    var otherAttributes = metaTagNode.getAttributeNames();\n    var nameIndex = otherAttributes.indexOf(\"name\");\n    if (nameIndex !== -1) otherAttributes.splice(nameIndex, 1);\n    var contentIndex = otherAttributes.indexOf(\"content\");\n    if (contentIndex !== -1) otherAttributes.splice(contentIndex, 1);\n    \n    var attrs = [];\n    for (var j = 0; j < otherAttributes.length; j++) {\n      var otherAttribute = otherAttributes[j];\n      attrs.push(\n        {\n          name: otherAttribute,\n          value: metaTagNode.getAttribute(otherAttribute)\n        }\n      );\n    }\n\n    metaTags.push(\n      {\n        name: metaTagNode.name,\n        content: metaTagNode.content,\n        attrs: attrs\n      }\n    );\n  }\n  return metaTags;\n})();\n    "})), t45 == null ? null : dart.dgsend(t45, [core.Map], 'cast', [])));
        if (metaTagList == null) {
          return metaTags;
        }
        for (let metaTag of metaTagList) {
          let attrs = T.JSArrayOfMetaTagAttribute().of([]);
          for (let metaTagAttr of core.Iterable.as(metaTag[S.$_get]("attrs"))) {
            attrs[S.$add](new types.MetaTagAttribute.new({name: T.StringN().as(dart.dsend(metaTagAttr, '_get', ["name"])), value: T.StringN().as(dart.dsend(metaTagAttr, '_get', ["value"]))}));
          }
          metaTags[S.$add](new types.MetaTag.new({name: T.StringN().as(metaTag[S.$_get]("name")), content: T.StringN().as(metaTag[S.$_get]("content")), attrs: attrs}));
        }
        return metaTags;
      }).bind(this));
    }
    getMetaThemeColor() {
      return async.async(T.ColorN(), (function* getMetaThemeColor() {
        let metaTags = (yield this.getMetaTags());
        let metaTagThemeColor = null;
        for (let metaTag of metaTags) {
          if (metaTag.name === "theme-color") {
            metaTagThemeColor = metaTag;
            break;
          }
        }
        if (metaTagThemeColor == null) {
          return null;
        }
        let colorValue = metaTagThemeColor.content;
        return colorValue != null ? util['UtilColor|fromStringRepresentation'](colorValue) : null;
      }).bind(this));
    }
    getScrollX() {
      return async.async(T.intN(), (function* getScrollX() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.int, "getScrollX", args);
      }).bind(this));
    }
    getScrollY() {
      return async.async(T.intN(), (function* getScrollY() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return yield this[S._channel$6].invokeMethod(core.int, "getScrollY", args);
      }).bind(this));
    }
    getCertificate() {
      return async.async(T.SslCertificateN(), (function* getCertificate() {
        let t45;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let sslCertificateMap = T.MapNOfString$dynamic().as((t45 = (yield this[S._channel$6].invokeMethod(dart.dynamic, "getCertificate", args)), t45 == null ? null : dart.dgsend(t45, [core.String, dart.dynamic], 'cast', [])));
        return types.SslCertificate.fromMap(sslCertificateMap);
      }).bind(this));
    }
    addUserScript(opts) {
      let userScript = opts && 'userScript' in opts ? opts.userScript : null;
      if (userScript == null) dart.nullFailed(I[50], 1966, 51, "userScript");
      return async.async(dart.void, (function* addUserScript() {
        let t45;
        if (!((t45 = this[S._webview], t45 == null ? null : t45.windowId) == null || platform.defaultTargetPlatform != platform.TargetPlatform.iOS)) dart.assertFailed(null, I[50], 1967, 12, "_webview?.windowId == null ||\n        defaultTargetPlatform != TargetPlatform.iOS");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("userScript", dart.fn(() => userScript.toMap(), T.VoidToMapOfString$dynamic()));
        if (!dart.test(this[S._userScripts][S.$contains](userScript))) {
          this[S._userScripts][S.$add](userScript);
          yield this[S._channel$6].invokeMethod(dart.dynamic, "addUserScript", args);
        }
      }).bind(this));
    }
    addUserScripts(opts) {
      let userScripts = opts && 'userScripts' in opts ? opts.userScripts : null;
      if (userScripts == null) dart.nullFailed(I[50], 1983, 58, "userScripts");
      return async.async(dart.void, (function* addUserScripts() {
        let t45;
        if (!((t45 = this[S._webview], t45 == null ? null : t45.windowId) == null || platform.defaultTargetPlatform != platform.TargetPlatform.iOS)) dart.assertFailed(null, I[50], 1984, 12, "_webview?.windowId == null ||\n        defaultTargetPlatform != TargetPlatform.iOS");
        for (let i = 0; i < dart.notNull(userScripts[S.$length]); i = i + 1) {
          yield this.addUserScript({userScript: userScripts[S.$_get](i)});
        }
      }).bind(this));
    }
    removeUserScript(opts) {
      let userScript = opts && 'userScript' in opts ? opts.userScript : null;
      if (userScript == null) dart.nullFailed(I[50], 1999, 54, "userScript");
      return async.async(core.bool, (function* removeUserScript() {
        let t45;
        if (!((t45 = this[S._webview], t45 == null ? null : t45.windowId) == null || platform.defaultTargetPlatform != platform.TargetPlatform.iOS)) dart.assertFailed(null, I[50], 2000, 12, "_webview?.windowId == null ||\n        defaultTargetPlatform != TargetPlatform.iOS");
        let index = this[S._userScripts][S.$indexOf](userScript);
        if (index === -1) {
          return false;
        }
        this[S._userScripts][S.$remove](userScript);
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("userScript", dart.fn(() => userScript.toMap(), T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("index", dart.fn(() => index, T.VoidToint()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "removeUserScript", args);
        return true;
      }).bind(this));
    }
    removeUserScriptsByGroupName(opts) {
      let groupName = opts && 'groupName' in opts ? opts.groupName : null;
      if (groupName == null) dart.nullFailed(I[50], 2023, 62, "groupName");
      return async.async(dart.void, (function* removeUserScriptsByGroupName() {
        let t45;
        if (!((t45 = this[S._webview], t45 == null ? null : t45.windowId) == null || platform.defaultTargetPlatform != platform.TargetPlatform.iOS)) dart.assertFailed(null, I[50], 2024, 12, "_webview?.windowId == null ||\n        defaultTargetPlatform != TargetPlatform.iOS");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("groupName", dart.fn(() => groupName, T.VoidToString()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "removeUserScriptsByGroupName", args);
      }).bind(this));
    }
    removeUserScripts(opts) {
      let userScripts = opts && 'userScripts' in opts ? opts.userScripts : null;
      if (userScripts == null) dart.nullFailed(I[50], 2039, 34, "userScripts");
      return async.async(dart.void, (function* removeUserScripts() {
        let t45;
        if (!((t45 = this[S._webview], t45 == null ? null : t45.windowId) == null || platform.defaultTargetPlatform != platform.TargetPlatform.iOS)) dart.assertFailed(null, I[50], 2040, 12, "_webview?.windowId == null ||\n        defaultTargetPlatform != TargetPlatform.iOS");
        for (let i = 0; i < dart.notNull(userScripts[S.$length]); i = i + 1) {
          yield this.removeUserScript({userScript: userScripts[S.$_get](i)});
        }
      }).bind(this));
    }
    removeAllUserScripts() {
      return async.async(dart.void, (function* removeAllUserScripts() {
        let t45;
        if (!((t45 = this[S._webview], t45 == null ? null : t45.windowId) == null || platform.defaultTargetPlatform != platform.TargetPlatform.iOS)) dart.assertFailed(null, I[50], 2056, 12, "_webview?.windowId == null ||\n        defaultTargetPlatform != TargetPlatform.iOS");
        this[S._userScripts][S.$clear]();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S._channel$6].invokeMethod(dart.dynamic, "removeAllUserScripts", args);
      }).bind(this));
    }
    callAsyncJavaScript(opts) {
      let functionBody = opts && 'functionBody' in opts ? opts.functionBody : null;
      if (functionBody == null) dart.nullFailed(I[50], 2095, 24, "functionBody");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : C[60] || CT.C60;
      if ($arguments == null) dart.nullFailed(I[50], 2096, 28, "arguments");
      let contentWorld = opts && 'contentWorld' in opts ? opts.contentWorld : null;
      return async.async(T.CallAsyncJavaScriptResultN(), (function* callAsyncJavaScript() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("functionBody", dart.fn(() => functionBody, T.VoidToString()));
        args[S.$putIfAbsent]("arguments", dart.fn(() => $arguments, T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("contentWorld", dart.fn(() => {
          let t45;
          t45 = contentWorld;
          return t45 == null ? null : t45.toMap();
        }, T.VoidToMapNOfString$dynamic()));
        let data = (yield this[S._channel$6].invokeMethod(dart.dynamic, "callAsyncJavaScript", args));
        if (data == null) {
          return null;
        }
        if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
          data = convert.json.decode(core.String.as(data));
        }
        return new types.CallAsyncJavaScriptResult.new({value: dart.dsend(data, '_get', ["value"]), error: T.StringN().as(dart.dsend(data, '_get', ["error"]))});
      }).bind(this));
    }
    saveWebArchive(opts) {
      let filePath = opts && 'filePath' in opts ? opts.filePath : null;
      if (filePath == null) dart.nullFailed(I[50], 2127, 24, "filePath");
      let autoname = opts && 'autoname' in opts ? opts.autoname : false;
      if (autoname == null) dart.nullFailed(I[50], 2127, 39, "autoname");
      return async.async(T.StringN(), (function* saveWebArchive() {
        if (!dart.test(autoname)) {
          if (platform.defaultTargetPlatform == platform.TargetPlatform.android) {
            if (!filePath[S.$endsWith]("." + dart.notNull(types.WebArchiveFormat.MHT.toValue()))) dart.assertFailed(null, I[50], 2130, 16, "filePath.endsWith(\".\" + WebArchiveFormat.MHT.toValue())");
          } else if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
            if (!filePath[S.$endsWith]("." + dart.notNull(types.WebArchiveFormat.WEBARCHIVE.toValue()))) dart.assertFailed(null, I[50], 2132, 16, "filePath.endsWith(\".\" + WebArchiveFormat.WEBARCHIVE.toValue())");
          }
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("filePath", dart.fn(() => filePath, T.VoidToString()));
        args[S.$putIfAbsent]("autoname", dart.fn(() => autoname, T.VoidTobool()));
        return yield this[S._channel$6].invokeMethod(core.String, "saveWebArchive", args);
      }).bind(this));
    }
    isSecureContext() {
      return async.async(core.bool, (function* isSecureContext() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "isSecureContext", args));
      }).bind(this));
    }
    createWebMessageChannel() {
      return async.async(T.WebMessageChannelN(), (function* createWebMessageChannel() {
        let t45;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let result = T.MapNOfString$dynamic().as((t45 = (yield this[S._channel$6].invokeMethod(dart.dynamic, "createWebMessageChannel", args)), t45 == null ? null : dart.dgsend(t45, [core.String, dart.dynamic], 'cast', [])));
        return web_message_channel.WebMessageChannel.fromMap(result);
      }).bind(this));
    }
    postWebMessage(opts) {
      let message = opts && 'message' in opts ? opts.message : null;
      if (message == null) dart.nullFailed(I[50], 2182, 28, "message");
      let targetOrigin = opts && 'targetOrigin' in opts ? opts.targetOrigin : null;
      return async.async(dart.void, (function* postWebMessage() {
        if (targetOrigin == null) {
          targetOrigin = core.Uri.parse("");
        }
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("message", dart.fn(() => message.toMap(), T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("targetOrigin", dart.fn(() => dart.toString(targetOrigin), T.VoidToString()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "postWebMessage", args);
      }).bind(this));
    }
    addWebMessageListener(webMessageListener) {
      if (webMessageListener == null) dart.nullFailed(I[50], 2352, 26, "webMessageListener");
      return async.async(dart.void, (function* addWebMessageListener() {
        if (!!dart.test(this[S._webMessageListenerObjNames].contains(webMessageListener.jsObjectName))) dart.assertFailed("jsObjectName " + dart.str(webMessageListener.jsObjectName) + " was already added.", I[50], 2354, 9, "!_webMessageListenerObjNames.contains(webMessageListener.jsObjectName)");
        this[S._webMessageListenerObjNames].add(webMessageListener.jsObjectName);
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("webMessageListener", dart.fn(() => webMessageListener.toMap(), T.VoidToMapOfString$dynamic()));
        yield this[S._channel$6].invokeMethod(dart.dynamic, "addWebMessageListener", args);
      }).bind(this));
    }
    canScrollVertically() {
      return async.async(core.bool, (function* canScrollVertically() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "canScrollVertically", args));
      }).bind(this));
    }
    canScrollHorizontally() {
      return async.async(core.bool, (function* canScrollHorizontally() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S._channel$6].invokeMethod(dart.dynamic, "canScrollHorizontally", args));
      }).bind(this));
    }
    static getDefaultUserAgent() {
      return async.async(core.String, function* getDefaultUserAgent() {
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfString().as(yield in_app_webview_controller$0.InAppWebViewController._staticChannel.invokeMethod(dart.dynamic, "getDefaultUserAgent", args));
      });
    }
  };
  (in_app_webview_controller$0.InAppWebViewController.new = function(id, webview) {
    let t35;
    if (webview == null) dart.nullFailed(I[50], 74, 46, "webview");
    this[S._webview] = null;
    this[S.__InAppWebViewController__channel] = null;
    this[S.__InAppWebViewController__channel_isSet] = false;
    this[S.javaScriptHandlersMap] = new (T.IdentityMapOfString$ListTodynamic()).new();
    this[S._userScripts] = T.JSArrayOfUserScript().of([]);
    this[S._webMessageListenerObjNames] = new (T._IdentityHashSetOfString()).new();
    this[S._injectedScriptsFromURL] = new (T.IdentityMapOfString$ScriptHtmlTagAttributes()).new();
    this[S._id] = null;
    this[S._inAppBrowser] = null;
    this[S.__InAppWebViewController_android] = null;
    this[S.__InAppWebViewController_android_isSet] = false;
    this[S.__InAppWebViewController_ios] = null;
    this[S.__InAppWebViewController_ios_isSet] = false;
    this[S.__InAppWebViewController_webStorage] = null;
    this[S.__InAppWebViewController_webStorage_isSet] = false;
    this[S._id] = id;
    this[S._channel$6] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappwebview_" + dart.str(id));
    this[S._channel$6].setMethodCallHandler(dart.bind(this, 'handleMethod'));
    this[S._webview] = webview;
    this[S._userScripts] = T.ListOfUserScript().from((t35 = webview.initialUserScripts, t35 == null ? T.JSArrayOfUserScript().of([]) : t35));
    this[S._init]();
  }).prototype = in_app_webview_controller$0.InAppWebViewController.prototype;
  (in_app_webview_controller$0.InAppWebViewController.fromInAppBrowser = function(channel, inAppBrowser, initialUserScripts) {
    let t35;
    if (channel == null) dart.nullFailed(I[50], 86, 21, "channel");
    if (inAppBrowser == null) dart.nullFailed(I[50], 87, 20, "inAppBrowser");
    this[S._webview] = null;
    this[S.__InAppWebViewController__channel] = null;
    this[S.__InAppWebViewController__channel_isSet] = false;
    this[S.javaScriptHandlersMap] = new (T.IdentityMapOfString$ListTodynamic()).new();
    this[S._userScripts] = T.JSArrayOfUserScript().of([]);
    this[S._webMessageListenerObjNames] = new (T._IdentityHashSetOfString()).new();
    this[S._injectedScriptsFromURL] = new (T.IdentityMapOfString$ScriptHtmlTagAttributes()).new();
    this[S._id] = null;
    this[S._inAppBrowser] = null;
    this[S.__InAppWebViewController_android] = null;
    this[S.__InAppWebViewController_android_isSet] = false;
    this[S.__InAppWebViewController_ios] = null;
    this[S.__InAppWebViewController_ios_isSet] = false;
    this[S.__InAppWebViewController_webStorage] = null;
    this[S.__InAppWebViewController_webStorage_isSet] = false;
    this[S._channel$6] = channel;
    this[S._inAppBrowser] = inAppBrowser;
    this[S._userScripts] = T.ListOfUserScript().from((t35 = initialUserScripts, t35 == null ? T.JSArrayOfUserScript().of([]) : t35));
    this[S._init]();
  }).prototype = in_app_webview_controller$0.InAppWebViewController.prototype;
  dart.addTypeTests(in_app_webview_controller$0.InAppWebViewController);
  dart.addTypeCaches(in_app_webview_controller$0.InAppWebViewController);
  dart.setMethodSignature(in_app_webview_controller$0.InAppWebViewController, () => ({
    __proto__: dart.getMethods(in_app_webview_controller$0.InAppWebViewController.__proto__),
    [S._init]: dart.fnType(dart.void, []),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall]),
    getUrl: dart.fnType(async.Future$(dart.nullable(core.Uri)), []),
    getTitle: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getProgress: dart.fnType(async.Future$(dart.nullable(core.int)), []),
    getHtml: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getFavicons: dart.fnType(async.Future$(core.List$(types.Favicon)), []),
    [S._isUrlAbsolute]: dart.fnType(core.bool, [core.String]),
    [S._createFavicons]: dart.fnType(core.List$(types.Favicon), [core.Uri, dart.nullable(core.String), core.String, dart.nullable(core.String), dart.nullable(core.String), core.bool]),
    loadUrl: dart.fnType(async.Future$(dart.void), [], {iosAllowingReadAccessTo: dart.nullable(core.Uri)}, {urlRequest: types.URLRequest}),
    postUrl: dart.fnType(async.Future$(dart.void), [], {}, {postData: typed_data.Uint8List, url: core.Uri}),
    loadData: dart.fnType(async.Future$(dart.void), [], {androidHistoryUrl: dart.nullable(core.Uri), baseUrl: dart.nullable(core.Uri), encoding: core.String, iosAllowingReadAccessTo: dart.nullable(core.Uri), mimeType: core.String}, {data: core.String}),
    loadFile: dart.fnType(async.Future$(dart.void), [], {}, {assetFilePath: core.String}),
    reload: dart.fnType(async.Future$(dart.void), []),
    goBack: dart.fnType(async.Future$(dart.void), []),
    canGoBack: dart.fnType(async.Future$(core.bool), []),
    goForward: dart.fnType(async.Future$(dart.void), []),
    canGoForward: dart.fnType(async.Future$(core.bool), []),
    goBackOrForward: dart.fnType(async.Future$(dart.void), [], {}, {steps: core.int}),
    canGoBackOrForward: dart.fnType(async.Future$(core.bool), [], {}, {steps: core.int}),
    goTo: dart.fnType(async.Future$(dart.void), [], {}, {historyItem: types.WebHistoryItem}),
    isLoading: dart.fnType(async.Future$(core.bool), []),
    stopLoading: dart.fnType(async.Future$(dart.void), []),
    evaluateJavascript: dart.fnType(async.Future, [], {contentWorld: dart.nullable(types.ContentWorld)}, {source: core.String}),
    injectJavascriptFileFromUrl: dart.fnType(async.Future$(dart.void), [], {scriptHtmlTagAttributes: dart.nullable(types.ScriptHtmlTagAttributes)}, {urlFile: core.Uri}),
    injectJavascriptFileFromAsset: dart.fnType(async.Future, [], {}, {assetFilePath: core.String}),
    injectCSSCode: dart.fnType(async.Future$(dart.void), [], {}, {source: core.String}),
    injectCSSFileFromUrl: dart.fnType(async.Future$(dart.void), [], {cssLinkHtmlTagAttributes: dart.nullable(types.CSSLinkHtmlTagAttributes)}, {urlFile: core.Uri}),
    injectCSSFileFromAsset: dart.fnType(async.Future$(dart.void), [], {}, {assetFilePath: core.String}),
    addJavaScriptHandler: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.dynamic, [core.List]), handlerName: core.String}),
    removeJavaScriptHandler: dart.fnType(dart.nullable(dart.fnType(dart.dynamic, [core.List])), [], {}, {handlerName: core.String}),
    takeScreenshot: dart.fnType(async.Future$(dart.nullable(typed_data.Uint8List)), [], {screenshotConfiguration: dart.nullable(types.ScreenshotConfiguration)}, {}),
    setOptions: dart.fnType(async.Future$(dart.void), [], {}, {options: in_app_webview_options$0.InAppWebViewGroupOptions}),
    getOptions: dart.fnType(async.Future$(dart.nullable(in_app_webview_options$0.InAppWebViewGroupOptions)), []),
    getCopyBackForwardList: dart.fnType(async.Future$(dart.nullable(types.WebHistory)), []),
    clearCache: dart.fnType(async.Future$(dart.void), []),
    findAllAsync: dart.fnType(async.Future$(dart.void), [], {}, {find: core.String}),
    findNext: dart.fnType(async.Future$(dart.void), [], {}, {forward: core.bool}),
    clearMatches: dart.fnType(async.Future$(dart.void), []),
    getTRexRunnerHtml: dart.fnType(async.Future$(core.String), []),
    getTRexRunnerCss: dart.fnType(async.Future$(core.String), []),
    scrollTo: dart.fnType(async.Future$(dart.void), [], {animated: core.bool}, {x: core.int, y: core.int}),
    scrollBy: dart.fnType(async.Future$(dart.void), [], {animated: core.bool}, {x: core.int, y: core.int}),
    pauseTimers: dart.fnType(async.Future$(dart.void), []),
    resumeTimers: dart.fnType(async.Future$(dart.void), []),
    printCurrentPage: dart.fnType(async.Future$(dart.void), []),
    getContentHeight: dart.fnType(async.Future$(dart.nullable(core.int)), []),
    zoomBy: dart.fnType(async.Future$(dart.void), [], {iosAnimated: core.bool}, {zoomFactor: core.double}),
    getZoomScale: dart.fnType(async.Future$(dart.nullable(core.double)), []),
    getScale: dart.fnType(async.Future$(dart.nullable(core.double)), []),
    getSelectedText: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getHitTestResult: dart.fnType(async.Future$(dart.nullable(types.InAppWebViewHitTestResult)), []),
    clearFocus: dart.fnType(async.Future$(dart.void), []),
    setContextMenu: dart.fnType(async.Future$(dart.void), [dart.nullable(context_menu.ContextMenu)]),
    requestFocusNodeHref: dart.fnType(async.Future$(dart.nullable(types.RequestFocusNodeHrefResult)), []),
    requestImageRef: dart.fnType(async.Future$(dart.nullable(types.RequestImageRefResult)), []),
    getMetaTags: dart.fnType(async.Future$(core.List$(types.MetaTag)), []),
    getMetaThemeColor: dart.fnType(async.Future$(dart.nullable(ui.Color)), []),
    getScrollX: dart.fnType(async.Future$(dart.nullable(core.int)), []),
    getScrollY: dart.fnType(async.Future$(dart.nullable(core.int)), []),
    getCertificate: dart.fnType(async.Future$(dart.nullable(types.SslCertificate)), []),
    addUserScript: dart.fnType(async.Future$(dart.void), [], {}, {userScript: types.UserScript}),
    addUserScripts: dart.fnType(async.Future$(dart.void), [], {}, {userScripts: core.List$(types.UserScript)}),
    removeUserScript: dart.fnType(async.Future$(core.bool), [], {}, {userScript: types.UserScript}),
    removeUserScriptsByGroupName: dart.fnType(async.Future$(dart.void), [], {}, {groupName: core.String}),
    removeUserScripts: dart.fnType(async.Future$(dart.void), [], {}, {userScripts: core.List$(types.UserScript)}),
    removeAllUserScripts: dart.fnType(async.Future$(dart.void), []),
    callAsyncJavaScript: dart.fnType(async.Future$(dart.nullable(types.CallAsyncJavaScriptResult)), [], {arguments: core.Map$(core.String, dart.dynamic), contentWorld: dart.nullable(types.ContentWorld)}, {functionBody: core.String}),
    saveWebArchive: dart.fnType(async.Future$(dart.nullable(core.String)), [], {autoname: core.bool}, {filePath: core.String}),
    isSecureContext: dart.fnType(async.Future$(core.bool), []),
    createWebMessageChannel: dart.fnType(async.Future$(dart.nullable(web_message_channel.WebMessageChannel)), []),
    postWebMessage: dart.fnType(async.Future$(dart.void), [], {targetOrigin: dart.nullable(core.Uri)}, {message: web_message_channel.WebMessage}),
    addWebMessageListener: dart.fnType(async.Future$(dart.void), [web_message_listener.WebMessageListener]),
    canScrollVertically: dart.fnType(async.Future$(core.bool), []),
    canScrollHorizontally: dart.fnType(async.Future$(core.bool), [])
  }));
  dart.setGetterSignature(in_app_webview_controller$0.InAppWebViewController, () => ({
    __proto__: dart.getGetters(in_app_webview_controller$0.InAppWebViewController.__proto__),
    [S._channel$6]: platform_channel.MethodChannel,
    android: in_app_webview_controller$.AndroidInAppWebViewController,
    ios: in_app_webview_controller.IOSInAppWebViewController,
    webStorage: web_storage.WebStorage
  }));
  dart.setSetterSignature(in_app_webview_controller$0.InAppWebViewController, () => ({
    __proto__: dart.getSetters(in_app_webview_controller$0.InAppWebViewController.__proto__),
    [S._channel$6]: platform_channel.MethodChannel,
    android: in_app_webview_controller$.AndroidInAppWebViewController,
    ios: in_app_webview_controller.IOSInAppWebViewController,
    webStorage: web_storage.WebStorage
  }));
  dart.setLibraryUri(in_app_webview_controller$0.InAppWebViewController, I[51]);
  dart.setFieldSignature(in_app_webview_controller$0.InAppWebViewController, () => ({
    __proto__: dart.getFields(in_app_webview_controller$0.InAppWebViewController.__proto__),
    [S._webview]: dart.fieldType(dart.nullable(webview.WebView)),
    [S.__InAppWebViewController__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S.__InAppWebViewController__channel_isSet]: dart.fieldType(core.bool),
    javaScriptHandlersMap: dart.fieldType(core.Map$(core.String, dart.fnType(dart.dynamic, [core.List]))),
    [S._userScripts]: dart.fieldType(core.List$(types.UserScript)),
    [S._webMessageListenerObjNames]: dart.fieldType(core.Set$(core.String)),
    [S._injectedScriptsFromURL]: dart.fieldType(core.Map$(core.String, types.ScriptHtmlTagAttributes)),
    [S._id]: dart.fieldType(dart.dynamic),
    [S._inAppBrowser]: dart.fieldType(dart.nullable(in_app_browser.InAppBrowser)),
    [S.__InAppWebViewController_android]: dart.fieldType(dart.nullable(in_app_webview_controller$.AndroidInAppWebViewController)),
    [S.__InAppWebViewController_android_isSet]: dart.fieldType(core.bool),
    [S.__InAppWebViewController_ios]: dart.fieldType(dart.nullable(in_app_webview_controller.IOSInAppWebViewController)),
    [S.__InAppWebViewController_ios_isSet]: dart.fieldType(core.bool),
    [S.__InAppWebViewController_webStorage]: dart.fieldType(dart.nullable(web_storage.WebStorage)),
    [S.__InAppWebViewController_webStorage_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(in_app_webview_controller$0.InAppWebViewController, {
    /*in_app_webview_controller$0.InAppWebViewController._staticChannel*/get _staticChannel() {
      return _static_channel$.IN_APP_WEBVIEW_STATIC_CHANNEL;
    },
    set _staticChannel(_) {}
  }, false);
  dart.defineLazy(in_app_webview_controller$0, {
    /*in_app_webview_controller$0._JAVASCRIPT_HANDLER_FORBIDDEN_NAMES*/get _JAVASCRIPT_HANDLER_FORBIDDEN_NAMES() {
      return new (T.UnmodifiableListViewOfString()).new(T.JSArrayOfString().of(["onLoadResource", "shouldInterceptAjaxRequest", "onAjaxReadyStateChange", "onAjaxProgress", "shouldInterceptFetchRequest", "onPrint", "onWindowFocus", "onWindowBlur", "callAsyncJavaScript", "evaluateJavaScriptWithContentWorld"]));
    }
  }, false);
  types.ConsoleMessageLevel = class ConsoleMessageLevel extends core.Object {
    get [S._value$1]() {
      return this[S._value];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.ConsoleMessageLevel.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 61, 26, "element");
            return element.toValue() == value;
          }, T.ConsoleMessageLevelTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 0:
        {
          return "TIP";
        }
        case 2:
        {
          return "WARNING";
        }
        case 3:
        {
          return "ERROR";
        }
        case 4:
        {
          return "DEBUG";
        }
        case 1:
        default:
        {
          return "LOG";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ConsoleMessageLevel._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 47, 44, "_value");
    this[S._value] = _value;
    ;
  }).prototype = types.ConsoleMessageLevel.prototype;
  dart.addTypeTests(types.ConsoleMessageLevel);
  dart.addTypeCaches(types.ConsoleMessageLevel);
  dart.setMethodSignature(types.ConsoleMessageLevel, () => ({
    __proto__: dart.getMethods(types.ConsoleMessageLevel.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.ConsoleMessageLevel, I[53]);
  dart.setFieldSignature(types.ConsoleMessageLevel, () => ({
    __proto__: dart.getFields(types.ConsoleMessageLevel.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.ConsoleMessageLevel, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ConsoleMessageLevel, ['hashCode']);
  dart.defineLazy(types.ConsoleMessageLevel, {
    /*types.ConsoleMessageLevel.values*/get values() {
      return T.JSArrayOfConsoleMessageLevel().of([types.ConsoleMessageLevel.TIP, types.ConsoleMessageLevel.LOG, types.ConsoleMessageLevel.WARNING, types.ConsoleMessageLevel.ERROR, types.ConsoleMessageLevel.DEBUG])[S.$toSet]();
    },
    /*types.ConsoleMessageLevel.TIP*/get TIP() {
      return C[61] || CT.C61;
    },
    /*types.ConsoleMessageLevel.LOG*/get LOG() {
      return C[62] || CT.C62;
    },
    /*types.ConsoleMessageLevel.WARNING*/get WARNING() {
      return C[63] || CT.C63;
    },
    /*types.ConsoleMessageLevel.ERROR*/get ERROR() {
      return C[64] || CT.C64;
    },
    /*types.ConsoleMessageLevel.DEBUG*/get DEBUG() {
      return C[65] || CT.C65;
    }
  }, false);
  types.LoadedResource = class LoadedResource extends core.Object {
    get initiatorType() {
      return this[S.initiatorType];
    }
    set initiatorType(value) {
      this[S.initiatorType] = value;
    }
    get url() {
      return this[S.url];
    }
    set url(value) {
      this[S.url] = value;
    }
    get startTime() {
      return this[S.startTime];
    }
    set startTime(value) {
      this[S.startTime] = value;
    }
    get duration() {
      return this[S.duration];
    }
    set duration(value) {
      this[S.duration] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.LoadedResource.new({initiatorType: T.StringN().as(map[S.$_get]("initiatorType")), url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, startTime: T.doubleN().as(map[S.$_get]("startTime")), duration: T.doubleN().as(map[S.$_get]("duration"))});
    }
    toMap() {
      let t46;
      return new (T.IdentityMapOfString$dynamic()).from(["initiatorType", this.initiatorType, "url", (t46 = this.url, t46 == null ? null : dart.toString(t46)), "startTime", this.startTime, "duration", this.duration]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.LoadedResource.new = function(opts) {
    let initiatorType = opts && 'initiatorType' in opts ? opts.initiatorType : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let startTime = opts && 'startTime' in opts ? opts.startTime : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[S.initiatorType] = initiatorType;
    this[S.url] = url;
    this[S.startTime] = startTime;
    this[S.duration] = duration;
    ;
  }).prototype = types.LoadedResource.prototype;
  dart.addTypeTests(types.LoadedResource);
  dart.addTypeCaches(types.LoadedResource);
  dart.setMethodSignature(types.LoadedResource, () => ({
    __proto__: dart.getMethods(types.LoadedResource.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.LoadedResource, I[53]);
  dart.setFieldSignature(types.LoadedResource, () => ({
    __proto__: dart.getFields(types.LoadedResource.__proto__),
    initiatorType: dart.fieldType(dart.nullable(core.String)),
    url: dart.fieldType(dart.nullable(core.Uri)),
    startTime: dart.fieldType(dart.nullable(core.double)),
    duration: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(types.LoadedResource, ['toString']);
  types.InAppWebViewInitialData = class InAppWebViewInitialData extends core.Object {
    get data() {
      return this[S.data$1];
    }
    set data(value) {
      this[S.data$1] = value;
    }
    get mimeType() {
      return this[S.mimeType];
    }
    set mimeType(value) {
      this[S.mimeType] = value;
    }
    get encoding() {
      return this[S.encoding];
    }
    set encoding(value) {
      this[S.encoding] = value;
    }
    get baseUrl() {
      let t46;
      return dart.test(this[S.__InAppWebViewInitialData_baseUrl_isSet]) ? (t46 = this[S.__InAppWebViewInitialData_baseUrl], t46) : dart.throw(new _internal.LateError.fieldNI("baseUrl"));
    }
    set baseUrl(t46) {
      if (t46 == null) dart.nullFailed(I[52], 159, 12, "null");
      this[S.__InAppWebViewInitialData_baseUrl_isSet] = true;
      this[S.__InAppWebViewInitialData_baseUrl] = t46;
    }
    get androidHistoryUrl() {
      let t47;
      return dart.test(this[S.__InAppWebViewInitialData_androidHistoryUrl_isSet]) ? (t47 = this[S.__InAppWebViewInitialData_androidHistoryUrl], t47) : dart.throw(new _internal.LateError.fieldNI("androidHistoryUrl"));
    }
    set androidHistoryUrl(t47) {
      if (t47 == null) dart.nullFailed(I[52], 164, 12, "null");
      this[S.__InAppWebViewInitialData_androidHistoryUrl_isSet] = true;
      this[S.__InAppWebViewInitialData_androidHistoryUrl] = t47;
    }
    toMap() {
      return new (T.IdentityMapOfString$String()).from(["data", this.data, "mimeType", this.mimeType, "encoding", this.encoding, "baseUrl", dart.toString(this.baseUrl), "historyUrl", dart.toString(this.androidHistoryUrl)]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.InAppWebViewInitialData.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[52], 167, 22, "data");
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "text/html";
    if (mimeType == null) dart.nullFailed(I[52], 168, 12, "mimeType");
    let encoding = opts && 'encoding' in opts ? opts.encoding : "utf8";
    if (encoding == null) dart.nullFailed(I[52], 169, 12, "encoding");
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
    let androidHistoryUrl = opts && 'androidHistoryUrl' in opts ? opts.androidHistoryUrl : null;
    this[S.__InAppWebViewInitialData_baseUrl] = null;
    this[S.__InAppWebViewInitialData_baseUrl_isSet] = false;
    this[S.__InAppWebViewInitialData_androidHistoryUrl] = null;
    this[S.__InAppWebViewInitialData_androidHistoryUrl_isSet] = false;
    this[S.data$1] = data;
    this[S.mimeType] = mimeType;
    this[S.encoding] = encoding;
    this.baseUrl = baseUrl == null ? core.Uri.parse("about:blank") : baseUrl;
    this.androidHistoryUrl = androidHistoryUrl == null ? core.Uri.parse("about:blank") : androidHistoryUrl;
  }).prototype = types.InAppWebViewInitialData.prototype;
  dart.addTypeTests(types.InAppWebViewInitialData);
  dart.addTypeCaches(types.InAppWebViewInitialData);
  dart.setMethodSignature(types.InAppWebViewInitialData, () => ({
    __proto__: dart.getMethods(types.InAppWebViewInitialData.__proto__),
    toMap: dart.fnType(core.Map$(core.String, core.String), []),
    toJson: dart.fnType(core.Map$(core.String, core.String), [])
  }));
  dart.setGetterSignature(types.InAppWebViewInitialData, () => ({
    __proto__: dart.getGetters(types.InAppWebViewInitialData.__proto__),
    baseUrl: core.Uri,
    androidHistoryUrl: core.Uri
  }));
  dart.setSetterSignature(types.InAppWebViewInitialData, () => ({
    __proto__: dart.getSetters(types.InAppWebViewInitialData.__proto__),
    baseUrl: core.Uri,
    androidHistoryUrl: core.Uri
  }));
  dart.setLibraryUri(types.InAppWebViewInitialData, I[53]);
  dart.setFieldSignature(types.InAppWebViewInitialData, () => ({
    __proto__: dart.getFields(types.InAppWebViewInitialData.__proto__),
    data: dart.fieldType(core.String),
    mimeType: dart.fieldType(core.String),
    encoding: dart.fieldType(core.String),
    [S.__InAppWebViewInitialData_baseUrl]: dart.fieldType(dart.nullable(core.Uri)),
    [S.__InAppWebViewInitialData_baseUrl_isSet]: dart.fieldType(core.bool),
    [S.__InAppWebViewInitialData_androidHistoryUrl]: dart.fieldType(dart.nullable(core.Uri)),
    [S.__InAppWebViewInitialData_androidHistoryUrl_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(types.InAppWebViewInitialData, ['toString']);
  types.WebResourceRequest = class WebResourceRequest extends core.Object {
    get url() {
      return this[S.url$1];
    }
    set url(value) {
      this[S.url$1] = value;
    }
    get headers() {
      return this[S.headers];
    }
    set headers(value) {
      this[S.headers] = value;
    }
    get method() {
      return this[S.method];
    }
    set method(value) {
      this[S.method] = value;
    }
    get hasGesture() {
      return this[S.hasGesture];
    }
    set hasGesture(value) {
      this[S.hasGesture] = value;
    }
    get isForMainFrame() {
      return this[S.isForMainFrame];
    }
    set isForMainFrame(value) {
      this[S.isForMainFrame] = value;
    }
    get isRedirect() {
      return this[S.isRedirect];
    }
    set isRedirect(value) {
      this[S.isRedirect] = value;
    }
    static fromMap(map) {
      let t48;
      if (map == null) {
        return null;
      }
      return new types.WebResourceRequest.new({url: core.Uri.parse(core.String.as(map[S.$_get]("url"))), headers: T.MapNOfString$String().as((t48 = map[S.$_get]("headers"), t48 == null ? null : dart.dgsend(t48, [core.String, core.String], 'cast', []))), method: T.StringN().as(map[S.$_get]("method")), hasGesture: T.boolN().as(map[S.$_get]("hasGesture")), isForMainFrame: T.boolN().as(map[S.$_get]("isForMainFrame")), isRedirect: T.boolN().as(map[S.$_get]("isRedirect"))});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["url", dart.toString(this.url), "headers", this.headers, "method", this.method, "hasGesture", this.hasGesture, "isForMainFrame", this.isForMainFrame, "isRedirect", this.isRedirect]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebResourceRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    if (url == null) dart.nullFailed(I[52], 235, 22, "url");
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : null;
    let isForMainFrame = opts && 'isForMainFrame' in opts ? opts.isForMainFrame : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
    this[S.url$1] = url;
    this[S.headers] = headers;
    this[S.method] = method;
    this[S.hasGesture] = hasGesture;
    this[S.isForMainFrame] = isForMainFrame;
    this[S.isRedirect] = isRedirect;
    ;
  }).prototype = types.WebResourceRequest.prototype;
  dart.addTypeTests(types.WebResourceRequest);
  dart.addTypeCaches(types.WebResourceRequest);
  dart.setMethodSignature(types.WebResourceRequest, () => ({
    __proto__: dart.getMethods(types.WebResourceRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.WebResourceRequest, I[53]);
  dart.setFieldSignature(types.WebResourceRequest, () => ({
    __proto__: dart.getFields(types.WebResourceRequest.__proto__),
    url: dart.fieldType(core.Uri),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    method: dart.fieldType(dart.nullable(core.String)),
    hasGesture: dart.fieldType(dart.nullable(core.bool)),
    isForMainFrame: dart.fieldType(dart.nullable(core.bool)),
    isRedirect: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(types.WebResourceRequest, ['toString']);
  types.WebResourceResponse = class WebResourceResponse extends core.Object {
    get contentType() {
      return this[S.contentType];
    }
    set contentType(value) {
      this[S.contentType] = value;
    }
    get contentEncoding() {
      return this[S.contentEncoding];
    }
    set contentEncoding(value) {
      this[S.contentEncoding] = value;
    }
    get data() {
      return this[S.data$2];
    }
    set data(value) {
      this[S.data$2] = value;
    }
    get headers() {
      return this[S.headers$1];
    }
    set headers(value) {
      this[S.headers$1] = value;
    }
    get statusCode() {
      return this[S.statusCode];
    }
    set statusCode(value) {
      this[S.statusCode] = value;
    }
    get reasonPhrase() {
      return this[S.reasonPhrase];
    }
    set reasonPhrase(value) {
      this[S.reasonPhrase] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["contentType", this.contentType, "contentEncoding", this.contentEncoding, "data", this.data, "headers", this.headers, "statusCode", this.statusCode, "reasonPhrase", this.reasonPhrase]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebResourceResponse.new = function(opts) {
    let contentType = opts && 'contentType' in opts ? opts.contentType : "";
    if (contentType == null) dart.nullFailed(I[52], 309, 13, "contentType");
    let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : "utf-8";
    if (contentEncoding == null) dart.nullFailed(I[52], 310, 12, "contentEncoding");
    let data = opts && 'data' in opts ? opts.data : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[S.contentType] = contentType;
    this[S.contentEncoding] = contentEncoding;
    this[S.data$2] = data;
    this[S.headers$1] = headers;
    this[S.statusCode] = statusCode;
    this[S.reasonPhrase] = reasonPhrase;
    ;
  }).prototype = types.WebResourceResponse.prototype;
  dart.addTypeTests(types.WebResourceResponse);
  dart.addTypeCaches(types.WebResourceResponse);
  dart.setMethodSignature(types.WebResourceResponse, () => ({
    __proto__: dart.getMethods(types.WebResourceResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.WebResourceResponse, I[53]);
  dart.setFieldSignature(types.WebResourceResponse, () => ({
    __proto__: dart.getFields(types.WebResourceResponse.__proto__),
    contentType: dart.fieldType(core.String),
    contentEncoding: dart.fieldType(core.String),
    data: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    statusCode: dart.fieldType(dart.nullable(core.int)),
    reasonPhrase: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.WebResourceResponse, ['toString']);
  types.CustomSchemeResponse = class CustomSchemeResponse extends core.Object {
    get data() {
      return this[S.data$3];
    }
    set data(value) {
      this[S.data$3] = value;
    }
    get contentType() {
      return this[S.contentType$1];
    }
    set contentType(value) {
      this[S.contentType$1] = value;
    }
    get contentEncoding() {
      return this[S.contentEncoding$1];
    }
    set contentEncoding(value) {
      this[S.contentEncoding$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["contentType", this.contentType, "contentEncoding", this.contentEncoding, "data", this.data]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.CustomSchemeResponse.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[52], 350, 22, "data");
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    if (contentType == null) dart.nullFailed(I[52], 351, 21, "contentType");
    let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : "utf-8";
    if (contentEncoding == null) dart.nullFailed(I[52], 352, 12, "contentEncoding");
    this[S.data$3] = data;
    this[S.contentType$1] = contentType;
    this[S.contentEncoding$1] = contentEncoding;
    ;
  }).prototype = types.CustomSchemeResponse.prototype;
  dart.addTypeTests(types.CustomSchemeResponse);
  dart.addTypeCaches(types.CustomSchemeResponse);
  dart.setMethodSignature(types.CustomSchemeResponse, () => ({
    __proto__: dart.getMethods(types.CustomSchemeResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.CustomSchemeResponse, I[53]);
  dart.setFieldSignature(types.CustomSchemeResponse, () => ({
    __proto__: dart.getFields(types.CustomSchemeResponse.__proto__),
    data: dart.fieldType(typed_data.Uint8List),
    contentType: dart.fieldType(core.String),
    contentEncoding: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(types.CustomSchemeResponse, ['toString']);
  types.ConsoleMessage = class ConsoleMessage extends core.Object {
    get message() {
      return this[S.message$2];
    }
    set message(value) {
      this[S.message$2] = value;
    }
    get messageLevel() {
      return this[S.messageLevel];
    }
    set messageLevel(value) {
      this[S.messageLevel] = value;
    }
    static fromMap(map) {
      let t48;
      if (map == null) {
        return null;
      }
      return new types.ConsoleMessage.new({message: core.String.as(map[S.$_get]("message")), messageLevel: (t48 = types.ConsoleMessageLevel.fromValue(T.intN().as(map[S.$_get]("messageLevel"))), t48 == null ? types.ConsoleMessageLevel.LOG : t48)});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["message", this.message, "messageLevel", this.messageLevel.toValue()]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ConsoleMessage.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    if (message == null) dart.nullFailed(I[52], 381, 13, "message");
    let messageLevel = opts && 'messageLevel' in opts ? opts.messageLevel : C[62] || CT.C62;
    if (messageLevel == null) dart.nullFailed(I[52], 381, 32, "messageLevel");
    this[S.message$2] = message;
    this[S.messageLevel] = messageLevel;
    ;
  }).prototype = types.ConsoleMessage.prototype;
  dart.addTypeTests(types.ConsoleMessage);
  dart.addTypeCaches(types.ConsoleMessage);
  dart.setMethodSignature(types.ConsoleMessage, () => ({
    __proto__: dart.getMethods(types.ConsoleMessage.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.ConsoleMessage, I[53]);
  dart.setFieldSignature(types.ConsoleMessage, () => ({
    __proto__: dart.getFields(types.ConsoleMessage.__proto__),
    message: dart.fieldType(core.String),
    messageLevel: dart.fieldType(types.ConsoleMessageLevel)
  }));
  dart.defineExtensionMethods(types.ConsoleMessage, ['toString']);
  types.WebHistory = class WebHistory extends core.Object {
    get list() {
      return this[S.list];
    }
    set list(value) {
      this[S.list] = value;
    }
    get currentIndex() {
      return this[S.currentIndex];
    }
    set currentIndex(value) {
      this[S.currentIndex] = value;
    }
    static fromMap(map) {
      let t48;
      if (map == null) {
        return null;
      }
      let historyListMap = T.ListNOfLinkedHashMap().as((t48 = map[S.$_get]("history"), t48 == null ? null : dart.dgsend(t48, [collection.LinkedHashMap], 'cast', [])));
      let currentIndex = core.int.as(map[S.$_get]("currentIndex"));
      let historyList = T.JSArrayOfWebHistoryItem().of([]);
      if (historyListMap != null) {
        for (let i = 0; i < dart.notNull(historyListMap[S.$length]); i = i + 1) {
          let historyItem = historyListMap[S.$_get](i);
          historyList[S.$add](new types.WebHistoryItem.new({originalUrl: historyItem[S.$_get]("originalUrl") != null ? core.Uri.parse(core.String.as(historyItem[S.$_get]("originalUrl"))) : null, title: T.StringN().as(historyItem[S.$_get]("title")), url: historyItem[S.$_get]("url") != null ? core.Uri.parse(core.String.as(historyItem[S.$_get]("url"))) : null, index: i, offset: i - dart.notNull(currentIndex)}));
        }
      }
      return new types.WebHistory.new({list: historyList, currentIndex: currentIndex});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["list", this.list, "currentIndex", this.currentIndex]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebHistory.new = function(opts) {
    let list = opts && 'list' in opts ? opts.list : null;
    let currentIndex = opts && 'currentIndex' in opts ? opts.currentIndex : null;
    this[S.list] = list;
    this[S.currentIndex] = currentIndex;
    ;
  }).prototype = types.WebHistory.prototype;
  dart.addTypeTests(types.WebHistory);
  dart.addTypeCaches(types.WebHistory);
  dart.setMethodSignature(types.WebHistory, () => ({
    __proto__: dart.getMethods(types.WebHistory.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.WebHistory, I[53]);
  dart.setFieldSignature(types.WebHistory, () => ({
    __proto__: dart.getFields(types.WebHistory.__proto__),
    list: dart.fieldType(dart.nullable(core.List$(types.WebHistoryItem))),
    currentIndex: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(types.WebHistory, ['toString']);
  types.WebHistoryItem = class WebHistoryItem extends core.Object {
    get originalUrl() {
      return this[S.originalUrl];
    }
    set originalUrl(value) {
      this[S.originalUrl] = value;
    }
    get title() {
      return this[S.title];
    }
    set title(value) {
      this[S.title] = value;
    }
    get url() {
      return this[S$.url$2];
    }
    set url(value) {
      this[S$.url$2] = value;
    }
    get index() {
      return this[S$.index];
    }
    set index(value) {
      this[S$.index] = value;
    }
    get offset() {
      return this[S$.offset];
    }
    set offset(value) {
      this[S$.offset] = value;
    }
    toMap() {
      let t48, t48$;
      return new (T.IdentityMapOfString$dynamic()).from(["originalUrl", (t48 = this.originalUrl, t48 == null ? null : dart.toString(t48)), "title", this.title, "url", (t48$ = this.url, t48$ == null ? null : dart.toString(t48$)), "index", this.index, "offset", this.offset]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.WebHistoryItem.new = function(opts) {
    let originalUrl = opts && 'originalUrl' in opts ? opts.originalUrl : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[S.originalUrl] = originalUrl;
    this[S.title] = title;
    this[S$.url$2] = url;
    this[S$.index] = index;
    this[S$.offset] = offset;
    ;
  }).prototype = types.WebHistoryItem.prototype;
  dart.addTypeTests(types.WebHistoryItem);
  dart.addTypeCaches(types.WebHistoryItem);
  dart.setMethodSignature(types.WebHistoryItem, () => ({
    __proto__: dart.getMethods(types.WebHistoryItem.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.WebHistoryItem, I[53]);
  dart.setFieldSignature(types.WebHistoryItem, () => ({
    __proto__: dart.getFields(types.WebHistoryItem.__proto__),
    originalUrl: dart.fieldType(dart.nullable(core.Uri)),
    title: dart.fieldType(dart.nullable(core.String)),
    url: dart.fieldType(dart.nullable(core.Uri)),
    index: dart.fieldType(dart.nullable(core.int)),
    offset: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(types.WebHistoryItem, ['toString']);
  types.GeolocationPermissionShowPromptResponse = class GeolocationPermissionShowPromptResponse extends core.Object {
    get origin() {
      return this[S$.origin];
    }
    set origin(value) {
      this[S$.origin] = value;
    }
    get allow() {
      return this[S$.allow];
    }
    set allow(value) {
      this[S$.allow] = value;
    }
    get retain() {
      return this[S$.retain];
    }
    set retain(value) {
      this[S$.retain] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["origin", this.origin, "allow", this.allow, "retain", this.retain]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.GeolocationPermissionShowPromptResponse.new = function(opts) {
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let allow = opts && 'allow' in opts ? opts.allow : null;
    let retain = opts && 'retain' in opts ? opts.retain : null;
    this[S$.origin] = origin;
    this[S$.allow] = allow;
    this[S$.retain] = retain;
    ;
  }).prototype = types.GeolocationPermissionShowPromptResponse.prototype;
  dart.addTypeTests(types.GeolocationPermissionShowPromptResponse);
  dart.addTypeCaches(types.GeolocationPermissionShowPromptResponse);
  dart.setMethodSignature(types.GeolocationPermissionShowPromptResponse, () => ({
    __proto__: dart.getMethods(types.GeolocationPermissionShowPromptResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.GeolocationPermissionShowPromptResponse, I[53]);
  dart.setFieldSignature(types.GeolocationPermissionShowPromptResponse, () => ({
    __proto__: dart.getFields(types.GeolocationPermissionShowPromptResponse.__proto__),
    origin: dart.fieldType(dart.nullable(core.String)),
    allow: dart.fieldType(dart.nullable(core.bool)),
    retain: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(types.GeolocationPermissionShowPromptResponse, ['toString']);
  types.JsAlertRequest = class JsAlertRequest extends core.Object {
    get url() {
      return this[S$.url$3];
    }
    set url(value) {
      this[S$.url$3] = value;
    }
    get message() {
      return this[S$.message$3];
    }
    set message(value) {
      this[S$.message$3] = value;
    }
    get iosIsMainFrame() {
      return this[S$.iosIsMainFrame];
    }
    set iosIsMainFrame(value) {
      this[S$.iosIsMainFrame] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t48 = this.url, t48 == null ? null : dart.toString(t48)), "message", this.message, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.JsAlertRequest.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, message: T.StringN().as(map[S.$_get]("message")), iosIsMainFrame: T.boolN().as(map[S.$_get]("iosIsMainFrame"))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsAlertRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[S$.url$3] = url;
    this[S$.message$3] = message;
    this[S$.iosIsMainFrame] = iosIsMainFrame;
    ;
  }).prototype = types.JsAlertRequest.prototype;
  dart.addTypeTests(types.JsAlertRequest);
  dart.addTypeCaches(types.JsAlertRequest);
  dart.setMethodSignature(types.JsAlertRequest, () => ({
    __proto__: dart.getMethods(types.JsAlertRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsAlertRequest, I[53]);
  dart.setFieldSignature(types.JsAlertRequest, () => ({
    __proto__: dart.getFields(types.JsAlertRequest.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    message: dart.fieldType(dart.nullable(core.String)),
    iosIsMainFrame: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(types.JsAlertRequest, ['toString']);
  types.JsAlertResponseAction = class JsAlertResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$2];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.JsAlertResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 576, 46, "_value");
    this[S$._value$2] = _value;
    ;
  }).prototype = types.JsAlertResponseAction.prototype;
  dart.addTypeTests(types.JsAlertResponseAction);
  dart.addTypeCaches(types.JsAlertResponseAction);
  dart.setMethodSignature(types.JsAlertResponseAction, () => ({
    __proto__: dart.getMethods(types.JsAlertResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.JsAlertResponseAction, I[53]);
  dart.setFieldSignature(types.JsAlertResponseAction, () => ({
    __proto__: dart.getFields(types.JsAlertResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.JsAlertResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsAlertResponseAction, ['hashCode']);
  dart.defineLazy(types.JsAlertResponseAction, {
    /*types.JsAlertResponseAction.CONFIRM*/get CONFIRM() {
      return C[66] || CT.C66;
    }
  }, false);
  types.JsAlertResponse = class JsAlertResponse extends core.Object {
    get message() {
      return this[S$.message$4];
    }
    set message(value) {
      this[S$.message$4] = value;
    }
    get confirmButtonTitle() {
      return this[S$.confirmButtonTitle];
    }
    set confirmButtonTitle(value) {
      this[S$.confirmButtonTitle] = value;
    }
    get handledByClient() {
      return this[S$.handledByClient];
    }
    set handledByClient(value) {
      this[S$.handledByClient] = value;
    }
    get action() {
      return this[S$.action$2];
    }
    set action(value) {
      this[S$.action$2] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["message", this.message, "confirmButtonTitle", this.confirmButtonTitle, "handledByClient", this.handledByClient, "action", (t48 = this.action, t48 == null ? null : t48.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsAlertResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    if (message == null) dart.nullFailed(I[52], 603, 13, "message");
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    if (handledByClient == null) dart.nullFailed(I[52], 604, 12, "handledByClient");
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    if (confirmButtonTitle == null) dart.nullFailed(I[52], 605, 12, "confirmButtonTitle");
    let action = opts && 'action' in opts ? opts.action : C[66] || CT.C66;
    this[S$.message$4] = message;
    this[S$.handledByClient] = handledByClient;
    this[S$.confirmButtonTitle] = confirmButtonTitle;
    this[S$.action$2] = action;
    ;
  }).prototype = types.JsAlertResponse.prototype;
  dart.addTypeTests(types.JsAlertResponse);
  dart.addTypeCaches(types.JsAlertResponse);
  dart.setMethodSignature(types.JsAlertResponse, () => ({
    __proto__: dart.getMethods(types.JsAlertResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsAlertResponse, I[53]);
  dart.setFieldSignature(types.JsAlertResponse, () => ({
    __proto__: dart.getFields(types.JsAlertResponse.__proto__),
    message: dart.fieldType(core.String),
    confirmButtonTitle: dart.fieldType(core.String),
    handledByClient: dart.fieldType(core.bool),
    action: dart.fieldType(dart.nullable(types.JsAlertResponseAction))
  }));
  dart.defineExtensionMethods(types.JsAlertResponse, ['toString']);
  types.JsConfirmRequest = class JsConfirmRequest extends core.Object {
    get url() {
      return this[S$.url$4];
    }
    set url(value) {
      this[S$.url$4] = value;
    }
    get message() {
      return this[S$.message$5];
    }
    set message(value) {
      this[S$.message$5] = value;
    }
    get iosIsMainFrame() {
      return this[S$.iosIsMainFrame$1];
    }
    set iosIsMainFrame(value) {
      this[S$.iosIsMainFrame$1] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t48 = this.url, t48 == null ? null : dart.toString(t48)), "message", this.message, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.JsConfirmRequest.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, message: T.StringN().as(map[S.$_get]("message")), iosIsMainFrame: T.boolN().as(map[S.$_get]("iosIsMainFrame"))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsConfirmRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[S$.url$4] = url;
    this[S$.message$5] = message;
    this[S$.iosIsMainFrame$1] = iosIsMainFrame;
    ;
  }).prototype = types.JsConfirmRequest.prototype;
  dart.addTypeTests(types.JsConfirmRequest);
  dart.addTypeCaches(types.JsConfirmRequest);
  dart.setMethodSignature(types.JsConfirmRequest, () => ({
    __proto__: dart.getMethods(types.JsConfirmRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsConfirmRequest, I[53]);
  dart.setFieldSignature(types.JsConfirmRequest, () => ({
    __proto__: dart.getFields(types.JsConfirmRequest.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    message: dart.fieldType(dart.nullable(core.String)),
    iosIsMainFrame: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(types.JsConfirmRequest, ['toString']);
  types.JsConfirmResponseAction = class JsConfirmResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$3];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.JsConfirmResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 674, 48, "_value");
    this[S$._value$3] = _value;
    ;
  }).prototype = types.JsConfirmResponseAction.prototype;
  dart.addTypeTests(types.JsConfirmResponseAction);
  dart.addTypeCaches(types.JsConfirmResponseAction);
  dart.setMethodSignature(types.JsConfirmResponseAction, () => ({
    __proto__: dart.getMethods(types.JsConfirmResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.JsConfirmResponseAction, I[53]);
  dart.setFieldSignature(types.JsConfirmResponseAction, () => ({
    __proto__: dart.getFields(types.JsConfirmResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.JsConfirmResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsConfirmResponseAction, ['hashCode']);
  dart.defineLazy(types.JsConfirmResponseAction, {
    /*types.JsConfirmResponseAction.CONFIRM*/get CONFIRM() {
      return C[67] || CT.C67;
    },
    /*types.JsConfirmResponseAction.CANCEL*/get CANCEL() {
      return C[68] || CT.C68;
    }
  }, false);
  types.JsConfirmResponse = class JsConfirmResponse extends core.Object {
    get message() {
      return this[S$.message$6];
    }
    set message(value) {
      this[S$.message$6] = value;
    }
    get confirmButtonTitle() {
      return this[S$.confirmButtonTitle$1];
    }
    set confirmButtonTitle(value) {
      this[S$.confirmButtonTitle$1] = value;
    }
    get cancelButtonTitle() {
      return this[S$.cancelButtonTitle];
    }
    set cancelButtonTitle(value) {
      this[S$.cancelButtonTitle] = value;
    }
    get handledByClient() {
      return this[S$.handledByClient$1];
    }
    set handledByClient(value) {
      this[S$.handledByClient$1] = value;
    }
    get action() {
      return this[S$.action$3];
    }
    set action(value) {
      this[S$.action$3] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["message", this.message, "confirmButtonTitle", this.confirmButtonTitle, "cancelButtonTitle", this.cancelButtonTitle, "handledByClient", this.handledByClient, "action", (t48 = this.action, t48 == null ? null : t48.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsConfirmResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    if (message == null) dart.nullFailed(I[52], 705, 13, "message");
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    if (handledByClient == null) dart.nullFailed(I[52], 706, 12, "handledByClient");
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    if (confirmButtonTitle == null) dart.nullFailed(I[52], 707, 12, "confirmButtonTitle");
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : "";
    if (cancelButtonTitle == null) dart.nullFailed(I[52], 708, 12, "cancelButtonTitle");
    let action = opts && 'action' in opts ? opts.action : C[68] || CT.C68;
    this[S$.message$6] = message;
    this[S$.handledByClient$1] = handledByClient;
    this[S$.confirmButtonTitle$1] = confirmButtonTitle;
    this[S$.cancelButtonTitle] = cancelButtonTitle;
    this[S$.action$3] = action;
    ;
  }).prototype = types.JsConfirmResponse.prototype;
  dart.addTypeTests(types.JsConfirmResponse);
  dart.addTypeCaches(types.JsConfirmResponse);
  dart.setMethodSignature(types.JsConfirmResponse, () => ({
    __proto__: dart.getMethods(types.JsConfirmResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsConfirmResponse, I[53]);
  dart.setFieldSignature(types.JsConfirmResponse, () => ({
    __proto__: dart.getFields(types.JsConfirmResponse.__proto__),
    message: dart.fieldType(core.String),
    confirmButtonTitle: dart.fieldType(core.String),
    cancelButtonTitle: dart.fieldType(core.String),
    handledByClient: dart.fieldType(core.bool),
    action: dart.fieldType(dart.nullable(types.JsConfirmResponseAction))
  }));
  dart.defineExtensionMethods(types.JsConfirmResponse, ['toString']);
  types.JsPromptRequest = class JsPromptRequest extends core.Object {
    get url() {
      return this[S$.url$5];
    }
    set url(value) {
      this[S$.url$5] = value;
    }
    get message() {
      return this[S$.message$7];
    }
    set message(value) {
      this[S$.message$7] = value;
    }
    get defaultValue() {
      return this[S$.defaultValue];
    }
    set defaultValue(value) {
      this[S$.defaultValue] = value;
    }
    get iosIsMainFrame() {
      return this[S$.iosIsMainFrame$2];
    }
    set iosIsMainFrame(value) {
      this[S$.iosIsMainFrame$2] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t48 = this.url, t48 == null ? null : dart.toString(t48)), "message", this.message, "defaultValue", this.defaultValue, "iosIsMainFrame", this.iosIsMainFrame]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.JsPromptRequest.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, message: T.StringN().as(map[S.$_get]("message")), defaultValue: T.StringN().as(map[S.$_get]("defaultValue")), iosIsMainFrame: T.boolN().as(map[S.$_get]("iosIsMainFrame"))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsPromptRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let iosIsMainFrame = opts && 'iosIsMainFrame' in opts ? opts.iosIsMainFrame : null;
    this[S$.url$5] = url;
    this[S$.message$7] = message;
    this[S$.defaultValue] = defaultValue;
    this[S$.iosIsMainFrame$2] = iosIsMainFrame;
    ;
  }).prototype = types.JsPromptRequest.prototype;
  dart.addTypeTests(types.JsPromptRequest);
  dart.addTypeCaches(types.JsPromptRequest);
  dart.setMethodSignature(types.JsPromptRequest, () => ({
    __proto__: dart.getMethods(types.JsPromptRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsPromptRequest, I[53]);
  dart.setFieldSignature(types.JsPromptRequest, () => ({
    __proto__: dart.getFields(types.JsPromptRequest.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    message: dart.fieldType(dart.nullable(core.String)),
    defaultValue: dart.fieldType(dart.nullable(core.String)),
    iosIsMainFrame: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(types.JsPromptRequest, ['toString']);
  types.JsPromptResponseAction = class JsPromptResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$4];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.JsPromptResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 784, 47, "_value");
    this[S$._value$4] = _value;
    ;
  }).prototype = types.JsPromptResponseAction.prototype;
  dart.addTypeTests(types.JsPromptResponseAction);
  dart.addTypeCaches(types.JsPromptResponseAction);
  dart.setMethodSignature(types.JsPromptResponseAction, () => ({
    __proto__: dart.getMethods(types.JsPromptResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.JsPromptResponseAction, I[53]);
  dart.setFieldSignature(types.JsPromptResponseAction, () => ({
    __proto__: dart.getFields(types.JsPromptResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.JsPromptResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsPromptResponseAction, ['hashCode']);
  dart.defineLazy(types.JsPromptResponseAction, {
    /*types.JsPromptResponseAction.CONFIRM*/get CONFIRM() {
      return C[69] || CT.C69;
    },
    /*types.JsPromptResponseAction.CANCEL*/get CANCEL() {
      return C[70] || CT.C70;
    }
  }, false);
  types.JsPromptResponse = class JsPromptResponse extends core.Object {
    get message() {
      return this[S$.message$8];
    }
    set message(value) {
      this[S$.message$8] = value;
    }
    get defaultValue() {
      return this[S$.defaultValue$1];
    }
    set defaultValue(value) {
      this[S$.defaultValue$1] = value;
    }
    get confirmButtonTitle() {
      return this[S$.confirmButtonTitle$2];
    }
    set confirmButtonTitle(value) {
      this[S$.confirmButtonTitle$2] = value;
    }
    get cancelButtonTitle() {
      return this[S$.cancelButtonTitle$1];
    }
    set cancelButtonTitle(value) {
      this[S$.cancelButtonTitle$1] = value;
    }
    get handledByClient() {
      return this[S$.handledByClient$2];
    }
    set handledByClient(value) {
      this[S$.handledByClient$2] = value;
    }
    get value() {
      return this[S$.value$1];
    }
    set value(value) {
      this[S$.value$1] = value;
    }
    get action() {
      return this[S$.action$4];
    }
    set action(value) {
      this[S$.action$4] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["message", this.message, "defaultValue", this.defaultValue, "confirmButtonTitle", this.confirmButtonTitle, "cancelButtonTitle", this.cancelButtonTitle, "handledByClient", this.handledByClient, "value", this.value, "action", (t48 = this.action, t48 == null ? null : t48.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsPromptResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    if (message == null) dart.nullFailed(I[52], 821, 13, "message");
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : "";
    if (defaultValue == null) dart.nullFailed(I[52], 822, 12, "defaultValue");
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    if (handledByClient == null) dart.nullFailed(I[52], 823, 12, "handledByClient");
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    if (confirmButtonTitle == null) dart.nullFailed(I[52], 824, 12, "confirmButtonTitle");
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : "";
    if (cancelButtonTitle == null) dart.nullFailed(I[52], 825, 12, "cancelButtonTitle");
    let value = opts && 'value' in opts ? opts.value : null;
    let action = opts && 'action' in opts ? opts.action : C[70] || CT.C70;
    this[S$.message$8] = message;
    this[S$.defaultValue$1] = defaultValue;
    this[S$.handledByClient$2] = handledByClient;
    this[S$.confirmButtonTitle$2] = confirmButtonTitle;
    this[S$.cancelButtonTitle$1] = cancelButtonTitle;
    this[S$.value$1] = value;
    this[S$.action$4] = action;
    ;
  }).prototype = types.JsPromptResponse.prototype;
  dart.addTypeTests(types.JsPromptResponse);
  dart.addTypeCaches(types.JsPromptResponse);
  dart.setMethodSignature(types.JsPromptResponse, () => ({
    __proto__: dart.getMethods(types.JsPromptResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsPromptResponse, I[53]);
  dart.setFieldSignature(types.JsPromptResponse, () => ({
    __proto__: dart.getFields(types.JsPromptResponse.__proto__),
    message: dart.fieldType(core.String),
    defaultValue: dart.fieldType(core.String),
    confirmButtonTitle: dart.fieldType(core.String),
    cancelButtonTitle: dart.fieldType(core.String),
    handledByClient: dart.fieldType(core.bool),
    value: dart.fieldType(dart.nullable(core.String)),
    action: dart.fieldType(dart.nullable(types.JsPromptResponseAction))
  }));
  dart.defineExtensionMethods(types.JsPromptResponse, ['toString']);
  types.JsBeforeUnloadRequest = class JsBeforeUnloadRequest extends core.Object {
    get url() {
      return this[S$.url$6];
    }
    set url(value) {
      this[S$.url$6] = value;
    }
    get message() {
      return this[S$.message$9];
    }
    set message(value) {
      this[S$.message$9] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.JsBeforeUnloadRequest.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, message: T.StringN().as(map[S.$_get]("message"))});
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t48 = this.url, t48 == null ? null : dart.toString(t48)), "message", this.message]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsBeforeUnloadRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let message = opts && 'message' in opts ? opts.message : null;
    this[S$.url$6] = url;
    this[S$.message$9] = message;
    ;
  }).prototype = types.JsBeforeUnloadRequest.prototype;
  dart.addTypeTests(types.JsBeforeUnloadRequest);
  dart.addTypeCaches(types.JsBeforeUnloadRequest);
  dart.setMethodSignature(types.JsBeforeUnloadRequest, () => ({
    __proto__: dart.getMethods(types.JsBeforeUnloadRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsBeforeUnloadRequest, I[53]);
  dart.setFieldSignature(types.JsBeforeUnloadRequest, () => ({
    __proto__: dart.getFields(types.JsBeforeUnloadRequest.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    message: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.JsBeforeUnloadRequest, ['toString']);
  types.JsBeforeUnloadResponseAction = class JsBeforeUnloadResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$5];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.JsBeforeUnloadResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 889, 53, "_value");
    this[S$._value$5] = _value;
    ;
  }).prototype = types.JsBeforeUnloadResponseAction.prototype;
  dart.addTypeTests(types.JsBeforeUnloadResponseAction);
  dart.addTypeCaches(types.JsBeforeUnloadResponseAction);
  dart.setMethodSignature(types.JsBeforeUnloadResponseAction, () => ({
    __proto__: dart.getMethods(types.JsBeforeUnloadResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.JsBeforeUnloadResponseAction, I[53]);
  dart.setFieldSignature(types.JsBeforeUnloadResponseAction, () => ({
    __proto__: dart.getFields(types.JsBeforeUnloadResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.JsBeforeUnloadResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.JsBeforeUnloadResponseAction, ['hashCode']);
  dart.defineLazy(types.JsBeforeUnloadResponseAction, {
    /*types.JsBeforeUnloadResponseAction.CONFIRM*/get CONFIRM() {
      return C[71] || CT.C71;
    },
    /*types.JsBeforeUnloadResponseAction.CANCEL*/get CANCEL() {
      return C[72] || CT.C72;
    }
  }, false);
  types.JsBeforeUnloadResponse = class JsBeforeUnloadResponse extends core.Object {
    get message() {
      return this[S$.message$10];
    }
    set message(value) {
      this[S$.message$10] = value;
    }
    get confirmButtonTitle() {
      return this[S$.confirmButtonTitle$3];
    }
    set confirmButtonTitle(value) {
      this[S$.confirmButtonTitle$3] = value;
    }
    get cancelButtonTitle() {
      return this[S$.cancelButtonTitle$2];
    }
    set cancelButtonTitle(value) {
      this[S$.cancelButtonTitle$2] = value;
    }
    get handledByClient() {
      return this[S$.handledByClient$3];
    }
    set handledByClient(value) {
      this[S$.handledByClient$3] = value;
    }
    get action() {
      return this[S$.action$5];
    }
    set action(value) {
      this[S$.action$5] = value;
    }
    toMap() {
      let t48;
      return new (T.IdentityMapOfString$dynamic()).from(["message", this.message, "confirmButtonTitle", this.confirmButtonTitle, "cancelButtonTitle", this.cancelButtonTitle, "handledByClient", this.handledByClient, "action", (t48 = this.action, t48 == null ? null : t48.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.JsBeforeUnloadResponse.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : "";
    if (message == null) dart.nullFailed(I[52], 920, 13, "message");
    let handledByClient = opts && 'handledByClient' in opts ? opts.handledByClient : false;
    if (handledByClient == null) dart.nullFailed(I[52], 921, 12, "handledByClient");
    let confirmButtonTitle = opts && 'confirmButtonTitle' in opts ? opts.confirmButtonTitle : "";
    if (confirmButtonTitle == null) dart.nullFailed(I[52], 922, 12, "confirmButtonTitle");
    let cancelButtonTitle = opts && 'cancelButtonTitle' in opts ? opts.cancelButtonTitle : "";
    if (cancelButtonTitle == null) dart.nullFailed(I[52], 923, 12, "cancelButtonTitle");
    let action = opts && 'action' in opts ? opts.action : C[71] || CT.C71;
    this[S$.message$10] = message;
    this[S$.handledByClient$3] = handledByClient;
    this[S$.confirmButtonTitle$3] = confirmButtonTitle;
    this[S$.cancelButtonTitle$2] = cancelButtonTitle;
    this[S$.action$5] = action;
    ;
  }).prototype = types.JsBeforeUnloadResponse.prototype;
  dart.addTypeTests(types.JsBeforeUnloadResponse);
  dart.addTypeCaches(types.JsBeforeUnloadResponse);
  dart.setMethodSignature(types.JsBeforeUnloadResponse, () => ({
    __proto__: dart.getMethods(types.JsBeforeUnloadResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.JsBeforeUnloadResponse, I[53]);
  dart.setFieldSignature(types.JsBeforeUnloadResponse, () => ({
    __proto__: dart.getFields(types.JsBeforeUnloadResponse.__proto__),
    message: dart.fieldType(core.String),
    confirmButtonTitle: dart.fieldType(core.String),
    cancelButtonTitle: dart.fieldType(core.String),
    handledByClient: dart.fieldType(core.bool),
    action: dart.fieldType(dart.nullable(types.JsBeforeUnloadResponseAction))
  }));
  dart.defineExtensionMethods(types.JsBeforeUnloadResponse, ['toString']);
  types.SafeBrowsingThreat = class SafeBrowsingThreat extends core.Object {
    get [S._value$1]() {
      return this[S$._value$6];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.SafeBrowsingThreat.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 964, 26, "element");
            return element.toValue() == value;
          }, T.SafeBrowsingThreatTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "SAFE_BROWSING_THREAT_MALWARE";
        }
        case 2:
        {
          return "SAFE_BROWSING_THREAT_PHISHING";
        }
        case 3:
        {
          return "SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE";
        }
        case 4:
        {
          return "SAFE_BROWSING_THREAT_BILLING";
        }
        case 0:
        default:
        {
          return "SAFE_BROWSING_THREAT_UNKNOWN";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.SafeBrowsingThreat._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 950, 43, "_value");
    this[S$._value$6] = _value;
    ;
  }).prototype = types.SafeBrowsingThreat.prototype;
  dart.addTypeTests(types.SafeBrowsingThreat);
  dart.addTypeCaches(types.SafeBrowsingThreat);
  dart.setMethodSignature(types.SafeBrowsingThreat, () => ({
    __proto__: dart.getMethods(types.SafeBrowsingThreat.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.SafeBrowsingThreat, I[53]);
  dart.setFieldSignature(types.SafeBrowsingThreat, () => ({
    __proto__: dart.getFields(types.SafeBrowsingThreat.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.SafeBrowsingThreat, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.SafeBrowsingThreat, ['hashCode']);
  dart.defineLazy(types.SafeBrowsingThreat, {
    /*types.SafeBrowsingThreat.values*/get values() {
      return T.JSArrayOfSafeBrowsingThreat().of([types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNKNOWN, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_MALWARE, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_PHISHING, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE, types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_BILLING])[S.$toSet]();
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNKNOWN*/get SAFE_BROWSING_THREAT_UNKNOWN() {
      return C[73] || CT.C73;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_MALWARE*/get SAFE_BROWSING_THREAT_MALWARE() {
      return C[74] || CT.C74;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_PHISHING*/get SAFE_BROWSING_THREAT_PHISHING() {
      return C[75] || CT.C75;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE*/get SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE() {
      return C[76] || CT.C76;
    },
    /*types.SafeBrowsingThreat.SAFE_BROWSING_THREAT_BILLING*/get SAFE_BROWSING_THREAT_BILLING() {
      return C[77] || CT.C77;
    }
  }, false);
  types.SafeBrowsingResponseAction = class SafeBrowsingResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$7];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.SafeBrowsingResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1012, 51, "_value");
    this[S$._value$7] = _value;
    ;
  }).prototype = types.SafeBrowsingResponseAction.prototype;
  dart.addTypeTests(types.SafeBrowsingResponseAction);
  dart.addTypeCaches(types.SafeBrowsingResponseAction);
  dart.setMethodSignature(types.SafeBrowsingResponseAction, () => ({
    __proto__: dart.getMethods(types.SafeBrowsingResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.SafeBrowsingResponseAction, I[53]);
  dart.setFieldSignature(types.SafeBrowsingResponseAction, () => ({
    __proto__: dart.getFields(types.SafeBrowsingResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.SafeBrowsingResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.SafeBrowsingResponseAction, ['hashCode']);
  dart.defineLazy(types.SafeBrowsingResponseAction, {
    /*types.SafeBrowsingResponseAction.BACK_TO_SAFETY*/get BACK_TO_SAFETY() {
      return C[78] || CT.C78;
    },
    /*types.SafeBrowsingResponseAction.PROCEED*/get PROCEED() {
      return C[79] || CT.C79;
    },
    /*types.SafeBrowsingResponseAction.SHOW_INTERSTITIAL*/get SHOW_INTERSTITIAL() {
      return C[80] || CT.C80;
    }
  }, false);
  types.SafeBrowsingResponse = class SafeBrowsingResponse extends core.Object {
    get report() {
      return this[S$.report];
    }
    set report(value) {
      this[S$.report] = value;
    }
    get action() {
      return this[S$.action$6];
    }
    set action(value) {
      this[S$.action$6] = value;
    }
    toMap() {
      let t49;
      return new (T.IdentityMapOfString$dynamic()).from(["report", this.report, "action", (t49 = this.action, t49 == null ? null : t49.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SafeBrowsingResponse.new = function(opts) {
    let report = opts && 'report' in opts ? opts.report : true;
    if (report == null) dart.nullFailed(I[52], 1042, 13, "report");
    let action = opts && 'action' in opts ? opts.action : C[80] || CT.C80;
    this[S$.report] = report;
    this[S$.action$6] = action;
    ;
  }).prototype = types.SafeBrowsingResponse.prototype;
  dart.addTypeTests(types.SafeBrowsingResponse);
  dart.addTypeCaches(types.SafeBrowsingResponse);
  dart.setMethodSignature(types.SafeBrowsingResponse, () => ({
    __proto__: dart.getMethods(types.SafeBrowsingResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.SafeBrowsingResponse, I[53]);
  dart.setFieldSignature(types.SafeBrowsingResponse, () => ({
    __proto__: dart.getFields(types.SafeBrowsingResponse.__proto__),
    report: dart.fieldType(core.bool),
    action: dart.fieldType(dart.nullable(types.SafeBrowsingResponseAction))
  }));
  dart.defineExtensionMethods(types.SafeBrowsingResponse, ['toString']);
  types.HttpAuthResponseAction = class HttpAuthResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$8];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.HttpAuthResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1063, 47, "_value");
    this[S$._value$8] = _value;
    ;
  }).prototype = types.HttpAuthResponseAction.prototype;
  dart.addTypeTests(types.HttpAuthResponseAction);
  dart.addTypeCaches(types.HttpAuthResponseAction);
  dart.setMethodSignature(types.HttpAuthResponseAction, () => ({
    __proto__: dart.getMethods(types.HttpAuthResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.HttpAuthResponseAction, I[53]);
  dart.setFieldSignature(types.HttpAuthResponseAction, () => ({
    __proto__: dart.getFields(types.HttpAuthResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.HttpAuthResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.HttpAuthResponseAction, ['hashCode']);
  dart.defineLazy(types.HttpAuthResponseAction, {
    /*types.HttpAuthResponseAction.CANCEL*/get CANCEL() {
      return C[81] || CT.C81;
    },
    /*types.HttpAuthResponseAction.PROCEED*/get PROCEED() {
      return C[82] || CT.C82;
    },
    /*types.HttpAuthResponseAction.USE_SAVED_HTTP_AUTH_CREDENTIALS*/get USE_SAVED_HTTP_AUTH_CREDENTIALS() {
      return C[83] || CT.C83;
    }
  }, false);
  types.HttpAuthResponse = class HttpAuthResponse extends core.Object {
    get username() {
      return this[S$.username];
    }
    set username(value) {
      this[S$.username] = value;
    }
    get password() {
      return this[S$.password];
    }
    set password(value) {
      this[S$.password] = value;
    }
    get permanentPersistence() {
      return this[S$.permanentPersistence];
    }
    set permanentPersistence(value) {
      this[S$.permanentPersistence] = value;
    }
    get action() {
      return this[S$.action$7];
    }
    set action(value) {
      this[S$.action$7] = value;
    }
    toMap() {
      let t49;
      return new (T.IdentityMapOfString$dynamic()).from(["username", this.username, "password", this.password, "permanentPersistence", this.permanentPersistence, "action", (t49 = this.action, t49 == null ? null : t49.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.HttpAuthResponse.new = function(opts) {
    let username = opts && 'username' in opts ? opts.username : "";
    if (username == null) dart.nullFailed(I[52], 1098, 13, "username");
    let password = opts && 'password' in opts ? opts.password : "";
    if (password == null) dart.nullFailed(I[52], 1099, 12, "password");
    let permanentPersistence = opts && 'permanentPersistence' in opts ? opts.permanentPersistence : false;
    if (permanentPersistence == null) dart.nullFailed(I[52], 1100, 12, "permanentPersistence");
    let action = opts && 'action' in opts ? opts.action : C[81] || CT.C81;
    this[S$.username] = username;
    this[S$.password] = password;
    this[S$.permanentPersistence] = permanentPersistence;
    this[S$.action$7] = action;
    ;
  }).prototype = types.HttpAuthResponse.prototype;
  dart.addTypeTests(types.HttpAuthResponse);
  dart.addTypeCaches(types.HttpAuthResponse);
  dart.setMethodSignature(types.HttpAuthResponse, () => ({
    __proto__: dart.getMethods(types.HttpAuthResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.HttpAuthResponse, I[53]);
  dart.setFieldSignature(types.HttpAuthResponse, () => ({
    __proto__: dart.getFields(types.HttpAuthResponse.__proto__),
    username: dart.fieldType(core.String),
    password: dart.fieldType(core.String),
    permanentPersistence: dart.fieldType(core.bool),
    action: dart.fieldType(dart.nullable(types.HttpAuthResponseAction))
  }));
  dart.defineExtensionMethods(types.HttpAuthResponse, ['toString']);
  types.IOSURLCredentialPersistence = class IOSURLCredentialPersistence extends core.Object {
    get [S._value$1]() {
      return this[S$._value$9];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSURLCredentialPersistence.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 1139, 26, "element");
            return element.toValue() == value;
          }, T.IOSURLCredentialPersistenceTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "FOR_SESSION";
        }
        case 2:
        {
          return "PERMANENT";
        }
        case 3:
        {
          return "SYNCHRONIZABLE";
        }
        case 0:
        default:
        {
          return "NONE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSURLCredentialPersistence._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1126, 52, "_value");
    this[S$._value$9] = _value;
    ;
  }).prototype = types.IOSURLCredentialPersistence.prototype;
  dart.addTypeTests(types.IOSURLCredentialPersistence);
  dart.addTypeCaches(types.IOSURLCredentialPersistence);
  dart.setMethodSignature(types.IOSURLCredentialPersistence, () => ({
    __proto__: dart.getMethods(types.IOSURLCredentialPersistence.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSURLCredentialPersistence, I[53]);
  dart.setFieldSignature(types.IOSURLCredentialPersistence, () => ({
    __proto__: dart.getFields(types.IOSURLCredentialPersistence.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSURLCredentialPersistence, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSURLCredentialPersistence, ['hashCode']);
  dart.defineLazy(types.IOSURLCredentialPersistence, {
    /*types.IOSURLCredentialPersistence.values*/get values() {
      return T.JSArrayOfIOSURLCredentialPersistence().of([types.IOSURLCredentialPersistence.NONE, types.IOSURLCredentialPersistence.FOR_SESSION, types.IOSURLCredentialPersistence.PERMANENT, types.IOSURLCredentialPersistence.SYNCHRONIZABLE])[S.$toSet]();
    },
    /*types.IOSURLCredentialPersistence.NONE*/get NONE() {
      return C[84] || CT.C84;
    },
    /*types.IOSURLCredentialPersistence.FOR_SESSION*/get FOR_SESSION() {
      return C[85] || CT.C85;
    },
    /*types.IOSURLCredentialPersistence.PERMANENT*/get PERMANENT() {
      return C[86] || CT.C86;
    },
    /*types.IOSURLCredentialPersistence.SYNCHRONIZABLE*/get SYNCHRONIZABLE() {
      return C[87] || CT.C87;
    }
  }, false);
  types.URLCredential = class URLCredential extends core.Object {
    get username() {
      return this[S$.username$1];
    }
    set username(value) {
      this[S$.username$1] = value;
    }
    get password() {
      return this[S$.password$1];
    }
    set password(value) {
      this[S$.password$1] = value;
    }
    get iosCertificates() {
      return this[S$.iosCertificates];
    }
    set iosCertificates(value) {
      this[S$.iosCertificates] = value;
    }
    get iosPersistence() {
      return this[S$.iosPersistence];
    }
    set iosPersistence(value) {
      this[S$.iosPersistence] = value;
    }
    toMap() {
      let t50, t50$;
      return new (T.IdentityMapOfString$dynamic()).from(["username", this.username, "password", this.password, "iosCertificates", (t50 = this.iosCertificates, t50 == null ? null : t50[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
          if (e == null) dart.nullFailed(I[52], 1212, 48, "e");
          return e.toMap();
        }, T.X509CertificateToMapOfString$dynamic()))[S.$toList]()), "iosPersistence", (t50$ = this.iosPersistence, t50$ == null ? null : t50$.toValue())]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      let iosCertificates = null;
      if (map[S.$_get]("iosCertificates") != null) {
        iosCertificates = T.JSArrayOfX509Certificate().of([]);
        T.ListOfUint8List().as(dart.dgsend(map[S.$_get]("iosCertificates"), [typed_data.Uint8List], 'cast', []))[S.$forEach](dart.fn(data => {
          if (data == null) dart.nullFailed(I[52], 1226, 21, "data");
          try {
            dart.nullCheck(iosCertificates)[S.$add](x509_certificate.X509Certificate.fromData({data: data}));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let stacktrace = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              core.print(e);
              core.print(stacktrace);
            } else
              throw e$;
          }
        }, T.Uint8ListTovoid()));
      }
      return new types.URLCredential.new({username: T.StringN().as(map[S.$_get]("user")), password: T.StringN().as(map[S.$_get]("password")), iosCertificates: iosCertificates, iosPersistence: types.IOSURLCredentialPersistence.fromValue(T.intN().as(map[S.$_get]("iosPersistence")))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.URLCredential.new = function(opts) {
    let username = opts && 'username' in opts ? opts.username : null;
    let password = opts && 'password' in opts ? opts.password : null;
    let iosPersistence = opts && 'iosPersistence' in opts ? opts.iosPersistence : null;
    let iosCertificates = opts && 'iosCertificates' in opts ? opts.iosCertificates : null;
    this[S$.username$1] = username;
    this[S$.password$1] = password;
    this[S$.iosPersistence] = iosPersistence;
    this[S$.iosCertificates] = iosCertificates;
    ;
  }).prototype = types.URLCredential.prototype;
  dart.addTypeTests(types.URLCredential);
  dart.addTypeCaches(types.URLCredential);
  dart.setMethodSignature(types.URLCredential, () => ({
    __proto__: dart.getMethods(types.URLCredential.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.URLCredential, I[53]);
  dart.setFieldSignature(types.URLCredential, () => ({
    __proto__: dart.getFields(types.URLCredential.__proto__),
    username: dart.fieldType(dart.nullable(core.String)),
    password: dart.fieldType(dart.nullable(core.String)),
    iosCertificates: dart.fieldType(dart.nullable(core.List$(x509_certificate.X509Certificate))),
    iosPersistence: dart.fieldType(dart.nullable(types.IOSURLCredentialPersistence))
  }));
  dart.defineExtensionMethods(types.URLCredential, ['toString']);
  types.URLAuthenticationChallenge = class URLAuthenticationChallenge extends core.Object {
    get protectionSpace() {
      return this[S$.protectionSpace];
    }
    set protectionSpace(value) {
      this[S$.protectionSpace] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["protectionSpace", this.protectionSpace.toMap()]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.URLAuthenticationChallenge.new({protectionSpace: dart.nullCheck(types.URLProtectionSpace.fromMap(T.MapNOfString$dynamic().as(dart.dgsend(map[S.$_get]("protectionSpace"), [core.String, dart.dynamic], 'cast', []))))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.URLAuthenticationChallenge.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    if (protectionSpace == null) dart.nullFailed(I[52], 1262, 19, "protectionSpace");
    this[S$.protectionSpace] = protectionSpace;
    ;
  }).prototype = types.URLAuthenticationChallenge.prototype;
  dart.addTypeTests(types.URLAuthenticationChallenge);
  dart.addTypeCaches(types.URLAuthenticationChallenge);
  dart.setMethodSignature(types.URLAuthenticationChallenge, () => ({
    __proto__: dart.getMethods(types.URLAuthenticationChallenge.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.URLAuthenticationChallenge, I[53]);
  dart.setFieldSignature(types.URLAuthenticationChallenge, () => ({
    __proto__: dart.getFields(types.URLAuthenticationChallenge.__proto__),
    protectionSpace: dart.fieldType(types.URLProtectionSpace)
  }));
  dart.defineExtensionMethods(types.URLAuthenticationChallenge, ['toString']);
  types.HttpAuthenticationChallenge = class HttpAuthenticationChallenge extends types.URLAuthenticationChallenge {
    get previousFailureCount() {
      return this[S$.previousFailureCount];
    }
    set previousFailureCount(value) {
      this[S$.previousFailureCount] = value;
    }
    get proposedCredential() {
      return this[S$.proposedCredential];
    }
    set proposedCredential(value) {
      this[S$.proposedCredential] = value;
    }
    get iosFailureResponse() {
      return this[S$.iosFailureResponse];
    }
    set iosFailureResponse(value) {
      this[S$.iosFailureResponse] = value;
    }
    get iosError() {
      return this[S$.iosError];
    }
    set iosError(value) {
      this[S$.iosError] = value;
    }
    toMap() {
      let t51, t51$;
      let map = super.toMap();
      map[S.$addAll](new (T.IdentityMapOfString$dynamic()).from(["previousFailureCount", this.previousFailureCount, "protectionSpace", this.protectionSpace.toMap(), "proposedCredential", (t51 = this.proposedCredential, t51 == null ? null : t51.toMap()), "iosFailureResponse", (t51$ = this.iosFailureResponse, t51$ == null ? null : t51$.toMap()), "iosError", this.iosError]));
      return map;
    }
    static fromMap(map) {
      let t51, t51$;
      if (map == null) {
        return null;
      }
      return new types.HttpAuthenticationChallenge.new({previousFailureCount: core.int.as(map[S.$_get]("previousFailureCount")), protectionSpace: dart.nullCheck(types.URLProtectionSpace.fromMap(T.MapNOfString$dynamic().as(dart.dgsend(map[S.$_get]("protectionSpace"), [core.String, dart.dynamic], 'cast', [])))), proposedCredential: types.URLCredential.fromMap(T.MapNOfString$dynamic().as((t51 = map[S.$_get]("proposedCredential"), t51 == null ? null : dart.dgsend(t51, [core.String, dart.dynamic], 'cast', [])))), iosFailureResponse: types.IOSURLResponse.fromMap(T.MapNOfString$dynamic().as((t51$ = map[S.$_get]("iosFailureResponse"), t51$ == null ? null : dart.dgsend(t51$, [core.String, dart.dynamic], 'cast', [])))), iosError: T.StringN().as(map[S.$_get]("iosError"))});
    }
  };
  (types.HttpAuthenticationChallenge.new = function(opts) {
    let previousFailureCount = opts && 'previousFailureCount' in opts ? opts.previousFailureCount : null;
    if (previousFailureCount == null) dart.nullFailed(I[52], 1318, 19, "previousFailureCount");
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    if (protectionSpace == null) dart.nullFailed(I[52], 1319, 33, "protectionSpace");
    let iosFailureResponse = opts && 'iosFailureResponse' in opts ? opts.iosFailureResponse : null;
    let proposedCredential = opts && 'proposedCredential' in opts ? opts.proposedCredential : null;
    let iosError = opts && 'iosError' in opts ? opts.iosError : null;
    this[S$.previousFailureCount] = previousFailureCount;
    this[S$.iosFailureResponse] = iosFailureResponse;
    this[S$.proposedCredential] = proposedCredential;
    this[S$.iosError] = iosError;
    types.HttpAuthenticationChallenge.__proto__.new.call(this, {protectionSpace: protectionSpace});
    ;
  }).prototype = types.HttpAuthenticationChallenge.prototype;
  dart.addTypeTests(types.HttpAuthenticationChallenge);
  dart.addTypeCaches(types.HttpAuthenticationChallenge);
  dart.setLibraryUri(types.HttpAuthenticationChallenge, I[53]);
  dart.setFieldSignature(types.HttpAuthenticationChallenge, () => ({
    __proto__: dart.getFields(types.HttpAuthenticationChallenge.__proto__),
    previousFailureCount: dart.fieldType(core.int),
    proposedCredential: dart.fieldType(dart.nullable(types.URLCredential)),
    iosFailureResponse: dart.fieldType(dart.nullable(types.IOSURLResponse)),
    iosError: dart.fieldType(dart.nullable(core.String))
  }));
  types.ServerTrustChallenge = class ServerTrustChallenge extends types.URLAuthenticationChallenge {
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.ServerTrustChallenge.new({protectionSpace: dart.nullCheck(types.URLProtectionSpace.fromMap(T.MapNOfString$dynamic().as(dart.dgsend(map[S.$_get]("protectionSpace"), [core.String, dart.dynamic], 'cast', []))))});
    }
  };
  (types.ServerTrustChallenge.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    if (protectionSpace == null) dart.nullFailed(I[52], 1357, 53, "protectionSpace");
    types.ServerTrustChallenge.__proto__.new.call(this, {protectionSpace: protectionSpace});
    ;
  }).prototype = types.ServerTrustChallenge.prototype;
  dart.addTypeTests(types.ServerTrustChallenge);
  dart.addTypeCaches(types.ServerTrustChallenge);
  dart.setLibraryUri(types.ServerTrustChallenge, I[53]);
  types.ClientCertChallenge = class ClientCertChallenge extends types.URLAuthenticationChallenge {
    get androidPrincipals() {
      return this[S$.androidPrincipals];
    }
    set androidPrincipals(value) {
      this[S$.androidPrincipals] = value;
    }
    get androidKeyTypes() {
      return this[S$.androidKeyTypes];
    }
    set androidKeyTypes(value) {
      this[S$.androidKeyTypes] = value;
    }
    static fromMap(map) {
      let t51, t51$;
      if (map == null) {
        return null;
      }
      return new types.ClientCertChallenge.new({protectionSpace: dart.nullCheck(types.URLProtectionSpace.fromMap(T.MapNOfString$dynamic().as(dart.dgsend(map[S.$_get]("protectionSpace"), [core.String, dart.dynamic], 'cast', [])))), androidPrincipals: T.ListNOfString().as((t51 = map[S.$_get]("androidPrincipals"), t51 == null ? null : dart.dgsend(t51, [core.String], 'cast', []))), androidKeyTypes: T.ListNOfString().as((t51$ = map[S.$_get]("androidKeyTypes"), t51$ == null ? null : dart.dgsend(t51$, [core.String], 'cast', [])))});
    }
  };
  (types.ClientCertChallenge.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    if (protectionSpace == null) dart.nullFailed(I[52], 1385, 36, "protectionSpace");
    let androidPrincipals = opts && 'androidPrincipals' in opts ? opts.androidPrincipals : null;
    let androidKeyTypes = opts && 'androidKeyTypes' in opts ? opts.androidKeyTypes : null;
    this[S$.androidPrincipals] = androidPrincipals;
    this[S$.androidKeyTypes] = androidKeyTypes;
    types.ClientCertChallenge.__proto__.new.call(this, {protectionSpace: protectionSpace});
    ;
  }).prototype = types.ClientCertChallenge.prototype;
  dart.addTypeTests(types.ClientCertChallenge);
  dart.addTypeCaches(types.ClientCertChallenge);
  dart.setLibraryUri(types.ClientCertChallenge, I[53]);
  dart.setFieldSignature(types.ClientCertChallenge, () => ({
    __proto__: dart.getFields(types.ClientCertChallenge.__proto__),
    androidPrincipals: dart.fieldType(dart.nullable(core.List$(core.String))),
    androidKeyTypes: dart.fieldType(dart.nullable(core.List$(core.String)))
  }));
  types.IOSNSURLProtectionSpaceProxyType = class IOSNSURLProtectionSpaceProxyType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$10];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSNSURLProtectionSpaceProxyType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 1419, 26, "element");
            return element.toValue() == value;
          }, T.IOSNSURLProtectionSpaceProxyTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSNSURLProtectionSpaceProxyType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1406, 57, "_value");
    this[S$._value$10] = _value;
    ;
  }).prototype = types.IOSNSURLProtectionSpaceProxyType.prototype;
  dart.addTypeTests(types.IOSNSURLProtectionSpaceProxyType);
  dart.addTypeCaches(types.IOSNSURLProtectionSpaceProxyType);
  dart.setMethodSignature(types.IOSNSURLProtectionSpaceProxyType, () => ({
    __proto__: dart.getMethods(types.IOSNSURLProtectionSpaceProxyType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.IOSNSURLProtectionSpaceProxyType, I[53]);
  dart.setFieldSignature(types.IOSNSURLProtectionSpaceProxyType, () => ({
    __proto__: dart.getFields(types.IOSNSURLProtectionSpaceProxyType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSNSURLProtectionSpaceProxyType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSNSURLProtectionSpaceProxyType, ['hashCode']);
  dart.defineLazy(types.IOSNSURLProtectionSpaceProxyType, {
    /*types.IOSNSURLProtectionSpaceProxyType.values*/get values() {
      return T.JSArrayOfIOSNSURLProtectionSpaceProxyType().of([types.IOSNSURLProtectionSpaceProxyType.NSUR_PROTECTION_SPACE_HTTP_PROXY, types.IOSNSURLProtectionSpaceProxyType.NSURL_PROTECTION_SPACE_HTTPS_PROXY, types.IOSNSURLProtectionSpaceProxyType.NSURL_PROTECTION_SPACE_FTP_PROXY, types.IOSNSURLProtectionSpaceProxyType.NSURL_PROTECTION_SPACE_SOCKS_PROXY])[S.$toSet]();
    },
    /*types.IOSNSURLProtectionSpaceProxyType.NSUR_PROTECTION_SPACE_HTTP_PROXY*/get NSUR_PROTECTION_SPACE_HTTP_PROXY() {
      return C[88] || CT.C88;
    },
    /*types.IOSNSURLProtectionSpaceProxyType.NSURL_PROTECTION_SPACE_HTTPS_PROXY*/get NSURL_PROTECTION_SPACE_HTTPS_PROXY() {
      return C[89] || CT.C89;
    },
    /*types.IOSNSURLProtectionSpaceProxyType.NSURL_PROTECTION_SPACE_FTP_PROXY*/get NSURL_PROTECTION_SPACE_FTP_PROXY() {
      return C[90] || CT.C90;
    },
    /*types.IOSNSURLProtectionSpaceProxyType.NSURL_PROTECTION_SPACE_SOCKS_PROXY*/get NSURL_PROTECTION_SPACE_SOCKS_PROXY() {
      return C[91] || CT.C91;
    }
  }, false);
  types.IOSNSURLProtectionSpaceAuthenticationMethod = class IOSNSURLProtectionSpaceAuthenticationMethod extends core.Object {
    get [S._value$1]() {
      return this[S$._value$11];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSNSURLProtectionSpaceAuthenticationMethod.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 1479, 26, "element");
            return element.toValue() == value;
          }, T.IOSNSURLProtectionSpaceAuthenticationMethodTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSNSURLProtectionSpaceAuthenticationMethod._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1462, 68, "_value");
    this[S$._value$11] = _value;
    ;
  }).prototype = types.IOSNSURLProtectionSpaceAuthenticationMethod.prototype;
  dart.addTypeTests(types.IOSNSURLProtectionSpaceAuthenticationMethod);
  dart.addTypeCaches(types.IOSNSURLProtectionSpaceAuthenticationMethod);
  dart.setMethodSignature(types.IOSNSURLProtectionSpaceAuthenticationMethod, () => ({
    __proto__: dart.getMethods(types.IOSNSURLProtectionSpaceAuthenticationMethod.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.IOSNSURLProtectionSpaceAuthenticationMethod, I[53]);
  dart.setFieldSignature(types.IOSNSURLProtectionSpaceAuthenticationMethod, () => ({
    __proto__: dart.getFields(types.IOSNSURLProtectionSpaceAuthenticationMethod.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSNSURLProtectionSpaceAuthenticationMethod, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSNSURLProtectionSpaceAuthenticationMethod, ['hashCode']);
  dart.defineLazy(types.IOSNSURLProtectionSpaceAuthenticationMethod, {
    /*types.IOSNSURLProtectionSpaceAuthenticationMethod.values*/get values() {
      return T.JSArrayOfIOSNSURLProtectionSpaceAuthenticationMethod().of([types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_CLIENT_CERTIFICATE, types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_NEGOTIATE, types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_NTLM, types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_SERVER_TRUST])[S.$toSet]();
    },
    /*types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_CLIENT_CERTIFICATE*/get NSURL_AUTHENTICATION_METHOD_CLIENT_CERTIFICATE() {
      return C[92] || CT.C92;
    },
    /*types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_NEGOTIATE*/get NSURL_AUTHENTICATION_METHOD_NEGOTIATE() {
      return C[93] || CT.C93;
    },
    /*types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_NTLM*/get NSURL_AUTHENTICATION_METHOD_NTLM() {
      return C[94] || CT.C94;
    },
    /*types.IOSNSURLProtectionSpaceAuthenticationMethod.NSURL_AUTHENTICATION_METHOD_SERVER_TRUST*/get NSURL_AUTHENTICATION_METHOD_SERVER_TRUST() {
      return C[95] || CT.C95;
    }
  }, false);
  types.SslError = class SslError extends core.Object {
    get androidError() {
      return this[S$.androidError];
    }
    set androidError(value) {
      this[S$.androidError] = value;
    }
    get iosError() {
      return this[S$.iosError$1];
    }
    set iosError(value) {
      this[S$.iosError$1] = value;
    }
    get message() {
      return this[S$.message$11];
    }
    set message(value) {
      this[S$.message$11] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.SslError.new({androidError: types.AndroidSslError.fromValue(T.intN().as(map[S.$_get]("androidError"))), iosError: types.IOSSslError.fromValue(T.intN().as(map[S.$_get]("iosError"))), message: T.StringN().as(map[S.$_get]("message"))});
    }
    toMap() {
      let t53, t53$;
      return new (T.IdentityMapOfString$dynamic()).from(["androidError", (t53 = this.androidError, t53 == null ? null : t53.toValue()), "iosError", (t53$ = this.iosError, t53$ == null ? null : t53$.toValue()), "message", this.message]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SslError.new = function(opts) {
    let androidError = opts && 'androidError' in opts ? opts.androidError : null;
    let iosError = opts && 'iosError' in opts ? opts.iosError : null;
    let message = opts && 'message' in opts ? opts.message : null;
    this[S$.androidError] = androidError;
    this[S$.iosError$1] = iosError;
    this[S$.message$11] = message;
    ;
  }).prototype = types.SslError.prototype;
  dart.addTypeTests(types.SslError);
  dart.addTypeCaches(types.SslError);
  dart.setMethodSignature(types.SslError, () => ({
    __proto__: dart.getMethods(types.SslError.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.SslError, I[53]);
  dart.setFieldSignature(types.SslError, () => ({
    __proto__: dart.getFields(types.SslError.__proto__),
    androidError: dart.fieldType(dart.nullable(types.AndroidSslError)),
    iosError: dart.fieldType(dart.nullable(types.IOSSslError)),
    message: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.SslError, ['toString']);
  types.URLProtectionSpace = class URLProtectionSpace extends core.Object {
    get host() {
      return this[S$.host];
    }
    set host(value) {
      this[S$.host] = value;
    }
    get protocol() {
      return this[S$.protocol];
    }
    set protocol(value) {
      this[S$.protocol] = value;
    }
    get realm() {
      return this[S$.realm];
    }
    set realm(value) {
      this[S$.realm] = value;
    }
    get port() {
      return this[S$.port];
    }
    set port(value) {
      this[S$.port] = value;
    }
    get sslCertificate() {
      return this[S$.sslCertificate];
    }
    set sslCertificate(value) {
      this[S$.sslCertificate] = value;
    }
    get sslError() {
      return this[S$.sslError];
    }
    set sslError(value) {
      this[S$.sslError] = value;
    }
    get iosAuthenticationMethod() {
      return this[S$.iosAuthenticationMethod];
    }
    set iosAuthenticationMethod(value) {
      this[S$.iosAuthenticationMethod] = value;
    }
    get iosDistinguishedNames() {
      return this[S$.iosDistinguishedNames];
    }
    set iosDistinguishedNames(value) {
      this[S$.iosDistinguishedNames] = value;
    }
    get iosReceivesCredentialSecurely() {
      return this[S$.iosReceivesCredentialSecurely];
    }
    set iosReceivesCredentialSecurely(value) {
      this[S$.iosReceivesCredentialSecurely] = value;
    }
    get iosIsProxy() {
      return this[S$.iosIsProxy];
    }
    set iosIsProxy(value) {
      this[S$.iosIsProxy] = value;
    }
    get iosProxyType() {
      return this[S$.iosProxyType];
    }
    set iosProxyType(value) {
      this[S$.iosProxyType] = value;
    }
    static fromMap(map) {
      let t54, t54$;
      if (map == null) {
        return null;
      }
      let iosDistinguishedNames = null;
      if (map[S.$_get]("iosDistinguishedNames") != null) {
        iosDistinguishedNames = T.JSArrayOfX509Certificate().of([]);
        T.ListOfUint8List().as(dart.dgsend(map[S.$_get]("iosDistinguishedNames"), [typed_data.Uint8List], 'cast', []))[S.$forEach](dart.fn(data => {
          if (data == null) dart.nullFailed(I[52], 1632, 21, "data");
          try {
            dart.nullCheck(iosDistinguishedNames)[S.$add](x509_certificate.X509Certificate.fromData({data: data}));
          } catch (e$) {
            let e = dart.getThrown(e$);
            let stacktrace = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              core.print(e);
              core.print(stacktrace);
            } else
              throw e$;
          }
        }, T.Uint8ListTovoid()));
      }
      return new types.URLProtectionSpace.new({host: core.String.as(map[S.$_get]("host")), protocol: T.StringN().as(map[S.$_get]("protocol")), realm: T.StringN().as(map[S.$_get]("realm")), port: T.intN().as(map[S.$_get]("port")), sslCertificate: types.SslCertificate.fromMap(T.MapNOfString$dynamic().as((t54 = map[S.$_get]("sslCertificate"), t54 == null ? null : dart.dgsend(t54, [core.String, dart.dynamic], 'cast', [])))), sslError: types.SslError.fromMap(T.MapNOfString$dynamic().as((t54$ = map[S.$_get]("sslError"), t54$ == null ? null : dart.dgsend(t54$, [core.String, dart.dynamic], 'cast', [])))), iosAuthenticationMethod: types.IOSNSURLProtectionSpaceAuthenticationMethod.fromValue(T.StringN().as(map[S.$_get]("iosAuthenticationMethod"))), iosDistinguishedNames: iosDistinguishedNames, iosReceivesCredentialSecurely: T.boolN().as(map[S.$_get]("iosReceivesCredentialSecurely")), iosIsProxy: T.boolN().as(map[S.$_get]("iosIsProxy")), iosProxyType: types.IOSNSURLProtectionSpaceProxyType.fromValue(T.StringN().as(map[S.$_get]("iosProxyType")))});
    }
    toMap() {
      let t54, t54$, t54$0, t54$1;
      return new (T.IdentityMapOfString$dynamic()).from(["host", this.host, "protocol", this.protocol, "realm", this.realm, "port", this.port, "sslCertificate", (t54 = this.sslCertificate, t54 == null ? null : t54.toMap()), "sslError", (t54$ = this.sslError, t54$ == null ? null : t54$.toMap()), "iosAuthenticationMethod", this.iosAuthenticationMethod, "iosDistinguishedNames", (t54$0 = this.iosDistinguishedNames, t54$0 == null ? null : t54$0[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
          if (e == null) dart.nullFailed(I[52], 1671, 39, "e");
          return e.toMap();
        }, T.X509CertificateToMapOfString$dynamic()))[S.$toList]()), "iosReceivesCredentialSecurely", this.iosReceivesCredentialSecurely, "iosIsProxy", this.iosIsProxy, "iosProxyType", (t54$1 = this.iosProxyType, t54$1 == null ? null : t54$1.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.URLProtectionSpace.new = function(opts) {
    let host = opts && 'host' in opts ? opts.host : null;
    if (host == null) dart.nullFailed(I[52], 1612, 22, "host");
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let realm = opts && 'realm' in opts ? opts.realm : null;
    let port = opts && 'port' in opts ? opts.port : null;
    let sslCertificate = opts && 'sslCertificate' in opts ? opts.sslCertificate : null;
    let sslError = opts && 'sslError' in opts ? opts.sslError : null;
    let iosAuthenticationMethod = opts && 'iosAuthenticationMethod' in opts ? opts.iosAuthenticationMethod : null;
    let iosDistinguishedNames = opts && 'iosDistinguishedNames' in opts ? opts.iosDistinguishedNames : null;
    let iosReceivesCredentialSecurely = opts && 'iosReceivesCredentialSecurely' in opts ? opts.iosReceivesCredentialSecurely : null;
    let iosIsProxy = opts && 'iosIsProxy' in opts ? opts.iosIsProxy : null;
    let iosProxyType = opts && 'iosProxyType' in opts ? opts.iosProxyType : null;
    this[S$.host] = host;
    this[S$.protocol] = protocol;
    this[S$.realm] = realm;
    this[S$.port] = port;
    this[S$.sslCertificate] = sslCertificate;
    this[S$.sslError] = sslError;
    this[S$.iosAuthenticationMethod] = iosAuthenticationMethod;
    this[S$.iosDistinguishedNames] = iosDistinguishedNames;
    this[S$.iosReceivesCredentialSecurely] = iosReceivesCredentialSecurely;
    this[S$.iosIsProxy] = iosIsProxy;
    this[S$.iosProxyType] = iosProxyType;
    ;
  }).prototype = types.URLProtectionSpace.prototype;
  dart.addTypeTests(types.URLProtectionSpace);
  dart.addTypeCaches(types.URLProtectionSpace);
  dart.setMethodSignature(types.URLProtectionSpace, () => ({
    __proto__: dart.getMethods(types.URLProtectionSpace.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.URLProtectionSpace, I[53]);
  dart.setFieldSignature(types.URLProtectionSpace, () => ({
    __proto__: dart.getFields(types.URLProtectionSpace.__proto__),
    host: dart.fieldType(core.String),
    protocol: dart.fieldType(dart.nullable(core.String)),
    realm: dart.fieldType(dart.nullable(core.String)),
    port: dart.fieldType(dart.nullable(core.int)),
    sslCertificate: dart.fieldType(dart.nullable(types.SslCertificate)),
    sslError: dart.fieldType(dart.nullable(types.SslError)),
    iosAuthenticationMethod: dart.fieldType(dart.nullable(types.IOSNSURLProtectionSpaceAuthenticationMethod)),
    iosDistinguishedNames: dart.fieldType(dart.nullable(core.List$(x509_certificate.X509Certificate))),
    iosReceivesCredentialSecurely: dart.fieldType(dart.nullable(core.bool)),
    iosIsProxy: dart.fieldType(dart.nullable(core.bool)),
    iosProxyType: dart.fieldType(dart.nullable(types.IOSNSURLProtectionSpaceProxyType))
  }));
  dart.defineExtensionMethods(types.URLProtectionSpace, ['toString']);
  types.URLProtectionSpaceHttpAuthCredentials = class URLProtectionSpaceHttpAuthCredentials extends core.Object {
    get protectionSpace() {
      return this[S$.protectionSpace$1];
    }
    set protectionSpace(value) {
      this[S$.protectionSpace$1] = value;
    }
    get credentials() {
      return this[S$.credentials];
    }
    set credentials(value) {
      this[S$.credentials] = value;
    }
    static fromMap(map) {
      let t54;
      if (map == null) {
        return null;
      }
      let credentials = null;
      if (map[S.$_get]("credentials") != null) {
        credentials = T.JSArrayOfURLCredential().of([]);
        T.ListOfMapOfString$dynamic().as(dart.dgsend(map[S.$_get]("credentials"), [T.MapOfString$dynamic()], 'cast', []))[S.$forEach](dart.fn(element => {
          if (element == null) dart.nullFailed(I[52], 1711, 21, "element");
          let credential = types.URLCredential.fromMap(element);
          if (credential != null) {
            dart.nullCheck(credentials)[S.$add](credential);
          }
        }, T.MapOfString$dynamicTovoid()));
      }
      return new types.URLProtectionSpaceHttpAuthCredentials.new({protectionSpace: map[S.$_get]("protectionSpace") != null ? types.URLProtectionSpace.fromMap(T.MapNOfString$dynamic().as((t54 = map[S.$_get]("protectionSpace"), t54 == null ? null : dart.dgsend(t54, [core.String, dart.dynamic], 'cast', [])))) : null, credentials: credentials});
    }
    toMap() {
      let t54;
      return new (T.IdentityMapOfString$dynamic()).from(["protectionSpace", (t54 = this.protectionSpace, t54 == null ? null : t54.toMap()), "credentials", this.credentials != null ? dart.nullCheck(this.credentials)[S.$map](T.MapOfString$dynamic(), dart.fn(credential => {
          if (credential == null) dart.nullFailed(I[52], 1732, 31, "credential");
          return credential.toMap();
        }, T.URLCredentialToMapOfString$dynamic()))[S.$toList]() : null]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.URLProtectionSpaceHttpAuthCredentials.new = function(opts) {
    let protectionSpace = opts && 'protectionSpace' in opts ? opts.protectionSpace : null;
    let credentials = opts && 'credentials' in opts ? opts.credentials : null;
    this[S$.protectionSpace$1] = protectionSpace;
    this[S$.credentials] = credentials;
    ;
  }).prototype = types.URLProtectionSpaceHttpAuthCredentials.prototype;
  dart.addTypeTests(types.URLProtectionSpaceHttpAuthCredentials);
  dart.addTypeCaches(types.URLProtectionSpaceHttpAuthCredentials);
  dart.setMethodSignature(types.URLProtectionSpaceHttpAuthCredentials, () => ({
    __proto__: dart.getMethods(types.URLProtectionSpaceHttpAuthCredentials.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.URLProtectionSpaceHttpAuthCredentials, I[53]);
  dart.setFieldSignature(types.URLProtectionSpaceHttpAuthCredentials, () => ({
    __proto__: dart.getFields(types.URLProtectionSpaceHttpAuthCredentials.__proto__),
    protectionSpace: dart.fieldType(dart.nullable(types.URLProtectionSpace)),
    credentials: dart.fieldType(dart.nullable(core.List$(types.URLCredential)))
  }));
  dart.defineExtensionMethods(types.URLProtectionSpaceHttpAuthCredentials, ['toString']);
  types.ServerTrustAuthResponseAction = class ServerTrustAuthResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$12];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ServerTrustAuthResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1751, 54, "_value");
    this[S$._value$12] = _value;
    ;
  }).prototype = types.ServerTrustAuthResponseAction.prototype;
  dart.addTypeTests(types.ServerTrustAuthResponseAction);
  dart.addTypeCaches(types.ServerTrustAuthResponseAction);
  dart.setMethodSignature(types.ServerTrustAuthResponseAction, () => ({
    __proto__: dart.getMethods(types.ServerTrustAuthResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.ServerTrustAuthResponseAction, I[53]);
  dart.setFieldSignature(types.ServerTrustAuthResponseAction, () => ({
    __proto__: dart.getFields(types.ServerTrustAuthResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.ServerTrustAuthResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.ServerTrustAuthResponseAction, ['hashCode']);
  dart.defineLazy(types.ServerTrustAuthResponseAction, {
    /*types.ServerTrustAuthResponseAction.CANCEL*/get CANCEL() {
      return C[96] || CT.C96;
    },
    /*types.ServerTrustAuthResponseAction.PROCEED*/get PROCEED() {
      return C[97] || CT.C97;
    }
  }, false);
  types.ServerTrustAuthResponse = class ServerTrustAuthResponse extends core.Object {
    get action() {
      return this[S$.action$8];
    }
    set action(value) {
      this[S$.action$8] = value;
    }
    toMap() {
      let t54;
      return new (T.IdentityMapOfString$dynamic()).from(["action", (t54 = this.action, t54 == null ? null : t54.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ServerTrustAuthResponse.new = function(opts) {
    let action = opts && 'action' in opts ? opts.action : C[96] || CT.C96;
    this[S$.action$8] = action;
    ;
  }).prototype = types.ServerTrustAuthResponse.prototype;
  dart.addTypeTests(types.ServerTrustAuthResponse);
  dart.addTypeCaches(types.ServerTrustAuthResponse);
  dart.setMethodSignature(types.ServerTrustAuthResponse, () => ({
    __proto__: dart.getMethods(types.ServerTrustAuthResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.ServerTrustAuthResponse, I[53]);
  dart.setFieldSignature(types.ServerTrustAuthResponse, () => ({
    __proto__: dart.getFields(types.ServerTrustAuthResponse.__proto__),
    action: dart.fieldType(dart.nullable(types.ServerTrustAuthResponseAction))
  }));
  dart.defineExtensionMethods(types.ServerTrustAuthResponse, ['toString']);
  types.ClientCertResponseAction = class ClientCertResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$13];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ClientCertResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1792, 49, "_value");
    this[S$._value$13] = _value;
    ;
  }).prototype = types.ClientCertResponseAction.prototype;
  dart.addTypeTests(types.ClientCertResponseAction);
  dart.addTypeCaches(types.ClientCertResponseAction);
  dart.setMethodSignature(types.ClientCertResponseAction, () => ({
    __proto__: dart.getMethods(types.ClientCertResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.ClientCertResponseAction, I[53]);
  dart.setFieldSignature(types.ClientCertResponseAction, () => ({
    __proto__: dart.getFields(types.ClientCertResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.ClientCertResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.ClientCertResponseAction, ['hashCode']);
  dart.defineLazy(types.ClientCertResponseAction, {
    /*types.ClientCertResponseAction.CANCEL*/get CANCEL() {
      return C[98] || CT.C98;
    },
    /*types.ClientCertResponseAction.PROCEED*/get PROCEED() {
      return C[99] || CT.C99;
    },
    /*types.ClientCertResponseAction.IGNORE*/get IGNORE() {
      return C[100] || CT.C100;
    }
  }, false);
  types.ClientCertResponse = class ClientCertResponse extends core.Object {
    get certificatePath() {
      return this[S$.certificatePath];
    }
    set certificatePath(value) {
      this[S$.certificatePath] = value;
    }
    get certificatePassword() {
      return this[S$.certificatePassword];
    }
    set certificatePassword(value) {
      this[S$.certificatePassword] = value;
    }
    get androidKeyStoreType() {
      return this[S$.androidKeyStoreType];
    }
    set androidKeyStoreType(value) {
      this[S$.androidKeyStoreType] = value;
    }
    get action() {
      return this[S$.action$9];
    }
    set action(value) {
      this[S$.action$9] = value;
    }
    toMap() {
      let t54;
      return new (T.IdentityMapOfString$dynamic()).from(["certificatePath", this.certificatePath, "certificatePassword", this.certificatePassword, "androidKeyStoreType", this.androidKeyStoreType, "action", (t54 = this.action, t54 == null ? null : t54.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ClientCertResponse.new = function(opts) {
    let certificatePath = opts && 'certificatePath' in opts ? opts.certificatePath : null;
    if (certificatePath == null) dart.nullFailed(I[52], 1826, 22, "certificatePath");
    let certificatePassword = opts && 'certificatePassword' in opts ? opts.certificatePassword : "";
    let androidKeyStoreType = opts && 'androidKeyStoreType' in opts ? opts.androidKeyStoreType : "PKCS12";
    let action = opts && 'action' in opts ? opts.action : C[98] || CT.C98;
    this[S$.certificatePath] = certificatePath;
    this[S$.certificatePassword] = certificatePassword;
    this[S$.androidKeyStoreType] = androidKeyStoreType;
    this[S$.action$9] = action;
    if (dart.equals(this.action, types.ClientCertResponseAction.PROCEED)) if (!this.certificatePath[S.$isNotEmpty]) dart.assertFailed(null, I[52], 1831, 14, "certificatePath.isNotEmpty");
  }).prototype = types.ClientCertResponse.prototype;
  dart.addTypeTests(types.ClientCertResponse);
  dart.addTypeCaches(types.ClientCertResponse);
  dart.setMethodSignature(types.ClientCertResponse, () => ({
    __proto__: dart.getMethods(types.ClientCertResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.ClientCertResponse, I[53]);
  dart.setFieldSignature(types.ClientCertResponse, () => ({
    __proto__: dart.getFields(types.ClientCertResponse.__proto__),
    certificatePath: dart.fieldType(core.String),
    certificatePassword: dart.fieldType(dart.nullable(core.String)),
    androidKeyStoreType: dart.fieldType(dart.nullable(core.String)),
    action: dart.fieldType(dart.nullable(types.ClientCertResponseAction))
  }));
  dart.defineExtensionMethods(types.ClientCertResponse, ['toString']);
  types.Favicon = class Favicon extends core.Object {
    get url() {
      return this[S$.url$7];
    }
    set url(value) {
      this[S$.url$7] = value;
    }
    get rel() {
      return this[S$.rel];
    }
    set rel(value) {
      this[S$.rel] = value;
    }
    get width() {
      return this[S$.width];
    }
    set width(value) {
      this[S$.width] = value;
    }
    get height() {
      return this[S$.height];
    }
    set height(value) {
      this[S$.height] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["url", dart.toString(this.url), "rel", this.rel, "width", this.width, "height", this.height]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.Favicon.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    if (url == null) dart.nullFailed(I[52], 1867, 26, "url");
    let rel = opts && 'rel' in opts ? opts.rel : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[S$.url$7] = url;
    this[S$.rel] = rel;
    this[S$.width] = width;
    this[S$.height] = height;
    ;
  }).prototype = types.Favicon.prototype;
  dart.addTypeTests(types.Favicon);
  dart.addTypeCaches(types.Favicon);
  dart.setMethodSignature(types.Favicon, () => ({
    __proto__: dart.getMethods(types.Favicon.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.Favicon, I[53]);
  dart.setFieldSignature(types.Favicon, () => ({
    __proto__: dart.getFields(types.Favicon.__proto__),
    url: dart.fieldType(core.Uri),
    rel: dart.fieldType(dart.nullable(core.String)),
    width: dart.fieldType(dart.nullable(core.int)),
    height: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(types.Favicon, ['toString']);
  types.AndroidCacheMode = class AndroidCacheMode extends core.Object {
    get [S._value$1]() {
      return this[S$._value$14];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidCacheMode.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 1905, 26, "element");
            return element.toValue() == value;
          }, T.AndroidCacheModeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "LOAD_CACHE_ELSE_NETWORK";
        }
        case 2:
        {
          return "LOAD_NO_CACHE";
        }
        case 3:
        {
          return "LOAD_CACHE_ONLY";
        }
        case -1:
        default:
        {
          return "LOAD_DEFAULT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidCacheMode._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1892, 41, "_value");
    this[S$._value$14] = _value;
    ;
  }).prototype = types.AndroidCacheMode.prototype;
  dart.addTypeTests(types.AndroidCacheMode);
  dart.addTypeCaches(types.AndroidCacheMode);
  dart.setMethodSignature(types.AndroidCacheMode, () => ({
    __proto__: dart.getMethods(types.AndroidCacheMode.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidCacheMode, I[53]);
  dart.setFieldSignature(types.AndroidCacheMode, () => ({
    __proto__: dart.getFields(types.AndroidCacheMode.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidCacheMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidCacheMode, ['hashCode']);
  dart.defineLazy(types.AndroidCacheMode, {
    /*types.AndroidCacheMode.values*/get values() {
      return T.JSArrayOfAndroidCacheMode().of([types.AndroidCacheMode.LOAD_DEFAULT, types.AndroidCacheMode.LOAD_CACHE_ELSE_NETWORK, types.AndroidCacheMode.LOAD_NO_CACHE, types.AndroidCacheMode.LOAD_CACHE_ONLY])[S.$toSet]();
    },
    /*types.AndroidCacheMode.LOAD_DEFAULT*/get LOAD_DEFAULT() {
      return C[51] || CT.C51;
    },
    /*types.AndroidCacheMode.LOAD_CACHE_ELSE_NETWORK*/get LOAD_CACHE_ELSE_NETWORK() {
      return C[101] || CT.C101;
    },
    /*types.AndroidCacheMode.LOAD_NO_CACHE*/get LOAD_NO_CACHE() {
      return C[102] || CT.C102;
    },
    /*types.AndroidCacheMode.LOAD_CACHE_ONLY*/get LOAD_CACHE_ONLY() {
      return C[103] || CT.C103;
    }
  }, false);
  types.AndroidActionModeMenuItem = class AndroidActionModeMenuItem extends core.Object {
    get [S._value$1]() {
      return this[S$._value$15];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidActionModeMenuItem.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 1968, 26, "element");
            return element.toValue() == value;
          }, T.AndroidActionModeMenuItemTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "MENU_ITEM_SHARE";
        }
        case 2:
        {
          return "MENU_ITEM_WEB_SEARCH";
        }
        case 4:
        {
          return "MENU_ITEM_PROCESS_TEXT";
        }
        case 0:
        default:
        {
          return "MENU_ITEM_NONE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidActionModeMenuItem._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 1955, 50, "_value");
    this[S$._value$15] = _value;
    ;
  }).prototype = types.AndroidActionModeMenuItem.prototype;
  dart.addTypeTests(types.AndroidActionModeMenuItem);
  dart.addTypeCaches(types.AndroidActionModeMenuItem);
  dart.setMethodSignature(types.AndroidActionModeMenuItem, () => ({
    __proto__: dart.getMethods(types.AndroidActionModeMenuItem.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidActionModeMenuItem, I[53]);
  dart.setFieldSignature(types.AndroidActionModeMenuItem, () => ({
    __proto__: dart.getFields(types.AndroidActionModeMenuItem.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidActionModeMenuItem, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidActionModeMenuItem, ['hashCode']);
  dart.defineLazy(types.AndroidActionModeMenuItem, {
    /*types.AndroidActionModeMenuItem.values*/get values() {
      return T.JSArrayOfAndroidActionModeMenuItem().of([types.AndroidActionModeMenuItem.MENU_ITEM_NONE, types.AndroidActionModeMenuItem.MENU_ITEM_SHARE, types.AndroidActionModeMenuItem.MENU_ITEM_WEB_SEARCH, types.AndroidActionModeMenuItem.MENU_ITEM_PROCESS_TEXT])[S.$toSet]();
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_NONE*/get MENU_ITEM_NONE() {
      return C[104] || CT.C104;
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_SHARE*/get MENU_ITEM_SHARE() {
      return C[105] || CT.C105;
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_WEB_SEARCH*/get MENU_ITEM_WEB_SEARCH() {
      return C[106] || CT.C106;
    },
    /*types.AndroidActionModeMenuItem.MENU_ITEM_PROCESS_TEXT*/get MENU_ITEM_PROCESS_TEXT() {
      return C[107] || CT.C107;
    }
  }, false);
  types.AndroidForceDark = class AndroidForceDark extends core.Object {
    get [S._value$1]() {
      return this[S$._value$16];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidForceDark.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2031, 26, "element");
            return element.toValue() == value;
          }, T.AndroidForceDarkTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "FORCE_DARK_AUTO";
        }
        case 2:
        {
          return "FORCE_DARK_ON";
        }
        case 0:
        default:
        {
          return "FORCE_DARK_OFF";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidForceDark._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2019, 41, "_value");
    this[S$._value$16] = _value;
    ;
  }).prototype = types.AndroidForceDark.prototype;
  dart.addTypeTests(types.AndroidForceDark);
  dart.addTypeCaches(types.AndroidForceDark);
  dart.setMethodSignature(types.AndroidForceDark, () => ({
    __proto__: dart.getMethods(types.AndroidForceDark.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidForceDark, I[53]);
  dart.setFieldSignature(types.AndroidForceDark, () => ({
    __proto__: dart.getFields(types.AndroidForceDark.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidForceDark, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidForceDark, ['hashCode']);
  dart.defineLazy(types.AndroidForceDark, {
    /*types.AndroidForceDark.values*/get values() {
      return T.JSArrayOfAndroidForceDark().of([types.AndroidForceDark.FORCE_DARK_OFF, types.AndroidForceDark.FORCE_DARK_AUTO, types.AndroidForceDark.FORCE_DARK_ON])[S.$toSet]();
    },
    /*types.AndroidForceDark.FORCE_DARK_OFF*/get FORCE_DARK_OFF() {
      return C[52] || CT.C52;
    },
    /*types.AndroidForceDark.FORCE_DARK_AUTO*/get FORCE_DARK_AUTO() {
      return C[108] || CT.C108;
    },
    /*types.AndroidForceDark.FORCE_DARK_ON*/get FORCE_DARK_ON() {
      return C[109] || CT.C109;
    }
  }, false);
  types.AndroidLayoutAlgorithm = class AndroidLayoutAlgorithm extends core.Object {
    get [S._value$1]() {
      return this[S$._value$17];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidLayoutAlgorithm.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2086, 26, "element");
            return element.toValue() == value;
          }, T.AndroidLayoutAlgorithmTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidLayoutAlgorithm._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2074, 47, "_value");
    this[S$._value$17] = _value;
    ;
  }).prototype = types.AndroidLayoutAlgorithm.prototype;
  dart.addTypeTests(types.AndroidLayoutAlgorithm);
  dart.addTypeCaches(types.AndroidLayoutAlgorithm);
  dart.setMethodSignature(types.AndroidLayoutAlgorithm, () => ({
    __proto__: dart.getMethods(types.AndroidLayoutAlgorithm.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.AndroidLayoutAlgorithm, I[53]);
  dart.setFieldSignature(types.AndroidLayoutAlgorithm, () => ({
    __proto__: dart.getFields(types.AndroidLayoutAlgorithm.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.AndroidLayoutAlgorithm, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidLayoutAlgorithm, ['hashCode']);
  dart.defineLazy(types.AndroidLayoutAlgorithm, {
    /*types.AndroidLayoutAlgorithm.values*/get values() {
      return T.JSArrayOfAndroidLayoutAlgorithm().of([types.AndroidLayoutAlgorithm.NORMAL, types.AndroidLayoutAlgorithm.TEXT_AUTOSIZING, types.AndroidLayoutAlgorithm.NARROW_COLUMNS])[S.$toSet]();
    },
    /*types.AndroidLayoutAlgorithm.NORMAL*/get NORMAL() {
      return C[110] || CT.C110;
    },
    /*types.AndroidLayoutAlgorithm.TEXT_AUTOSIZING*/get TEXT_AUTOSIZING() {
      return C[111] || CT.C111;
    },
    /*types.AndroidLayoutAlgorithm.NARROW_COLUMNS*/get NARROW_COLUMNS() {
      return C[112] || CT.C112;
    }
  }, false);
  types.AndroidMixedContentMode = class AndroidMixedContentMode extends core.Object {
    get [S._value$1]() {
      return this[S$._value$18];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidMixedContentMode.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2137, 26, "element");
            return element.toValue() == value;
          }, T.AndroidMixedContentModeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "MIXED_CONTENT_NEVER_ALLOW";
        }
        case 2:
        {
          return "MIXED_CONTENT_COMPATIBILITY_MODE";
        }
        case 0:
        default:
        {
          return "MIXED_CONTENT_ALWAYS_ALLOW";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidMixedContentMode._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2125, 48, "_value");
    this[S$._value$18] = _value;
    ;
  }).prototype = types.AndroidMixedContentMode.prototype;
  dart.addTypeTests(types.AndroidMixedContentMode);
  dart.addTypeCaches(types.AndroidMixedContentMode);
  dart.setMethodSignature(types.AndroidMixedContentMode, () => ({
    __proto__: dart.getMethods(types.AndroidMixedContentMode.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidMixedContentMode, I[53]);
  dart.setFieldSignature(types.AndroidMixedContentMode, () => ({
    __proto__: dart.getFields(types.AndroidMixedContentMode.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidMixedContentMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidMixedContentMode, ['hashCode']);
  dart.defineLazy(types.AndroidMixedContentMode, {
    /*types.AndroidMixedContentMode.values*/get values() {
      return T.JSArrayOfAndroidMixedContentMode().of([types.AndroidMixedContentMode.MIXED_CONTENT_ALWAYS_ALLOW, types.AndroidMixedContentMode.MIXED_CONTENT_NEVER_ALLOW, types.AndroidMixedContentMode.MIXED_CONTENT_COMPATIBILITY_MODE])[S.$toSet]();
    },
    /*types.AndroidMixedContentMode.MIXED_CONTENT_ALWAYS_ALLOW*/get MIXED_CONTENT_ALWAYS_ALLOW() {
      return C[113] || CT.C113;
    },
    /*types.AndroidMixedContentMode.MIXED_CONTENT_NEVER_ALLOW*/get MIXED_CONTENT_NEVER_ALLOW() {
      return C[114] || CT.C114;
    },
    /*types.AndroidMixedContentMode.MIXED_CONTENT_COMPATIBILITY_MODE*/get MIXED_CONTENT_COMPATIBILITY_MODE() {
      return C[115] || CT.C115;
    }
  }, false);
  types.IOSWKSelectionGranularity = class IOSWKSelectionGranularity extends core.Object {
    get [S._value$1]() {
      return this[S$._value$19];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSWKSelectionGranularity.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2199, 26, "element");
            return element.toValue() == value;
          }, T.IOSWKSelectionGranularityTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "CHARACTER";
        }
        case 0:
        default:
        {
          return "DYNAMIC";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSWKSelectionGranularity._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2188, 50, "_value");
    this[S$._value$19] = _value;
    ;
  }).prototype = types.IOSWKSelectionGranularity.prototype;
  dart.addTypeTests(types.IOSWKSelectionGranularity);
  dart.addTypeCaches(types.IOSWKSelectionGranularity);
  dart.setMethodSignature(types.IOSWKSelectionGranularity, () => ({
    __proto__: dart.getMethods(types.IOSWKSelectionGranularity.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSWKSelectionGranularity, I[53]);
  dart.setFieldSignature(types.IOSWKSelectionGranularity, () => ({
    __proto__: dart.getFields(types.IOSWKSelectionGranularity.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSWKSelectionGranularity, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSWKSelectionGranularity, ['hashCode']);
  dart.defineLazy(types.IOSWKSelectionGranularity, {
    /*types.IOSWKSelectionGranularity.values*/get values() {
      return T.JSArrayOfIOSWKSelectionGranularity().of([types.IOSWKSelectionGranularity.DYNAMIC, types.IOSWKSelectionGranularity.CHARACTER])[S.$toSet]();
    },
    /*types.IOSWKSelectionGranularity.DYNAMIC*/get DYNAMIC() {
      return C[46] || CT.C46;
    },
    /*types.IOSWKSelectionGranularity.CHARACTER*/get CHARACTER() {
      return C[116] || CT.C116;
    }
  }, false);
  types.IOSWKDataDetectorTypes = class IOSWKDataDetectorTypes extends core.Object {
    get [S._value$1]() {
      return this[S$._value$20];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSWKDataDetectorTypes.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2257, 26, "element");
            return element.toValue() == value;
          }, T.IOSWKDataDetectorTypesTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSWKDataDetectorTypes._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2238, 47, "_value");
    this[S$._value$20] = _value;
    ;
  }).prototype = types.IOSWKDataDetectorTypes.prototype;
  dart.addTypeTests(types.IOSWKDataDetectorTypes);
  dart.addTypeCaches(types.IOSWKDataDetectorTypes);
  dart.setMethodSignature(types.IOSWKDataDetectorTypes, () => ({
    __proto__: dart.getMethods(types.IOSWKDataDetectorTypes.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.IOSWKDataDetectorTypes, I[53]);
  dart.setFieldSignature(types.IOSWKDataDetectorTypes, () => ({
    __proto__: dart.getFields(types.IOSWKDataDetectorTypes.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSWKDataDetectorTypes, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSWKDataDetectorTypes, ['hashCode']);
  dart.defineLazy(types.IOSWKDataDetectorTypes, {
    /*types.IOSWKDataDetectorTypes.values*/get values() {
      return T.JSArrayOfIOSWKDataDetectorTypes().of([types.IOSWKDataDetectorTypes.NONE, types.IOSWKDataDetectorTypes.PHONE_NUMBER, types.IOSWKDataDetectorTypes.LINK, types.IOSWKDataDetectorTypes.ADDRESS, types.IOSWKDataDetectorTypes.CALENDAR_EVENT, types.IOSWKDataDetectorTypes.TRACKING_NUMBER, types.IOSWKDataDetectorTypes.FLIGHT_NUMBER, types.IOSWKDataDetectorTypes.LOOKUP_SUGGESTION, types.IOSWKDataDetectorTypes.SPOTLIGHT_SUGGESTION, types.IOSWKDataDetectorTypes.ALL])[S.$toSet]();
    },
    /*types.IOSWKDataDetectorTypes.NONE*/get NONE() {
      return C[48] || CT.C48;
    },
    /*types.IOSWKDataDetectorTypes.PHONE_NUMBER*/get PHONE_NUMBER() {
      return C[117] || CT.C117;
    },
    /*types.IOSWKDataDetectorTypes.LINK*/get LINK() {
      return C[118] || CT.C118;
    },
    /*types.IOSWKDataDetectorTypes.ADDRESS*/get ADDRESS() {
      return C[119] || CT.C119;
    },
    /*types.IOSWKDataDetectorTypes.CALENDAR_EVENT*/get CALENDAR_EVENT() {
      return C[120] || CT.C120;
    },
    /*types.IOSWKDataDetectorTypes.TRACKING_NUMBER*/get TRACKING_NUMBER() {
      return C[121] || CT.C121;
    },
    /*types.IOSWKDataDetectorTypes.FLIGHT_NUMBER*/get FLIGHT_NUMBER() {
      return C[122] || CT.C122;
    },
    /*types.IOSWKDataDetectorTypes.LOOKUP_SUGGESTION*/get LOOKUP_SUGGESTION() {
      return C[123] || CT.C123;
    },
    /*types.IOSWKDataDetectorTypes.SPOTLIGHT_SUGGESTION*/get SPOTLIGHT_SUGGESTION() {
      return C[124] || CT.C124;
    },
    /*types.IOSWKDataDetectorTypes.ALL*/get ALL() {
      return C[125] || CT.C125;
    }
  }, false);
  types.IOSUIScrollViewDecelerationRate = class IOSUIScrollViewDecelerationRate extends core.Object {
    get [S._value$1]() {
      return this[S$._value$21];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSUIScrollViewDecelerationRate.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2327, 26, "element");
            return element.toValue() == value;
          }, T.IOSUIScrollViewDecelerationRateTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSUIScrollViewDecelerationRate._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2316, 56, "_value");
    this[S$._value$21] = _value;
    ;
  }).prototype = types.IOSUIScrollViewDecelerationRate.prototype;
  dart.addTypeTests(types.IOSUIScrollViewDecelerationRate);
  dart.addTypeCaches(types.IOSUIScrollViewDecelerationRate);
  dart.setMethodSignature(types.IOSUIScrollViewDecelerationRate, () => ({
    __proto__: dart.getMethods(types.IOSUIScrollViewDecelerationRate.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.IOSUIScrollViewDecelerationRate, I[53]);
  dart.setFieldSignature(types.IOSUIScrollViewDecelerationRate, () => ({
    __proto__: dart.getFields(types.IOSUIScrollViewDecelerationRate.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSUIScrollViewDecelerationRate, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIScrollViewDecelerationRate, ['hashCode']);
  dart.defineLazy(types.IOSUIScrollViewDecelerationRate, {
    /*types.IOSUIScrollViewDecelerationRate.values*/get values() {
      return T.JSArrayOfIOSUIScrollViewDecelerationRate().of([types.IOSUIScrollViewDecelerationRate.NORMAL, types.IOSUIScrollViewDecelerationRate.FAST])[S.$toSet]();
    },
    /*types.IOSUIScrollViewDecelerationRate.NORMAL*/get NORMAL() {
      return C[49] || CT.C49;
    },
    /*types.IOSUIScrollViewDecelerationRate.FAST*/get FAST() {
      return C[126] || CT.C126;
    }
  }, false);
  types.UserPreferredContentMode = class UserPreferredContentMode extends core.Object {
    get [S._value$1]() {
      return this[S$._value$22];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.UserPreferredContentMode.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2369, 26, "element");
            return element.toValue() == value;
          }, T.UserPreferredContentModeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "MOBILE";
        }
        case 2:
        {
          return "DESKTOP";
        }
        case 0:
        default:
        {
          return "RECOMMENDED";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.UserPreferredContentMode._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2357, 49, "_value");
    this[S$._value$22] = _value;
    ;
  }).prototype = types.UserPreferredContentMode.prototype;
  dart.addTypeTests(types.UserPreferredContentMode);
  dart.addTypeCaches(types.UserPreferredContentMode);
  dart.setMethodSignature(types.UserPreferredContentMode, () => ({
    __proto__: dart.getMethods(types.UserPreferredContentMode.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.UserPreferredContentMode, I[53]);
  dart.setFieldSignature(types.UserPreferredContentMode, () => ({
    __proto__: dart.getFields(types.UserPreferredContentMode.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.UserPreferredContentMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.UserPreferredContentMode, ['hashCode']);
  dart.defineLazy(types.UserPreferredContentMode, {
    /*types.UserPreferredContentMode.values*/get values() {
      return T.JSArrayOfUserPreferredContentMode().of([types.UserPreferredContentMode.RECOMMENDED, types.UserPreferredContentMode.MOBILE, types.UserPreferredContentMode.DESKTOP])[S.$toSet]();
    },
    /*types.UserPreferredContentMode.RECOMMENDED*/get RECOMMENDED() {
      return C[57] || CT.C57;
    },
    /*types.UserPreferredContentMode.MOBILE*/get MOBILE() {
      return C[127] || CT.C127;
    },
    /*types.UserPreferredContentMode.DESKTOP*/get DESKTOP() {
      return C[128] || CT.C128;
    }
  }, false);
  types.IOSUIModalPresentationStyle = class IOSUIModalPresentationStyle extends core.Object {
    get [S._value$1]() {
      return this[S$._value$23];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSUIModalPresentationStyle.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2430, 26, "element");
            return element.toValue() == value;
          }, T.IOSUIModalPresentationStyleTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "PAGE_SHEET";
        }
        case 2:
        {
          return "FORM_SHEET";
        }
        case 3:
        {
          return "CURRENT_CONTEXT";
        }
        case 4:
        {
          return "CUSTOM";
        }
        case 5:
        {
          return "OVER_FULL_SCREEN";
        }
        case 6:
        {
          return "OVER_CURRENT_CONTEXT";
        }
        case 7:
        {
          return "POPOVER";
        }
        case 8:
        {
          return "NONE";
        }
        case 9:
        {
          return "AUTOMATIC";
        }
        case 0:
        default:
        {
          return "FULL_SCREEN";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSUIModalPresentationStyle._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2411, 52, "_value");
    this[S$._value$23] = _value;
    ;
  }).prototype = types.IOSUIModalPresentationStyle.prototype;
  dart.addTypeTests(types.IOSUIModalPresentationStyle);
  dart.addTypeCaches(types.IOSUIModalPresentationStyle);
  dart.setMethodSignature(types.IOSUIModalPresentationStyle, () => ({
    __proto__: dart.getMethods(types.IOSUIModalPresentationStyle.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSUIModalPresentationStyle, I[53]);
  dart.setFieldSignature(types.IOSUIModalPresentationStyle, () => ({
    __proto__: dart.getFields(types.IOSUIModalPresentationStyle.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSUIModalPresentationStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIModalPresentationStyle, ['hashCode']);
  dart.defineLazy(types.IOSUIModalPresentationStyle, {
    /*types.IOSUIModalPresentationStyle.values*/get values() {
      return T.JSArrayOfIOSUIModalPresentationStyle().of([types.IOSUIModalPresentationStyle.FULL_SCREEN, types.IOSUIModalPresentationStyle.PAGE_SHEET, types.IOSUIModalPresentationStyle.FORM_SHEET, types.IOSUIModalPresentationStyle.CURRENT_CONTEXT, types.IOSUIModalPresentationStyle.CUSTOM, types.IOSUIModalPresentationStyle.OVER_FULL_SCREEN, types.IOSUIModalPresentationStyle.OVER_CURRENT_CONTEXT, types.IOSUIModalPresentationStyle.POPOVER, types.IOSUIModalPresentationStyle.NONE, types.IOSUIModalPresentationStyle.AUTOMATIC])[S.$toSet]();
    },
    /*types.IOSUIModalPresentationStyle.FULL_SCREEN*/get FULL_SCREEN() {
      return C[7] || CT.C7;
    },
    /*types.IOSUIModalPresentationStyle.PAGE_SHEET*/get PAGE_SHEET() {
      return C[129] || CT.C129;
    },
    /*types.IOSUIModalPresentationStyle.FORM_SHEET*/get FORM_SHEET() {
      return C[130] || CT.C130;
    },
    /*types.IOSUIModalPresentationStyle.CURRENT_CONTEXT*/get CURRENT_CONTEXT() {
      return C[131] || CT.C131;
    },
    /*types.IOSUIModalPresentationStyle.CUSTOM*/get CUSTOM() {
      return C[132] || CT.C132;
    },
    /*types.IOSUIModalPresentationStyle.OVER_FULL_SCREEN*/get OVER_FULL_SCREEN() {
      return C[133] || CT.C133;
    },
    /*types.IOSUIModalPresentationStyle.OVER_CURRENT_CONTEXT*/get OVER_CURRENT_CONTEXT() {
      return C[134] || CT.C134;
    },
    /*types.IOSUIModalPresentationStyle.POPOVER*/get POPOVER() {
      return C[135] || CT.C135;
    },
    /*types.IOSUIModalPresentationStyle.NONE*/get NONE() {
      return C[136] || CT.C136;
    },
    /*types.IOSUIModalPresentationStyle.AUTOMATIC*/get AUTOMATIC() {
      return C[137] || CT.C137;
    }
  }, false);
  types.IOSUIModalTransitionStyle = class IOSUIModalTransitionStyle extends core.Object {
    get [S._value$1]() {
      return this[S$._value$24];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSUIModalTransitionStyle.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2524, 26, "element");
            return element.toValue() == value;
          }, T.IOSUIModalTransitionStyleTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "FLIP_HORIZONTAL";
        }
        case 2:
        {
          return "CROSS_DISSOLVE";
        }
        case 3:
        {
          return "PARTIAL_CURL";
        }
        case 0:
        default:
        {
          return "COVER_VERTICAL";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSUIModalTransitionStyle._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2511, 50, "_value");
    this[S$._value$24] = _value;
    ;
  }).prototype = types.IOSUIModalTransitionStyle.prototype;
  dart.addTypeTests(types.IOSUIModalTransitionStyle);
  dart.addTypeCaches(types.IOSUIModalTransitionStyle);
  dart.setMethodSignature(types.IOSUIModalTransitionStyle, () => ({
    __proto__: dart.getMethods(types.IOSUIModalTransitionStyle.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSUIModalTransitionStyle, I[53]);
  dart.setFieldSignature(types.IOSUIModalTransitionStyle, () => ({
    __proto__: dart.getFields(types.IOSUIModalTransitionStyle.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSUIModalTransitionStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIModalTransitionStyle, ['hashCode']);
  dart.defineLazy(types.IOSUIModalTransitionStyle, {
    /*types.IOSUIModalTransitionStyle.values*/get values() {
      return T.JSArrayOfIOSUIModalTransitionStyle().of([types.IOSUIModalTransitionStyle.COVER_VERTICAL, types.IOSUIModalTransitionStyle.FLIP_HORIZONTAL, types.IOSUIModalTransitionStyle.CROSS_DISSOLVE, types.IOSUIModalTransitionStyle.PARTIAL_CURL])[S.$toSet]();
    },
    /*types.IOSUIModalTransitionStyle.COVER_VERTICAL*/get COVER_VERTICAL() {
      return C[8] || CT.C8;
    },
    /*types.IOSUIModalTransitionStyle.FLIP_HORIZONTAL*/get FLIP_HORIZONTAL() {
      return C[138] || CT.C138;
    },
    /*types.IOSUIModalTransitionStyle.CROSS_DISSOLVE*/get CROSS_DISSOLVE() {
      return C[139] || CT.C139;
    },
    /*types.IOSUIModalTransitionStyle.PARTIAL_CURL*/get PARTIAL_CURL() {
      return C[140] || CT.C140;
    }
  }, false);
  types.IOSSafariDismissButtonStyle = class IOSSafariDismissButtonStyle extends core.Object {
    get [S._value$1]() {
      return this[S$._value$25];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSSafariDismissButtonStyle.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2591, 26, "element");
            return element.toValue() == value;
          }, T.IOSSafariDismissButtonStyleTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "CLOSE";
        }
        case 2:
        {
          return "CANCEL";
        }
        case 0:
        default:
        {
          return "DONE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSSafariDismissButtonStyle._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2579, 52, "_value");
    this[S$._value$25] = _value;
    ;
  }).prototype = types.IOSSafariDismissButtonStyle.prototype;
  dart.addTypeTests(types.IOSSafariDismissButtonStyle);
  dart.addTypeCaches(types.IOSSafariDismissButtonStyle);
  dart.setMethodSignature(types.IOSSafariDismissButtonStyle, () => ({
    __proto__: dart.getMethods(types.IOSSafariDismissButtonStyle.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSSafariDismissButtonStyle, I[53]);
  dart.setFieldSignature(types.IOSSafariDismissButtonStyle, () => ({
    __proto__: dart.getFields(types.IOSSafariDismissButtonStyle.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSSafariDismissButtonStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSSafariDismissButtonStyle, ['hashCode']);
  dart.defineLazy(types.IOSSafariDismissButtonStyle, {
    /*types.IOSSafariDismissButtonStyle.values*/get values() {
      return T.JSArrayOfIOSSafariDismissButtonStyle().of([types.IOSSafariDismissButtonStyle.DONE, types.IOSSafariDismissButtonStyle.CLOSE, types.IOSSafariDismissButtonStyle.CANCEL])[S.$toSet]();
    },
    /*types.IOSSafariDismissButtonStyle.DONE*/get DONE() {
      return C[6] || CT.C6;
    },
    /*types.IOSSafariDismissButtonStyle.CLOSE*/get CLOSE() {
      return C[141] || CT.C141;
    },
    /*types.IOSSafariDismissButtonStyle.CANCEL*/get CANCEL() {
      return C[142] || CT.C142;
    }
  }, false);
  types.AjaxRequestAction = class AjaxRequestAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$26];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["action", this[S._value$1]]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AjaxRequestAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2633, 42, "_value");
    this[S$._value$26] = _value;
    ;
  }).prototype = types.AjaxRequestAction.prototype;
  dart.addTypeTests(types.AjaxRequestAction);
  dart.addTypeCaches(types.AjaxRequestAction);
  dart.setMethodSignature(types.AjaxRequestAction, () => ({
    __proto__: dart.getMethods(types.AjaxRequestAction.__proto__),
    toValue: dart.fnType(core.int, []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.AjaxRequestAction, I[53]);
  dart.setFieldSignature(types.AjaxRequestAction, () => ({
    __proto__: dart.getFields(types.AjaxRequestAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AjaxRequestAction, ['_equals', 'toString']);
  dart.defineExtensionAccessors(types.AjaxRequestAction, ['hashCode']);
  dart.defineLazy(types.AjaxRequestAction, {
    /*types.AjaxRequestAction.ABORT*/get ABORT() {
      return C[143] || CT.C143;
    },
    /*types.AjaxRequestAction.PROCEED*/get PROCEED() {
      return C[144] || CT.C144;
    }
  }, false);
  types.AjaxRequestEventType = class AjaxRequestEventType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$27];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AjaxRequestEventType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2684, 26, "element");
            return element.toValue() == value;
          }, T.AjaxRequestEventTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AjaxRequestEventType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2668, 45, "_value");
    this[S$._value$27] = _value;
    ;
  }).prototype = types.AjaxRequestEventType.prototype;
  dart.addTypeTests(types.AjaxRequestEventType);
  dart.addTypeCaches(types.AjaxRequestEventType);
  dart.setMethodSignature(types.AjaxRequestEventType, () => ({
    __proto__: dart.getMethods(types.AjaxRequestEventType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.AjaxRequestEventType, I[53]);
  dart.setFieldSignature(types.AjaxRequestEventType, () => ({
    __proto__: dart.getFields(types.AjaxRequestEventType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.AjaxRequestEventType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AjaxRequestEventType, ['hashCode']);
  dart.defineLazy(types.AjaxRequestEventType, {
    /*types.AjaxRequestEventType.values*/get values() {
      return T.JSArrayOfAjaxRequestEventType().of([types.AjaxRequestEventType.LOADSTART, types.AjaxRequestEventType.LOAD, types.AjaxRequestEventType.LOADEND, types.AjaxRequestEventType.PROGRESS, types.AjaxRequestEventType.ERROR, types.AjaxRequestEventType.ABORT, types.AjaxRequestEventType.TIMEOUT])[S.$toSet]();
    },
    /*types.AjaxRequestEventType.LOADSTART*/get LOADSTART() {
      return C[145] || CT.C145;
    },
    /*types.AjaxRequestEventType.LOAD*/get LOAD() {
      return C[146] || CT.C146;
    },
    /*types.AjaxRequestEventType.LOADEND*/get LOADEND() {
      return C[147] || CT.C147;
    },
    /*types.AjaxRequestEventType.PROGRESS*/get PROGRESS() {
      return C[148] || CT.C148;
    },
    /*types.AjaxRequestEventType.ERROR*/get ERROR() {
      return C[149] || CT.C149;
    },
    /*types.AjaxRequestEventType.ABORT*/get ABORT() {
      return C[150] || CT.C150;
    },
    /*types.AjaxRequestEventType.TIMEOUT*/get TIMEOUT() {
      return C[151] || CT.C151;
    }
  }, false);
  types.AjaxRequestEvent = class AjaxRequestEvent extends core.Object {
    get type() {
      return this[S$.type];
    }
    set type(value) {
      this[S$.type] = value;
    }
    get lengthComputable() {
      return this[S$.lengthComputable];
    }
    set lengthComputable(value) {
      this[S$.lengthComputable] = value;
    }
    get loaded() {
      return this[S$.loaded];
    }
    set loaded(value) {
      this[S$.loaded] = value;
    }
    get total() {
      return this[S$.total];
    }
    set total(value) {
      this[S$.total] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.AjaxRequestEvent.new({type: types.AjaxRequestEventType.fromValue(T.StringN().as(map[S.$_get]("type"))), lengthComputable: T.boolN().as(map[S.$_get]("lengthComputable")), loaded: T.intN().as(map[S.$_get]("loaded")), total: T.intN().as(map[S.$_get]("total"))});
    }
    toMap() {
      let t67;
      return new (T.IdentityMapOfString$dynamic()).from(["type", (t67 = this.type, t67 == null ? null : t67.toValue()), "lengthComputable", this.lengthComputable, "loaded", this.loaded, "total", this.total]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AjaxRequestEvent.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let lengthComputable = opts && 'lengthComputable' in opts ? opts.lengthComputable : null;
    let loaded = opts && 'loaded' in opts ? opts.loaded : null;
    let total = opts && 'total' in opts ? opts.total : null;
    this[S$.type] = type;
    this[S$.lengthComputable] = lengthComputable;
    this[S$.loaded] = loaded;
    this[S$.total] = total;
    ;
  }).prototype = types.AjaxRequestEvent.prototype;
  dart.addTypeTests(types.AjaxRequestEvent);
  dart.addTypeCaches(types.AjaxRequestEvent);
  dart.setMethodSignature(types.AjaxRequestEvent, () => ({
    __proto__: dart.getMethods(types.AjaxRequestEvent.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.AjaxRequestEvent, I[53]);
  dart.setFieldSignature(types.AjaxRequestEvent, () => ({
    __proto__: dart.getFields(types.AjaxRequestEvent.__proto__),
    type: dart.fieldType(dart.nullable(types.AjaxRequestEventType)),
    lengthComputable: dart.fieldType(dart.nullable(core.bool)),
    loaded: dart.fieldType(dart.nullable(core.int)),
    total: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(types.AjaxRequestEvent, ['toString']);
  types.AjaxRequestReadyState = class AjaxRequestReadyState extends core.Object {
    get [S._value$1]() {
      return this[S$._value$28];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AjaxRequestReadyState.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 2793, 26, "element");
            return element.toValue() == value;
          }, T.AjaxRequestReadyStateTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "OPENED";
        }
        case 2:
        {
          return "HEADERS_RECEIVED";
        }
        case 3:
        {
          return "LOADING";
        }
        case 4:
        {
          return "DONE";
        }
        case 0:
        default:
        {
          return "UNSENT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AjaxRequestReadyState._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 2779, 46, "_value");
    this[S$._value$28] = _value;
    ;
  }).prototype = types.AjaxRequestReadyState.prototype;
  dart.addTypeTests(types.AjaxRequestReadyState);
  dart.addTypeCaches(types.AjaxRequestReadyState);
  dart.setMethodSignature(types.AjaxRequestReadyState, () => ({
    __proto__: dart.getMethods(types.AjaxRequestReadyState.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AjaxRequestReadyState, I[53]);
  dart.setFieldSignature(types.AjaxRequestReadyState, () => ({
    __proto__: dart.getFields(types.AjaxRequestReadyState.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AjaxRequestReadyState, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AjaxRequestReadyState, ['hashCode']);
  dart.defineLazy(types.AjaxRequestReadyState, {
    /*types.AjaxRequestReadyState.values*/get values() {
      return T.JSArrayOfAjaxRequestReadyState().of([types.AjaxRequestReadyState.UNSENT, types.AjaxRequestReadyState.OPENED, types.AjaxRequestReadyState.HEADERS_RECEIVED, types.AjaxRequestReadyState.LOADING, types.AjaxRequestReadyState.DONE])[S.$toSet]();
    },
    /*types.AjaxRequestReadyState.UNSENT*/get UNSENT() {
      return C[152] || CT.C152;
    },
    /*types.AjaxRequestReadyState.OPENED*/get OPENED() {
      return C[153] || CT.C153;
    },
    /*types.AjaxRequestReadyState.HEADERS_RECEIVED*/get HEADERS_RECEIVED() {
      return C[154] || CT.C154;
    },
    /*types.AjaxRequestReadyState.LOADING*/get LOADING() {
      return C[155] || CT.C155;
    },
    /*types.AjaxRequestReadyState.DONE*/get DONE() {
      return C[156] || CT.C156;
    }
  }, false);
  types.AjaxRequestHeaders = class AjaxRequestHeaders extends core.Object {
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.AjaxRequestHeaders.new(map);
    }
    getHeaders() {
      return this[S$._headers];
    }
    setRequestHeader(header, value) {
      if (header == null) dart.nullFailed(I[52], 2865, 32, "header");
      if (value == null) dart.nullFailed(I[52], 2865, 47, "value");
      this[S$._newHeaders][S.$_set](header, value);
    }
    toMap() {
      return this[S$._newHeaders];
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AjaxRequestHeaders.new = function(_headers) {
    if (_headers == null) dart.nullFailed(I[52], 2846, 27, "_headers");
    this[S$._newHeaders] = new (T.IdentityMapOfString$dynamic()).new();
    this[S$._headers] = _headers;
    ;
  }).prototype = types.AjaxRequestHeaders.prototype;
  dart.addTypeTests(types.AjaxRequestHeaders);
  dart.addTypeCaches(types.AjaxRequestHeaders);
  dart.setMethodSignature(types.AjaxRequestHeaders, () => ({
    __proto__: dart.getMethods(types.AjaxRequestHeaders.__proto__),
    getHeaders: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    setRequestHeader: dart.fnType(dart.void, [core.String, core.String]),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.AjaxRequestHeaders, I[53]);
  dart.setFieldSignature(types.AjaxRequestHeaders, () => ({
    __proto__: dart.getFields(types.AjaxRequestHeaders.__proto__),
    [S$._headers]: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    [S$._newHeaders]: dart.fieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.defineExtensionMethods(types.AjaxRequestHeaders, ['toString']);
  types.AjaxRequest = class AjaxRequest extends core.Object {
    get data() {
      return this[S$.data$4];
    }
    set data(value) {
      this[S$.data$4] = value;
    }
    get method() {
      return this[S$.method$1];
    }
    set method(value) {
      this[S$.method$1] = value;
    }
    get url() {
      return this[S$.url$8];
    }
    set url(value) {
      this[S$.url$8] = value;
    }
    get isAsync() {
      return this[S$.isAsync];
    }
    set isAsync(value) {
      this[S$.isAsync] = value;
    }
    get user() {
      return this[S$.user];
    }
    set user(value) {
      this[S$.user] = value;
    }
    get password() {
      return this[S$.password$2];
    }
    set password(value) {
      this[S$.password$2] = value;
    }
    get withCredentials() {
      return this[S$.withCredentials];
    }
    set withCredentials(value) {
      this[S$.withCredentials] = value;
    }
    get headers() {
      return this[S$.headers$2];
    }
    set headers(value) {
      this[S$.headers$2] = value;
    }
    get readyState() {
      return this[S$.readyState];
    }
    set readyState(value) {
      this[S$.readyState] = value;
    }
    get status() {
      return this[S$.status];
    }
    set status(value) {
      this[S$.status] = value;
    }
    get responseURL() {
      return this[S$.responseURL];
    }
    set responseURL(value) {
      this[S$.responseURL] = value;
    }
    get responseType() {
      return this[S$.responseType];
    }
    set responseType(value) {
      this[S$.responseType] = value;
    }
    get response() {
      return this[S$.response];
    }
    set response(value) {
      this[S$.response] = value;
    }
    get responseText() {
      return this[S$.responseText];
    }
    set responseText(value) {
      this[S$.responseText] = value;
    }
    get responseXML() {
      return this[S$.responseXML];
    }
    set responseXML(value) {
      this[S$.responseXML] = value;
    }
    get statusText() {
      return this[S$.statusText];
    }
    set statusText(value) {
      this[S$.statusText] = value;
    }
    get responseHeaders() {
      return this[S$.responseHeaders];
    }
    set responseHeaders(value) {
      this[S$.responseHeaders] = value;
    }
    get event() {
      return this[S$.event];
    }
    set event(value) {
      this[S$.event] = value;
    }
    get action() {
      return this[S$.action$10];
    }
    set action(value) {
      this[S$.action$10] = value;
    }
    static fromMap(map) {
      let t68, t68$, t68$0;
      if (map == null) {
        return null;
      }
      return new types.AjaxRequest.new({data: map[S.$_get]("data"), method: T.StringN().as(map[S.$_get]("method")), url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, isAsync: T.boolN().as(map[S.$_get]("isAsync")), user: T.StringN().as(map[S.$_get]("user")), password: T.StringN().as(map[S.$_get]("password")), withCredentials: T.boolN().as(map[S.$_get]("withCredentials")), headers: types.AjaxRequestHeaders.fromMap(T.MapNOfString$dynamic().as((t68 = map[S.$_get]("headers"), t68 == null ? null : dart.dgsend(t68, [core.String, dart.dynamic], 'cast', [])))), readyState: types.AjaxRequestReadyState.fromValue(T.intN().as(map[S.$_get]("readyState"))), status: T.intN().as(map[S.$_get]("status")), responseURL: map[S.$_get]("responseURL") != null ? core.Uri.parse(core.String.as(map[S.$_get]("responseURL"))) : null, responseType: T.StringN().as(map[S.$_get]("responseType")), response: map[S.$_get]("response"), responseText: T.StringN().as(map[S.$_get]("responseText")), responseXML: T.StringN().as(map[S.$_get]("responseXML")), statusText: T.StringN().as(map[S.$_get]("statusText")), responseHeaders: T.MapNOfString$dynamic().as((t68$ = map[S.$_get]("responseHeaders"), t68$ == null ? null : dart.dgsend(t68$, [core.String, dart.dynamic], 'cast', []))), event: types.AjaxRequestEvent.fromMap(T.MapNOfString$dynamic().as((t68$0 = map[S.$_get]("event"), t68$0 == null ? null : dart.dgsend(t68$0, [core.String, dart.dynamic], 'cast', []))))});
    }
    toMap() {
      let t68, t68$, t68$0, t68$1, t68$2;
      return new (T.IdentityMapOfString$dynamic()).from(["data", this.data, "method", this.method, "url", (t68 = this.url, t68 == null ? null : dart.toString(t68)), "isAsync", this.isAsync, "user", this.user, "password", this.password, "withCredentials", this.withCredentials, "headers", (t68$ = this.headers, t68$ == null ? null : t68$.toMap()), "readyState", (t68$0 = this.readyState, t68$0 == null ? null : t68$0.toValue()), "status", this.status, "responseURL", (t68$1 = this.responseURL, t68$1 == null ? null : dart.toString(t68$1)), "responseType", this.responseType, "response", this.response, "responseText", this.responseText, "responseXML", this.responseXML, "statusText", this.statusText, "responseHeaders", this.responseHeaders, "action", (t68$2 = this.action, t68$2 == null ? null : t68$2.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AjaxRequest.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let isAsync = opts && 'isAsync' in opts ? opts.isAsync : null;
    let user = opts && 'user' in opts ? opts.user : null;
    let password = opts && 'password' in opts ? opts.password : null;
    let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let readyState = opts && 'readyState' in opts ? opts.readyState : null;
    let status = opts && 'status' in opts ? opts.status : null;
    let responseURL = opts && 'responseURL' in opts ? opts.responseURL : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let response = opts && 'response' in opts ? opts.response : null;
    let responseText = opts && 'responseText' in opts ? opts.responseText : null;
    let responseXML = opts && 'responseXML' in opts ? opts.responseXML : null;
    let statusText = opts && 'statusText' in opts ? opts.statusText : null;
    let responseHeaders = opts && 'responseHeaders' in opts ? opts.responseHeaders : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let action = opts && 'action' in opts ? opts.action : C[144] || CT.C144;
    this[S$.data$4] = data;
    this[S$.method$1] = method;
    this[S$.url$8] = url;
    this[S$.isAsync] = isAsync;
    this[S$.user] = user;
    this[S$.password$2] = password;
    this[S$.withCredentials] = withCredentials;
    this[S$.headers$2] = headers;
    this[S$.readyState] = readyState;
    this[S$.status] = status;
    this[S$.responseURL] = responseURL;
    this[S$.responseType] = responseType;
    this[S$.response] = response;
    this[S$.responseText] = responseText;
    this[S$.responseXML] = responseXML;
    this[S$.statusText] = statusText;
    this[S$.responseHeaders] = responseHeaders;
    this[S$.event] = event;
    this[S$.action$10] = action;
    ;
  }).prototype = types.AjaxRequest.prototype;
  dart.addTypeTests(types.AjaxRequest);
  dart.addTypeCaches(types.AjaxRequest);
  dart.setMethodSignature(types.AjaxRequest, () => ({
    __proto__: dart.getMethods(types.AjaxRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.AjaxRequest, I[53]);
  dart.setFieldSignature(types.AjaxRequest, () => ({
    __proto__: dart.getFields(types.AjaxRequest.__proto__),
    data: dart.fieldType(dart.dynamic),
    method: dart.fieldType(dart.nullable(core.String)),
    url: dart.fieldType(dart.nullable(core.Uri)),
    isAsync: dart.fieldType(dart.nullable(core.bool)),
    user: dart.fieldType(dart.nullable(core.String)),
    password: dart.fieldType(dart.nullable(core.String)),
    withCredentials: dart.fieldType(dart.nullable(core.bool)),
    headers: dart.fieldType(dart.nullable(types.AjaxRequestHeaders)),
    readyState: dart.fieldType(dart.nullable(types.AjaxRequestReadyState)),
    status: dart.fieldType(dart.nullable(core.int)),
    responseURL: dart.fieldType(dart.nullable(core.Uri)),
    responseType: dart.fieldType(dart.nullable(core.String)),
    response: dart.fieldType(dart.dynamic),
    responseText: dart.fieldType(dart.nullable(core.String)),
    responseXML: dart.fieldType(dart.nullable(core.String)),
    statusText: dart.fieldType(dart.nullable(core.String)),
    responseHeaders: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    event: dart.fieldType(dart.nullable(types.AjaxRequestEvent)),
    action: dart.fieldType(dart.nullable(types.AjaxRequestAction))
  }));
  dart.defineExtensionMethods(types.AjaxRequest, ['toString']);
  types.FetchRequestAction = class FetchRequestAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$29];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.FetchRequestAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3038, 43, "_value");
    this[S$._value$29] = _value;
    ;
  }).prototype = types.FetchRequestAction.prototype;
  dart.addTypeTests(types.FetchRequestAction);
  dart.addTypeCaches(types.FetchRequestAction);
  dart.setMethodSignature(types.FetchRequestAction, () => ({
    __proto__: dart.getMethods(types.FetchRequestAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.FetchRequestAction, I[53]);
  dart.setFieldSignature(types.FetchRequestAction, () => ({
    __proto__: dart.getFields(types.FetchRequestAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.FetchRequestAction, ['_equals']);
  dart.defineExtensionAccessors(types.FetchRequestAction, ['hashCode']);
  dart.defineLazy(types.FetchRequestAction, {
    /*types.FetchRequestAction.ABORT*/get ABORT() {
      return C[157] || CT.C157;
    },
    /*types.FetchRequestAction.PROCEED*/get PROCEED() {
      return C[158] || CT.C158;
    }
  }, false);
  types.FetchRequestCredential = class FetchRequestCredential extends core.Object {
    get type() {
      return this[S$.type$1];
    }
    set type(value) {
      this[S$.type$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["type", this.type]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.FetchRequestCredential.new({type: T.StringN().as(map[S.$_get]("type"))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestCredential.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    this[S$.type$1] = type;
    ;
  }).prototype = types.FetchRequestCredential.prototype;
  dart.addTypeTests(types.FetchRequestCredential);
  dart.addTypeCaches(types.FetchRequestCredential);
  dart.setMethodSignature(types.FetchRequestCredential, () => ({
    __proto__: dart.getMethods(types.FetchRequestCredential.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.FetchRequestCredential, I[53]);
  dart.setFieldSignature(types.FetchRequestCredential, () => ({
    __proto__: dart.getFields(types.FetchRequestCredential.__proto__),
    type: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.FetchRequestCredential, ['toString']);
  types.FetchRequestCredentialDefault = class FetchRequestCredentialDefault extends types.FetchRequestCredential {
    get value() {
      return this[S$.value$2];
    }
    set value(value) {
      this[S$.value$2] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["type", this.type, "value", this.value]);
    }
    static fromMap(credentialsMap) {
      if (credentialsMap == null) {
        return null;
      }
      return new types.FetchRequestCredentialDefault.new({type: credentialsMap[S.$_get]("type"), value: T.StringN().as(credentialsMap[S.$_get]("value"))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestCredentialDefault.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[S$.value$2] = value;
    types.FetchRequestCredentialDefault.__proto__.new.call(this, {type: T.StringN().as(type)});
    ;
  }).prototype = types.FetchRequestCredentialDefault.prototype;
  dart.addTypeTests(types.FetchRequestCredentialDefault);
  dart.addTypeCaches(types.FetchRequestCredentialDefault);
  dart.setLibraryUri(types.FetchRequestCredentialDefault, I[53]);
  dart.setFieldSignature(types.FetchRequestCredentialDefault, () => ({
    __proto__: dart.getFields(types.FetchRequestCredentialDefault.__proto__),
    value: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.FetchRequestCredentialDefault, ['toString']);
  types.FetchRequestFederatedCredential = class FetchRequestFederatedCredential extends types.FetchRequestCredential {
    get id() {
      return this[S$.id$2];
    }
    set id(value) {
      this[S$.id$2] = value;
    }
    get name() {
      return this[S$.name];
    }
    set name(value) {
      this[S$.name] = value;
    }
    get protocol() {
      return this[S$.protocol$1];
    }
    set protocol(value) {
      this[S$.protocol$1] = value;
    }
    get provider() {
      return this[S$.provider];
    }
    set provider(value) {
      this[S$.provider] = value;
    }
    get iconURL() {
      return this[S$.iconURL];
    }
    set iconURL(value) {
      this[S$.iconURL] = value;
    }
    static fromMap(credentialsMap) {
      if (credentialsMap == null) {
        return null;
      }
      return new types.FetchRequestFederatedCredential.new({type: credentialsMap[S.$_get]("type"), id: credentialsMap[S.$_get]("id"), name: T.StringN().as(credentialsMap[S.$_get]("name")), protocol: T.StringN().as(credentialsMap[S.$_get]("protocol")), provider: T.StringN().as(credentialsMap[S.$_get]("provider")), iconURL: credentialsMap[S.$_get]("iconURL") != null ? core.Uri.parse(core.String.as(credentialsMap[S.$_get]("iconURL"))) : null});
    }
    toMap() {
      let t68;
      return new (T.IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "protocol", this.protocol, "provider", this.provider, "iconURL", (t68 = this.iconURL, t68 == null ? null : dart.toString(t68))]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestFederatedCredential.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let provider = opts && 'provider' in opts ? opts.provider : null;
    let iconURL = opts && 'iconURL' in opts ? opts.iconURL : null;
    this[S$.id$2] = id;
    this[S$.name] = name;
    this[S$.protocol$1] = protocol;
    this[S$.provider] = provider;
    this[S$.iconURL] = iconURL;
    types.FetchRequestFederatedCredential.__proto__.new.call(this, {type: T.StringN().as(type)});
    ;
  }).prototype = types.FetchRequestFederatedCredential.prototype;
  dart.addTypeTests(types.FetchRequestFederatedCredential);
  dart.addTypeCaches(types.FetchRequestFederatedCredential);
  dart.setLibraryUri(types.FetchRequestFederatedCredential, I[53]);
  dart.setFieldSignature(types.FetchRequestFederatedCredential, () => ({
    __proto__: dart.getFields(types.FetchRequestFederatedCredential.__proto__),
    id: dart.fieldType(dart.dynamic),
    name: dart.fieldType(dart.nullable(core.String)),
    protocol: dart.fieldType(dart.nullable(core.String)),
    provider: dart.fieldType(dart.nullable(core.String)),
    iconURL: dart.fieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(types.FetchRequestFederatedCredential, ['toString']);
  types.FetchRequestPasswordCredential = class FetchRequestPasswordCredential extends types.FetchRequestCredential {
    get id() {
      return this[S$.id$3];
    }
    set id(value) {
      this[S$.id$3] = value;
    }
    get name() {
      return this[S$.name$1];
    }
    set name(value) {
      this[S$.name$1] = value;
    }
    get password() {
      return this[S$.password$3];
    }
    set password(value) {
      this[S$.password$3] = value;
    }
    get iconURL() {
      return this[S$.iconURL$1];
    }
    set iconURL(value) {
      this[S$.iconURL$1] = value;
    }
    static fromMap(credentialsMap) {
      if (credentialsMap == null) {
        return null;
      }
      return new types.FetchRequestPasswordCredential.new({type: credentialsMap[S.$_get]("type"), id: credentialsMap[S.$_get]("id"), name: T.StringN().as(credentialsMap[S.$_get]("name")), password: T.StringN().as(credentialsMap[S.$_get]("password")), iconURL: credentialsMap[S.$_get]("iconURL") != null ? core.Uri.parse(core.String.as(credentialsMap[S.$_get]("iconURL"))) : null});
    }
    toMap() {
      let t68;
      return new (T.IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "password", this.password, "iconURL", (t68 = this.iconURL, t68 == null ? null : dart.toString(t68))]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequestPasswordCredential.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let password = opts && 'password' in opts ? opts.password : null;
    let iconURL = opts && 'iconURL' in opts ? opts.iconURL : null;
    this[S$.id$3] = id;
    this[S$.name$1] = name;
    this[S$.password$3] = password;
    this[S$.iconURL$1] = iconURL;
    types.FetchRequestPasswordCredential.__proto__.new.call(this, {type: T.StringN().as(type)});
    ;
  }).prototype = types.FetchRequestPasswordCredential.prototype;
  dart.addTypeTests(types.FetchRequestPasswordCredential);
  dart.addTypeCaches(types.FetchRequestPasswordCredential);
  dart.setLibraryUri(types.FetchRequestPasswordCredential, I[53]);
  dart.setFieldSignature(types.FetchRequestPasswordCredential, () => ({
    __proto__: dart.getFields(types.FetchRequestPasswordCredential.__proto__),
    id: dart.fieldType(dart.dynamic),
    name: dart.fieldType(dart.nullable(core.String)),
    password: dart.fieldType(dart.nullable(core.String)),
    iconURL: dart.fieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(types.FetchRequestPasswordCredential, ['toString']);
  types.FetchRequest = class FetchRequest extends core.Object {
    get url() {
      return this[S$.url$9];
    }
    set url(value) {
      this[S$.url$9] = value;
    }
    get method() {
      return this[S$.method$2];
    }
    set method(value) {
      this[S$.method$2] = value;
    }
    get headers() {
      return this[S$.headers$3];
    }
    set headers(value) {
      this[S$.headers$3] = value;
    }
    get body() {
      return this[S$.body];
    }
    set body(value) {
      this[S$.body] = value;
    }
    get mode() {
      return this[S$.mode];
    }
    set mode(value) {
      this[S$.mode] = value;
    }
    get credentials() {
      return this[S$.credentials$1];
    }
    set credentials(value) {
      this[S$.credentials$1] = value;
    }
    get cache() {
      return this[S$.cache];
    }
    set cache(value) {
      this[S$.cache] = value;
    }
    get redirect() {
      return this[S$.redirect];
    }
    set redirect(value) {
      this[S$.redirect] = value;
    }
    get referrer() {
      return this[S$.referrer];
    }
    set referrer(value) {
      this[S$.referrer] = value;
    }
    get referrerPolicy() {
      return this[S$.referrerPolicy];
    }
    set referrerPolicy(value) {
      this[S$.referrerPolicy] = value;
    }
    get integrity() {
      return this[S$.integrity];
    }
    set integrity(value) {
      this[S$.integrity] = value;
    }
    get keepalive() {
      return this[S$.keepalive];
    }
    set keepalive(value) {
      this[S$.keepalive] = value;
    }
    get action() {
      return this[S$.action$11];
    }
    set action(value) {
      this[S$.action$11] = value;
    }
    static fromMap(map) {
      let t68, t68$;
      if (map == null) {
        return null;
      }
      let credentialMap = T.MapNOfString$dynamic().as((t68 = map[S.$_get]("credentials"), t68 == null ? null : dart.dgsend(t68, [core.String, dart.dynamic], 'cast', [])));
      let credentials = null;
      if (credentialMap != null) {
        if (dart.equals(credentialMap[S.$_get]("type"), "default")) {
          credentials = types.FetchRequestCredentialDefault.fromMap(credentialMap);
        } else if (dart.equals(credentialMap[S.$_get]("type"), "federated")) {
          credentials = types.FetchRequestFederatedCredential.fromMap(credentialMap);
        } else if (dart.equals(credentialMap[S.$_get]("type"), "password")) {
          credentials = types.FetchRequestPasswordCredential.fromMap(credentialMap);
        }
      }
      return new types.FetchRequest.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, method: T.StringN().as(map[S.$_get]("method")), headers: T.MapNOfString$dynamic().as((t68$ = map[S.$_get]("headers"), t68$ == null ? null : dart.dgsend(t68$, [core.String, dart.dynamic], 'cast', []))), body: map[S.$_get]("body"), mode: T.StringN().as(map[S.$_get]("mode")), credentials: credentials, cache: T.StringN().as(map[S.$_get]("cache")), redirect: T.StringN().as(map[S.$_get]("redirect")), referrer: T.StringN().as(map[S.$_get]("referrer")), referrerPolicy: types.ReferrerPolicy.fromValue(T.StringN().as(map[S.$_get]("referrerPolicy"))), integrity: T.StringN().as(map[S.$_get]("integrity")), keepalive: T.boolN().as(map[S.$_get]("keepalive"))});
    }
    toMap() {
      let t68, t68$, t68$0, t68$1;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t68 = this.url, t68 == null ? null : dart.toString(t68)), "method", this.method, "headers", this.headers, "body", this.body, "mode", this.mode, "credentials", (t68$ = this.credentials, t68$ == null ? null : t68$.toMap()), "cache", this.cache, "redirect", this.redirect, "referrer", this.referrer, "referrerPolicy", (t68$0 = this.referrerPolicy, t68$0 == null ? null : t68$0.toValue()), "integrity", this.integrity, "keepalive", this.keepalive, "action", (t68$1 = this.action, t68$1 == null ? null : t68$1.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FetchRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let mode = opts && 'mode' in opts ? opts.mode : null;
    let credentials = opts && 'credentials' in opts ? opts.credentials : null;
    let cache = opts && 'cache' in opts ? opts.cache : null;
    let redirect = opts && 'redirect' in opts ? opts.redirect : null;
    let referrer = opts && 'referrer' in opts ? opts.referrer : null;
    let referrerPolicy = opts && 'referrerPolicy' in opts ? opts.referrerPolicy : null;
    let integrity = opts && 'integrity' in opts ? opts.integrity : null;
    let keepalive = opts && 'keepalive' in opts ? opts.keepalive : null;
    let action = opts && 'action' in opts ? opts.action : C[158] || CT.C158;
    this[S$.url$9] = url;
    this[S$.method$2] = method;
    this[S$.headers$3] = headers;
    this[S$.body] = body;
    this[S$.mode] = mode;
    this[S$.credentials$1] = credentials;
    this[S$.cache] = cache;
    this[S$.redirect] = redirect;
    this[S$.referrer] = referrer;
    this[S$.referrerPolicy] = referrerPolicy;
    this[S$.integrity] = integrity;
    this[S$.keepalive] = keepalive;
    this[S$.action$11] = action;
    ;
  }).prototype = types.FetchRequest.prototype;
  dart.addTypeTests(types.FetchRequest);
  dart.addTypeCaches(types.FetchRequest);
  dart.setMethodSignature(types.FetchRequest, () => ({
    __proto__: dart.getMethods(types.FetchRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.FetchRequest, I[53]);
  dart.setFieldSignature(types.FetchRequest, () => ({
    __proto__: dart.getFields(types.FetchRequest.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    method: dart.fieldType(dart.nullable(core.String)),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    body: dart.fieldType(dart.dynamic),
    mode: dart.fieldType(dart.nullable(core.String)),
    credentials: dart.fieldType(dart.nullable(types.FetchRequestCredential)),
    cache: dart.fieldType(dart.nullable(core.String)),
    redirect: dart.fieldType(dart.nullable(core.String)),
    referrer: dart.fieldType(dart.nullable(core.String)),
    referrerPolicy: dart.fieldType(dart.nullable(types.ReferrerPolicy)),
    integrity: dart.fieldType(dart.nullable(core.String)),
    keepalive: dart.fieldType(dart.nullable(core.bool)),
    action: dart.fieldType(dart.nullable(types.FetchRequestAction))
  }));
  dart.defineExtensionMethods(types.FetchRequest, ['toString']);
  types.ContentBlockerTriggerResourceType = class ContentBlockerTriggerResourceType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$30];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.ContentBlockerTriggerResourceType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 3364, 26, "element");
            return element.toValue() == value;
          }, T.ContentBlockerTriggerResourceTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ContentBlockerTriggerResourceType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3347, 58, "_value");
    this[S$._value$30] = _value;
    ;
  }).prototype = types.ContentBlockerTriggerResourceType.prototype;
  dart.addTypeTests(types.ContentBlockerTriggerResourceType);
  dart.addTypeCaches(types.ContentBlockerTriggerResourceType);
  dart.setMethodSignature(types.ContentBlockerTriggerResourceType, () => ({
    __proto__: dart.getMethods(types.ContentBlockerTriggerResourceType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.ContentBlockerTriggerResourceType, I[53]);
  dart.setFieldSignature(types.ContentBlockerTriggerResourceType, () => ({
    __proto__: dart.getFields(types.ContentBlockerTriggerResourceType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.ContentBlockerTriggerResourceType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ContentBlockerTriggerResourceType, ['hashCode']);
  dart.defineLazy(types.ContentBlockerTriggerResourceType, {
    /*types.ContentBlockerTriggerResourceType.values*/get values() {
      return T.JSArrayOfContentBlockerTriggerResourceType().of([types.ContentBlockerTriggerResourceType.DOCUMENT, types.ContentBlockerTriggerResourceType.IMAGE, types.ContentBlockerTriggerResourceType.STYLE_SHEET, types.ContentBlockerTriggerResourceType.SCRIPT, types.ContentBlockerTriggerResourceType.FONT, types.ContentBlockerTriggerResourceType.MEDIA, types.ContentBlockerTriggerResourceType.SVG_DOCUMENT, types.ContentBlockerTriggerResourceType.RAW])[S.$toSet]();
    },
    /*types.ContentBlockerTriggerResourceType.DOCUMENT*/get DOCUMENT() {
      return C[159] || CT.C159;
    },
    /*types.ContentBlockerTriggerResourceType.IMAGE*/get IMAGE() {
      return C[160] || CT.C160;
    },
    /*types.ContentBlockerTriggerResourceType.STYLE_SHEET*/get STYLE_SHEET() {
      return C[161] || CT.C161;
    },
    /*types.ContentBlockerTriggerResourceType.SCRIPT*/get SCRIPT() {
      return C[162] || CT.C162;
    },
    /*types.ContentBlockerTriggerResourceType.FONT*/get FONT() {
      return C[163] || CT.C163;
    },
    /*types.ContentBlockerTriggerResourceType.MEDIA*/get MEDIA() {
      return C[164] || CT.C164;
    },
    /*types.ContentBlockerTriggerResourceType.SVG_DOCUMENT*/get SVG_DOCUMENT() {
      return C[165] || CT.C165;
    },
    /*types.ContentBlockerTriggerResourceType.RAW*/get RAW() {
      return C[166] || CT.C166;
    }
  }, false);
  types.ContentBlockerTriggerLoadType = class ContentBlockerTriggerLoadType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$31];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.ContentBlockerTriggerLoadType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 3415, 26, "element");
            return element.toValue() == value;
          }, T.ContentBlockerTriggerLoadTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ContentBlockerTriggerLoadType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3404, 54, "_value");
    this[S$._value$31] = _value;
    ;
  }).prototype = types.ContentBlockerTriggerLoadType.prototype;
  dart.addTypeTests(types.ContentBlockerTriggerLoadType);
  dart.addTypeCaches(types.ContentBlockerTriggerLoadType);
  dart.setMethodSignature(types.ContentBlockerTriggerLoadType, () => ({
    __proto__: dart.getMethods(types.ContentBlockerTriggerLoadType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.ContentBlockerTriggerLoadType, I[53]);
  dart.setFieldSignature(types.ContentBlockerTriggerLoadType, () => ({
    __proto__: dart.getFields(types.ContentBlockerTriggerLoadType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.ContentBlockerTriggerLoadType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ContentBlockerTriggerLoadType, ['hashCode']);
  dart.defineLazy(types.ContentBlockerTriggerLoadType, {
    /*types.ContentBlockerTriggerLoadType.values*/get values() {
      return T.JSArrayOfContentBlockerTriggerLoadType().of([types.ContentBlockerTriggerLoadType.FIRST_PARTY, types.ContentBlockerTriggerLoadType.THIRD_PARTY])[S.$toSet]();
    },
    /*types.ContentBlockerTriggerLoadType.FIRST_PARTY*/get FIRST_PARTY() {
      return C[167] || CT.C167;
    },
    /*types.ContentBlockerTriggerLoadType.THIRD_PARTY*/get THIRD_PARTY() {
      return C[168] || CT.C168;
    }
  }, false);
  types.ContentBlockerActionType = class ContentBlockerActionType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$32];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.ContentBlockerActionType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 3458, 26, "element");
            return element.toValue() == value;
          }, T.ContentBlockerActionTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ContentBlockerActionType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3446, 49, "_value");
    this[S$._value$32] = _value;
    ;
  }).prototype = types.ContentBlockerActionType.prototype;
  dart.addTypeTests(types.ContentBlockerActionType);
  dart.addTypeCaches(types.ContentBlockerActionType);
  dart.setMethodSignature(types.ContentBlockerActionType, () => ({
    __proto__: dart.getMethods(types.ContentBlockerActionType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.ContentBlockerActionType, I[53]);
  dart.setFieldSignature(types.ContentBlockerActionType, () => ({
    __proto__: dart.getFields(types.ContentBlockerActionType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.ContentBlockerActionType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ContentBlockerActionType, ['hashCode']);
  dart.defineLazy(types.ContentBlockerActionType, {
    /*types.ContentBlockerActionType.values*/get values() {
      return T.JSArrayOfContentBlockerActionType().of([types.ContentBlockerActionType.BLOCK, types.ContentBlockerActionType.CSS_DISPLAY_NONE, types.ContentBlockerActionType.MAKE_HTTPS])[S.$toSet]();
    },
    /*types.ContentBlockerActionType.BLOCK*/get BLOCK() {
      return C[169] || CT.C169;
    },
    /*types.ContentBlockerActionType.CSS_DISPLAY_NONE*/get CSS_DISPLAY_NONE() {
      return C[170] || CT.C170;
    },
    /*types.ContentBlockerActionType.MAKE_HTTPS*/get MAKE_HTTPS() {
      return C[171] || CT.C171;
    }
  }, false);
  types.Cookie = class Cookie extends core.Object {
    get name() {
      return this[S$.name$2];
    }
    set name(value) {
      this[S$.name$2] = value;
    }
    get value() {
      return this[S$.value$3];
    }
    set value(value) {
      this[S$.value$3] = value;
    }
    get expiresDate() {
      return this[S$.expiresDate];
    }
    set expiresDate(value) {
      this[S$.expiresDate] = value;
    }
    get isSessionOnly() {
      return this[S$.isSessionOnly];
    }
    set isSessionOnly(value) {
      this[S$.isSessionOnly] = value;
    }
    get domain() {
      return this[S$.domain];
    }
    set domain(value) {
      this[S$.domain] = value;
    }
    get sameSite() {
      return this[S$.sameSite];
    }
    set sameSite(value) {
      this[S$.sameSite] = value;
    }
    get isSecure() {
      return this[S$.isSecure];
    }
    set isSecure(value) {
      this[S$.isSecure] = value;
    }
    get isHttpOnly() {
      return this[S$.isHttpOnly];
    }
    set isHttpOnly(value) {
      this[S$.isHttpOnly] = value;
    }
    get path() {
      return this[S$.path];
    }
    set path(value) {
      this[S$.path] = value;
    }
    toMap() {
      let t71;
      return new (T.IdentityMapOfString$dynamic()).from(["name", this.name, "value", this.value, "expiresDate", this.expiresDate, "isSessionOnly", this.isSessionOnly, "domain", this.domain, "sameSite", (t71 = this.sameSite, t71 == null ? null : t71.toValue()), "isSecure", this.isSecure, "isHttpOnly", this.isHttpOnly, "path", this.path]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.Cookie.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[52], 3534, 22, "name");
    let value = opts && 'value' in opts ? opts.value : null;
    let expiresDate = opts && 'expiresDate' in opts ? opts.expiresDate : null;
    let isSessionOnly = opts && 'isSessionOnly' in opts ? opts.isSessionOnly : null;
    let domain = opts && 'domain' in opts ? opts.domain : null;
    let sameSite = opts && 'sameSite' in opts ? opts.sameSite : null;
    let isSecure = opts && 'isSecure' in opts ? opts.isSecure : null;
    let isHttpOnly = opts && 'isHttpOnly' in opts ? opts.isHttpOnly : null;
    let path = opts && 'path' in opts ? opts.path : null;
    this[S$.name$2] = name;
    this[S$.value$3] = value;
    this[S$.expiresDate] = expiresDate;
    this[S$.isSessionOnly] = isSessionOnly;
    this[S$.domain] = domain;
    this[S$.sameSite] = sameSite;
    this[S$.isSecure] = isSecure;
    this[S$.isHttpOnly] = isHttpOnly;
    this[S$.path] = path;
    ;
  }).prototype = types.Cookie.prototype;
  dart.addTypeTests(types.Cookie);
  dart.addTypeCaches(types.Cookie);
  dart.setMethodSignature(types.Cookie, () => ({
    __proto__: dart.getMethods(types.Cookie.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.Cookie, I[53]);
  dart.setFieldSignature(types.Cookie, () => ({
    __proto__: dart.getFields(types.Cookie.__proto__),
    name: dart.fieldType(core.String),
    value: dart.fieldType(dart.dynamic),
    expiresDate: dart.fieldType(dart.nullable(core.int)),
    isSessionOnly: dart.fieldType(dart.nullable(core.bool)),
    domain: dart.fieldType(dart.nullable(core.String)),
    sameSite: dart.fieldType(dart.nullable(types.HTTPCookieSameSitePolicy)),
    isSecure: dart.fieldType(dart.nullable(core.bool)),
    isHttpOnly: dart.fieldType(dart.nullable(core.bool)),
    path: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.Cookie, ['toString']);
  types.PermissionRequestResponseAction = class PermissionRequestResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$33];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.PermissionRequestResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3572, 56, "_value");
    this[S$._value$33] = _value;
    ;
  }).prototype = types.PermissionRequestResponseAction.prototype;
  dart.addTypeTests(types.PermissionRequestResponseAction);
  dart.addTypeCaches(types.PermissionRequestResponseAction);
  dart.setMethodSignature(types.PermissionRequestResponseAction, () => ({
    __proto__: dart.getMethods(types.PermissionRequestResponseAction.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.PermissionRequestResponseAction, I[53]);
  dart.setFieldSignature(types.PermissionRequestResponseAction, () => ({
    __proto__: dart.getFields(types.PermissionRequestResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.PermissionRequestResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.PermissionRequestResponseAction, ['hashCode']);
  dart.defineLazy(types.PermissionRequestResponseAction, {
    /*types.PermissionRequestResponseAction.DENY*/get DENY() {
      return C[172] || CT.C172;
    },
    /*types.PermissionRequestResponseAction.GRANT*/get GRANT() {
      return C[173] || CT.C173;
    }
  }, false);
  types.PermissionRequestResponse = class PermissionRequestResponse extends core.Object {
    get resources() {
      return this[S$.resources];
    }
    set resources(value) {
      this[S$.resources] = value;
    }
    get action() {
      return this[S$.action$12];
    }
    set action(value) {
      this[S$.action$12] = value;
    }
    toMap() {
      let t71;
      return new (T.IdentityMapOfString$dynamic()).from(["resources", this.resources, "action", (t71 = this.action, t71 == null ? null : t71.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.PermissionRequestResponse.new = function(opts) {
    let resources = opts && 'resources' in opts ? opts.resources : C[44] || CT.C44;
    if (resources == null) dart.nullFailed(I[52], 3597, 13, "resources");
    let action = opts && 'action' in opts ? opts.action : C[172] || CT.C172;
    this[S$.resources] = resources;
    this[S$.action$12] = action;
    ;
  }).prototype = types.PermissionRequestResponse.prototype;
  dart.addTypeTests(types.PermissionRequestResponse);
  dart.addTypeCaches(types.PermissionRequestResponse);
  dart.setMethodSignature(types.PermissionRequestResponse, () => ({
    __proto__: dart.getMethods(types.PermissionRequestResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.PermissionRequestResponse, I[53]);
  dart.setFieldSignature(types.PermissionRequestResponse, () => ({
    __proto__: dart.getFields(types.PermissionRequestResponse.__proto__),
    resources: dart.fieldType(core.List$(core.String)),
    action: dart.fieldType(dart.nullable(types.PermissionRequestResponseAction))
  }));
  dart.defineExtensionMethods(types.PermissionRequestResponse, ['toString']);
  types.NavigationActionPolicy = class NavigationActionPolicy extends core.Object {
    get [S._value$1]() {
      return this[S$._value$34];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["action", this[S._value$1]]);
    }
  };
  (types.NavigationActionPolicy._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3619, 47, "_value");
    this[S$._value$34] = _value;
    ;
  }).prototype = types.NavigationActionPolicy.prototype;
  dart.addTypeTests(types.NavigationActionPolicy);
  dart.addTypeCaches(types.NavigationActionPolicy);
  dart.setMethodSignature(types.NavigationActionPolicy, () => ({
    __proto__: dart.getMethods(types.NavigationActionPolicy.__proto__),
    toValue: dart.fnType(core.int, []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.NavigationActionPolicy, I[53]);
  dart.setFieldSignature(types.NavigationActionPolicy, () => ({
    __proto__: dart.getFields(types.NavigationActionPolicy.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.NavigationActionPolicy, ['_equals']);
  dart.defineExtensionAccessors(types.NavigationActionPolicy, ['hashCode']);
  dart.defineLazy(types.NavigationActionPolicy, {
    /*types.NavigationActionPolicy.CANCEL*/get CANCEL() {
      return C[174] || CT.C174;
    },
    /*types.NavigationActionPolicy.ALLOW*/get ALLOW() {
      return C[175] || CT.C175;
    }
  }, false);
  types.IOSWKNavigationType = class IOSWKNavigationType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$35];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSWKNavigationType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 3660, 26, "element");
            return element.toValue() == value;
          }, T.IOSWKNavigationTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toString() {
      switch (this[S._value$1]) {
        case 0:
        {
          return "LINK_ACTIVATED";
        }
        case 1:
        {
          return "FORM_SUBMITTED";
        }
        case 2:
        {
          return "BACK_FORWARD";
        }
        case 3:
        {
          return "RELOAD";
        }
        case 4:
        {
          return "FORM_RESUBMITTED";
        }
        case -1:
        default:
        {
          return "OTHER";
        }
      }
    }
  };
  (types.IOSWKNavigationType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3645, 44, "_value");
    this[S$._value$35] = _value;
    ;
  }).prototype = types.IOSWKNavigationType.prototype;
  dart.addTypeTests(types.IOSWKNavigationType);
  dart.addTypeCaches(types.IOSWKNavigationType);
  dart.setMethodSignature(types.IOSWKNavigationType, () => ({
    __proto__: dart.getMethods(types.IOSWKNavigationType.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSWKNavigationType, I[53]);
  dart.setFieldSignature(types.IOSWKNavigationType, () => ({
    __proto__: dart.getFields(types.IOSWKNavigationType.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSWKNavigationType, ['_equals', 'toString']);
  dart.defineExtensionAccessors(types.IOSWKNavigationType, ['hashCode']);
  dart.defineLazy(types.IOSWKNavigationType, {
    /*types.IOSWKNavigationType.values*/get values() {
      return T.JSArrayOfIOSWKNavigationType().of([types.IOSWKNavigationType.LINK_ACTIVATED, types.IOSWKNavigationType.FORM_SUBMITTED, types.IOSWKNavigationType.BACK_FORWARD, types.IOSWKNavigationType.RELOAD, types.IOSWKNavigationType.FORM_RESUBMITTED, types.IOSWKNavigationType.OTHER])[S.$toSet]();
    },
    /*types.IOSWKNavigationType.LINK_ACTIVATED*/get LINK_ACTIVATED() {
      return C[176] || CT.C176;
    },
    /*types.IOSWKNavigationType.FORM_SUBMITTED*/get FORM_SUBMITTED() {
      return C[177] || CT.C177;
    },
    /*types.IOSWKNavigationType.BACK_FORWARD*/get BACK_FORWARD() {
      return C[178] || CT.C178;
    },
    /*types.IOSWKNavigationType.RELOAD*/get RELOAD() {
      return C[179] || CT.C179;
    },
    /*types.IOSWKNavigationType.FORM_RESUBMITTED*/get FORM_RESUBMITTED() {
      return C[180] || CT.C180;
    },
    /*types.IOSWKNavigationType.OTHER*/get OTHER() {
      return C[181] || CT.C181;
    }
  }, false);
  types.IOSURLRequestCachePolicy = class IOSURLRequestCachePolicy extends core.Object {
    get [S._value$1]() {
      return this[S$._value$36];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSURLRequestCachePolicy.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 3732, 26, "element");
            return element.toValue() == value;
          }, T.IOSURLRequestCachePolicyTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "RELOAD_IGNORING_LOCAL_CACHE_DATA";
        }
        case 2:
        {
          return "RETURN_CACHE_DATA_ELSE_LOAD";
        }
        case 3:
        {
          return "RETURN_CACHE_DATA_DONT_LOAD";
        }
        case 4:
        {
          return "RELOAD_IGNORING_LOCAL_AND_REMOTE_CACHE_DATA";
        }
        case 5:
        {
          return "RELOAD_REVALIDATING_CACHE_DATA";
        }
        case 0:
        default:
        {
          return "USE_PROTOCOL_CACHE_POLICY";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSURLRequestCachePolicy._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3717, 49, "_value");
    this[S$._value$36] = _value;
    ;
  }).prototype = types.IOSURLRequestCachePolicy.prototype;
  dart.addTypeTests(types.IOSURLRequestCachePolicy);
  dart.addTypeCaches(types.IOSURLRequestCachePolicy);
  dart.setMethodSignature(types.IOSURLRequestCachePolicy, () => ({
    __proto__: dart.getMethods(types.IOSURLRequestCachePolicy.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSURLRequestCachePolicy, I[53]);
  dart.setFieldSignature(types.IOSURLRequestCachePolicy, () => ({
    __proto__: dart.getFields(types.IOSURLRequestCachePolicy.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSURLRequestCachePolicy, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSURLRequestCachePolicy, ['hashCode']);
  dart.defineLazy(types.IOSURLRequestCachePolicy, {
    /*types.IOSURLRequestCachePolicy.values*/get values() {
      return T.JSArrayOfIOSURLRequestCachePolicy().of([types.IOSURLRequestCachePolicy.USE_PROTOCOL_CACHE_POLICY, types.IOSURLRequestCachePolicy.RELOAD_IGNORING_LOCAL_CACHE_DATA, types.IOSURLRequestCachePolicy.RELOAD_IGNORING_LOCAL_AND_REMOTE_CACHE_DATA, types.IOSURLRequestCachePolicy.RETURN_CACHE_DATA_ELSE_LOAD, types.IOSURLRequestCachePolicy.RETURN_CACHE_DATA_DONT_LOAD, types.IOSURLRequestCachePolicy.RELOAD_REVALIDATING_CACHE_DATA])[S.$toSet]();
    },
    /*types.IOSURLRequestCachePolicy.USE_PROTOCOL_CACHE_POLICY*/get USE_PROTOCOL_CACHE_POLICY() {
      return C[182] || CT.C182;
    },
    /*types.IOSURLRequestCachePolicy.RELOAD_IGNORING_LOCAL_CACHE_DATA*/get RELOAD_IGNORING_LOCAL_CACHE_DATA() {
      return C[183] || CT.C183;
    },
    /*types.IOSURLRequestCachePolicy.RETURN_CACHE_DATA_ELSE_LOAD*/get RETURN_CACHE_DATA_ELSE_LOAD() {
      return C[184] || CT.C184;
    },
    /*types.IOSURLRequestCachePolicy.RETURN_CACHE_DATA_DONT_LOAD*/get RETURN_CACHE_DATA_DONT_LOAD() {
      return C[185] || CT.C185;
    },
    /*types.IOSURLRequestCachePolicy.RELOAD_IGNORING_LOCAL_AND_REMOTE_CACHE_DATA*/get RELOAD_IGNORING_LOCAL_AND_REMOTE_CACHE_DATA() {
      return C[186] || CT.C186;
    },
    /*types.IOSURLRequestCachePolicy.RELOAD_REVALIDATING_CACHE_DATA*/get RELOAD_REVALIDATING_CACHE_DATA() {
      return C[187] || CT.C187;
    }
  }, false);
  types.IOSURLRequestNetworkServiceType = class IOSURLRequestNetworkServiceType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$37];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSURLRequestNetworkServiceType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 3824, 26, "element");
            return element.toValue() == value;
          }, T.IOSURLRequestNetworkServiceTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 2:
        {
          return "VIDEO";
        }
        case 3:
        {
          return "BACKGROUND";
        }
        case 4:
        {
          return "VOICE";
        }
        case 6:
        {
          return "RESPONSIVE_DATA";
        }
        case 8:
        {
          return "AV_STREAMING";
        }
        case 9:
        {
          return "RESPONSIVE_AV";
        }
        case 11:
        {
          return "CALL_SIGNALING";
        }
        case 0:
        default:
        {
          return "DEFAULT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSURLRequestNetworkServiceType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 3807, 56, "_value");
    this[S$._value$37] = _value;
    ;
  }).prototype = types.IOSURLRequestNetworkServiceType.prototype;
  dart.addTypeTests(types.IOSURLRequestNetworkServiceType);
  dart.addTypeCaches(types.IOSURLRequestNetworkServiceType);
  dart.setMethodSignature(types.IOSURLRequestNetworkServiceType, () => ({
    __proto__: dart.getMethods(types.IOSURLRequestNetworkServiceType.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSURLRequestNetworkServiceType, I[53]);
  dart.setFieldSignature(types.IOSURLRequestNetworkServiceType, () => ({
    __proto__: dart.getFields(types.IOSURLRequestNetworkServiceType.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSURLRequestNetworkServiceType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSURLRequestNetworkServiceType, ['hashCode']);
  dart.defineLazy(types.IOSURLRequestNetworkServiceType, {
    /*types.IOSURLRequestNetworkServiceType.values*/get values() {
      return T.JSArrayOfIOSURLRequestNetworkServiceType().of([types.IOSURLRequestNetworkServiceType.DEFAULT, types.IOSURLRequestNetworkServiceType.VIDEO, types.IOSURLRequestNetworkServiceType.BACKGROUND, types.IOSURLRequestNetworkServiceType.VOICE, types.IOSURLRequestNetworkServiceType.RESPONSIVE_DATA, types.IOSURLRequestNetworkServiceType.AV_STREAMING, types.IOSURLRequestNetworkServiceType.RESPONSIVE_AV, types.IOSURLRequestNetworkServiceType.CALL_SIGNALING])[S.$toSet]();
    },
    /*types.IOSURLRequestNetworkServiceType.DEFAULT*/get DEFAULT() {
      return C[188] || CT.C188;
    },
    /*types.IOSURLRequestNetworkServiceType.VIDEO*/get VIDEO() {
      return C[189] || CT.C189;
    },
    /*types.IOSURLRequestNetworkServiceType.BACKGROUND*/get BACKGROUND() {
      return C[190] || CT.C190;
    },
    /*types.IOSURLRequestNetworkServiceType.VOICE*/get VOICE() {
      return C[191] || CT.C191;
    },
    /*types.IOSURLRequestNetworkServiceType.RESPONSIVE_DATA*/get RESPONSIVE_DATA() {
      return C[192] || CT.C192;
    },
    /*types.IOSURLRequestNetworkServiceType.AV_STREAMING*/get AV_STREAMING() {
      return C[193] || CT.C193;
    },
    /*types.IOSURLRequestNetworkServiceType.RESPONSIVE_AV*/get RESPONSIVE_AV() {
      return C[194] || CT.C194;
    },
    /*types.IOSURLRequestNetworkServiceType.CALL_SIGNALING*/get CALL_SIGNALING() {
      return C[195] || CT.C195;
    }
  }, false);
  types.IOSWKSecurityOrigin = class IOSWKSecurityOrigin extends core.Object {
    get host() {
      return this[S$.host$1];
    }
    set host(value) {
      this[S$.host$1] = value;
    }
    get port() {
      return this[S$.port$1];
    }
    set port(value) {
      this[S$.port$1] = value;
    }
    get protocol() {
      return this[S$.protocol$2];
    }
    set protocol(value) {
      this[S$.protocol$2] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.IOSWKSecurityOrigin.new({host: core.String.as(map[S.$_get]("host")), port: core.int.as(map[S.$_get]("port")), protocol: core.String.as(map[S.$_get]("protocol"))});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["host", this.host, "port", this.port, "protocol", this.protocol]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKSecurityOrigin.new = function(opts) {
    let host = opts && 'host' in opts ? opts.host : null;
    if (host == null) dart.nullFailed(I[52], 3912, 22, "host");
    let port = opts && 'port' in opts ? opts.port : null;
    if (port == null) dart.nullFailed(I[52], 3912, 42, "port");
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    if (protocol == null) dart.nullFailed(I[52], 3912, 62, "protocol");
    this[S$.host$1] = host;
    this[S$.port$1] = port;
    this[S$.protocol$2] = protocol;
    ;
  }).prototype = types.IOSWKSecurityOrigin.prototype;
  dart.addTypeTests(types.IOSWKSecurityOrigin);
  dart.addTypeCaches(types.IOSWKSecurityOrigin);
  dart.setMethodSignature(types.IOSWKSecurityOrigin, () => ({
    __proto__: dart.getMethods(types.IOSWKSecurityOrigin.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSWKSecurityOrigin, I[53]);
  dart.setFieldSignature(types.IOSWKSecurityOrigin, () => ({
    __proto__: dart.getFields(types.IOSWKSecurityOrigin.__proto__),
    host: dart.fieldType(core.String),
    port: dart.fieldType(core.int),
    protocol: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSWKSecurityOrigin, ['toString']);
  types.IOSWKFrameInfo = class IOSWKFrameInfo extends core.Object {
    get isMainFrame() {
      return this[S$.isMainFrame];
    }
    set isMainFrame(value) {
      this[S$.isMainFrame] = value;
    }
    get request() {
      return this[S$.request];
    }
    set request(value) {
      this[S$.request] = value;
    }
    get securityOrigin() {
      return this[S$.securityOrigin];
    }
    set securityOrigin(value) {
      this[S$.securityOrigin] = value;
    }
    static fromMap(map) {
      let t74, t74$;
      if (map == null) {
        return null;
      }
      return new types.IOSWKFrameInfo.new({isMainFrame: core.bool.as(map[S.$_get]("isMainFrame")), request: types.URLRequest.fromMap(T.MapNOfString$dynamic().as((t74 = map[S.$_get]("request"), t74 == null ? null : dart.dgsend(t74, [core.String, dart.dynamic], 'cast', [])))), securityOrigin: types.IOSWKSecurityOrigin.fromMap(T.MapNOfString$dynamic().as((t74$ = map[S.$_get]("securityOrigin"), t74$ == null ? null : dart.dgsend(t74$, [core.String, dart.dynamic], 'cast', []))))});
    }
    toMap() {
      let t74, t74$;
      return new (T.IdentityMapOfString$dynamic()).from(["isMainFrame", this.isMainFrame, "request", (t74 = this.request, t74 == null ? null : t74.toMap()), "securityOrigin", (t74$ = this.securityOrigin, t74$ == null ? null : t74$.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKFrameInfo.new = function(opts) {
    let isMainFrame = opts && 'isMainFrame' in opts ? opts.isMainFrame : null;
    if (isMainFrame == null) dart.nullFailed(I[52], 3950, 22, "isMainFrame");
    let request = opts && 'request' in opts ? opts.request : null;
    let securityOrigin = opts && 'securityOrigin' in opts ? opts.securityOrigin : null;
    this[S$.isMainFrame] = isMainFrame;
    this[S$.request] = request;
    this[S$.securityOrigin] = securityOrigin;
    ;
  }).prototype = types.IOSWKFrameInfo.prototype;
  dart.addTypeTests(types.IOSWKFrameInfo);
  dart.addTypeCaches(types.IOSWKFrameInfo);
  dart.setMethodSignature(types.IOSWKFrameInfo, () => ({
    __proto__: dart.getMethods(types.IOSWKFrameInfo.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSWKFrameInfo, I[53]);
  dart.setFieldSignature(types.IOSWKFrameInfo, () => ({
    __proto__: dart.getFields(types.IOSWKFrameInfo.__proto__),
    isMainFrame: dart.fieldType(core.bool),
    request: dart.fieldType(dart.nullable(types.URLRequest)),
    securityOrigin: dart.fieldType(dart.nullable(types.IOSWKSecurityOrigin))
  }));
  dart.defineExtensionMethods(types.IOSWKFrameInfo, ['toString']);
  types.NavigationAction = class NavigationAction extends core.Object {
    get request() {
      return this[S$.request$1];
    }
    set request(value) {
      this[S$.request$1] = value;
    }
    get isForMainFrame() {
      return this[S$.isForMainFrame$1];
    }
    set isForMainFrame(value) {
      this[S$.isForMainFrame$1] = value;
    }
    get androidHasGesture() {
      return this[S$.androidHasGesture];
    }
    set androidHasGesture(value) {
      this[S$.androidHasGesture] = value;
    }
    get androidIsRedirect() {
      return this[S$.androidIsRedirect];
    }
    set androidIsRedirect(value) {
      this[S$.androidIsRedirect] = value;
    }
    get iosWKNavigationType() {
      return this[S$.iosWKNavigationType];
    }
    set iosWKNavigationType(value) {
      this[S$.iosWKNavigationType] = value;
    }
    get iosSourceFrame() {
      return this[S$.iosSourceFrame];
    }
    set iosSourceFrame(value) {
      this[S$.iosSourceFrame] = value;
    }
    get iosTargetFrame() {
      return this[S$.iosTargetFrame];
    }
    set iosTargetFrame(value) {
      this[S$.iosTargetFrame] = value;
    }
    static fromMap(map) {
      let t74, t74$;
      if (map == null) {
        return null;
      }
      return new types.NavigationAction.new({request: dart.nullCheck(types.URLRequest.fromMap(T.MapNOfString$dynamic().as(dart.dgsend(map[S.$_get]("request"), [core.String, dart.dynamic], 'cast', [])))), isForMainFrame: core.bool.as(map[S.$_get]("isForMainFrame")), androidHasGesture: T.boolN().as(map[S.$_get]("androidHasGesture")), androidIsRedirect: T.boolN().as(map[S.$_get]("androidIsRedirect")), iosWKNavigationType: types.IOSWKNavigationType.fromValue(T.intN().as(map[S.$_get]("iosWKNavigationType"))), iosSourceFrame: types.IOSWKFrameInfo.fromMap(T.MapNOfString$dynamic().as((t74 = map[S.$_get]("iosSourceFrame"), t74 == null ? null : dart.dgsend(t74, [core.String, dart.dynamic], 'cast', [])))), iosTargetFrame: types.IOSWKFrameInfo.fromMap(T.MapNOfString$dynamic().as((t74$ = map[S.$_get]("iosTargetFrame"), t74$ == null ? null : dart.dgsend(t74$, [core.String, dart.dynamic], 'cast', []))))});
    }
    toMap() {
      let t74, t74$, t74$0;
      return new (T.IdentityMapOfString$dynamic()).from(["request", dart.toString(this.request), "isForMainFrame", this.isForMainFrame, "androidHasGesture", this.androidHasGesture, "androidIsRedirect", this.androidIsRedirect, "iosWKNavigationType", (t74 = this.iosWKNavigationType, t74 == null ? null : t74.toValue()), "iosSourceFrame", (t74$ = this.iosSourceFrame, t74$ == null ? null : t74$.toMap()), "iosTargetFrame", (t74$0 = this.iosTargetFrame, t74$0 == null ? null : t74$0.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.NavigationAction.new = function(opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    if (request == null) dart.nullFailed(I[52], 4028, 22, "request");
    let isForMainFrame = opts && 'isForMainFrame' in opts ? opts.isForMainFrame : null;
    if (isForMainFrame == null) dart.nullFailed(I[52], 4029, 21, "isForMainFrame");
    let androidHasGesture = opts && 'androidHasGesture' in opts ? opts.androidHasGesture : null;
    let androidIsRedirect = opts && 'androidIsRedirect' in opts ? opts.androidIsRedirect : null;
    let iosWKNavigationType = opts && 'iosWKNavigationType' in opts ? opts.iosWKNavigationType : null;
    let iosSourceFrame = opts && 'iosSourceFrame' in opts ? opts.iosSourceFrame : null;
    let iosTargetFrame = opts && 'iosTargetFrame' in opts ? opts.iosTargetFrame : null;
    this[S$.request$1] = request;
    this[S$.isForMainFrame$1] = isForMainFrame;
    this[S$.androidHasGesture] = androidHasGesture;
    this[S$.androidIsRedirect] = androidIsRedirect;
    this[S$.iosWKNavigationType] = iosWKNavigationType;
    this[S$.iosSourceFrame] = iosSourceFrame;
    this[S$.iosTargetFrame] = iosTargetFrame;
    ;
  }).prototype = types.NavigationAction.prototype;
  dart.addTypeTests(types.NavigationAction);
  dart.addTypeCaches(types.NavigationAction);
  dart.setMethodSignature(types.NavigationAction, () => ({
    __proto__: dart.getMethods(types.NavigationAction.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.NavigationAction, I[53]);
  dart.setFieldSignature(types.NavigationAction, () => ({
    __proto__: dart.getFields(types.NavigationAction.__proto__),
    request: dart.fieldType(types.URLRequest),
    isForMainFrame: dart.fieldType(core.bool),
    androidHasGesture: dart.fieldType(dart.nullable(core.bool)),
    androidIsRedirect: dart.fieldType(dart.nullable(core.bool)),
    iosWKNavigationType: dart.fieldType(dart.nullable(types.IOSWKNavigationType)),
    iosSourceFrame: dart.fieldType(dart.nullable(types.IOSWKFrameInfo)),
    iosTargetFrame: dart.fieldType(dart.nullable(types.IOSWKFrameInfo))
  }));
  dart.defineExtensionMethods(types.NavigationAction, ['toString']);
  types.CreateWindowAction = class CreateWindowAction extends types.NavigationAction {
    get windowId() {
      return this[S$.windowId$2];
    }
    set windowId(value) {
      this[S$.windowId$2] = value;
    }
    get androidIsDialog() {
      return this[S$.androidIsDialog];
    }
    set androidIsDialog(value) {
      this[S$.androidIsDialog] = value;
    }
    get iosWindowFeatures() {
      return this[S$.iosWindowFeatures];
    }
    set iosWindowFeatures(value) {
      this[S$.iosWindowFeatures] = value;
    }
    static fromMap(map) {
      let t74, t74$, t74$0;
      if (map == null) {
        return null;
      }
      return new types.CreateWindowAction.new({windowId: core.int.as(map[S.$_get]("windowId")), androidIsDialog: T.boolN().as(map[S.$_get]("androidIsDialog")), iosWindowFeatures: types.IOSWKWindowFeatures.fromMap(T.MapNOfString$dynamic().as((t74 = map[S.$_get]("iosWindowFeatures"), t74 == null ? null : dart.dgsend(t74, [core.String, dart.dynamic], 'cast', [])))), request: dart.nullCheck(types.URLRequest.fromMap(T.MapNOfString$dynamic().as(dart.dgsend(map[S.$_get]("request"), [core.String, dart.dynamic], 'cast', [])))), isForMainFrame: core.bool.as(map[S.$_get]("isForMainFrame")), androidHasGesture: T.boolN().as(map[S.$_get]("androidHasGesture")), androidIsRedirect: T.boolN().as(map[S.$_get]("androidIsRedirect")), iosWKNavigationType: types.IOSWKNavigationType.fromValue(T.intN().as(map[S.$_get]("iosWKNavigationType"))), iosSourceFrame: types.IOSWKFrameInfo.fromMap(T.MapNOfString$dynamic().as((t74$ = map[S.$_get]("iosSourceFrame"), t74$ == null ? null : dart.dgsend(t74$, [core.String, dart.dynamic], 'cast', [])))), iosTargetFrame: types.IOSWKFrameInfo.fromMap(T.MapNOfString$dynamic().as((t74$0 = map[S.$_get]("iosTargetFrame"), t74$0 == null ? null : dart.dgsend(t74$0, [core.String, dart.dynamic], 'cast', []))))});
    }
    toMap() {
      let t74;
      let createWindowActionMap = super.toMap();
      createWindowActionMap[S.$addAll](new (T.IdentityMapOfString$dynamic()).from(["windowId", this.windowId, "androidIsDialog", this.androidIsDialog, "iosWindowFeatures", (t74 = this.iosWindowFeatures, t74 == null ? null : t74.toMap())]));
      return createWindowActionMap;
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.CreateWindowAction.new = function(opts) {
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    if (windowId == null) dart.nullFailed(I[52], 4091, 22, "windowId");
    let androidIsDialog = opts && 'androidIsDialog' in opts ? opts.androidIsDialog : null;
    let iosWindowFeatures = opts && 'iosWindowFeatures' in opts ? opts.iosWindowFeatures : null;
    let request = opts && 'request' in opts ? opts.request : null;
    if (request == null) dart.nullFailed(I[52], 4094, 27, "request");
    let isForMainFrame = opts && 'isForMainFrame' in opts ? opts.isForMainFrame : null;
    if (isForMainFrame == null) dart.nullFailed(I[52], 4095, 21, "isForMainFrame");
    let androidHasGesture = opts && 'androidHasGesture' in opts ? opts.androidHasGesture : null;
    let androidIsRedirect = opts && 'androidIsRedirect' in opts ? opts.androidIsRedirect : null;
    let iosWKNavigationType = opts && 'iosWKNavigationType' in opts ? opts.iosWKNavigationType : null;
    let iosSourceFrame = opts && 'iosSourceFrame' in opts ? opts.iosSourceFrame : null;
    let iosTargetFrame = opts && 'iosTargetFrame' in opts ? opts.iosTargetFrame : null;
    this[S$.windowId$2] = windowId;
    this[S$.androidIsDialog] = androidIsDialog;
    this[S$.iosWindowFeatures] = iosWindowFeatures;
    types.CreateWindowAction.__proto__.new.call(this, {request: request, isForMainFrame: isForMainFrame, androidHasGesture: androidHasGesture, androidIsRedirect: androidIsRedirect, iosWKNavigationType: iosWKNavigationType, iosSourceFrame: iosSourceFrame, iosTargetFrame: iosTargetFrame});
    ;
  }).prototype = types.CreateWindowAction.prototype;
  dart.addTypeTests(types.CreateWindowAction);
  dart.addTypeCaches(types.CreateWindowAction);
  dart.setLibraryUri(types.CreateWindowAction, I[53]);
  dart.setFieldSignature(types.CreateWindowAction, () => ({
    __proto__: dart.getFields(types.CreateWindowAction.__proto__),
    windowId: dart.fieldType(core.int),
    androidIsDialog: dart.fieldType(dart.nullable(core.bool)),
    iosWindowFeatures: dart.fieldType(dart.nullable(types.IOSWKWindowFeatures))
  }));
  dart.defineExtensionMethods(types.CreateWindowAction, ['toString']);
  types.AndroidWebStorageOrigin = class AndroidWebStorageOrigin extends core.Object {
    get origin() {
      return this[S$.origin$1];
    }
    set origin(value) {
      this[S$.origin$1] = value;
    }
    get quota() {
      return this[S$.quota];
    }
    set quota(value) {
      this[S$.quota] = value;
    }
    get usage() {
      return this[S$.usage];
    }
    set usage(value) {
      this[S$.usage] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["origin", this.origin, "quota", this.quota, "usage", this.usage]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AndroidWebStorageOrigin.new = function(opts) {
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let quota = opts && 'quota' in opts ? opts.quota : null;
    let usage = opts && 'usage' in opts ? opts.usage : null;
    this[S$.origin$1] = origin;
    this[S$.quota] = quota;
    this[S$.usage] = usage;
    ;
  }).prototype = types.AndroidWebStorageOrigin.prototype;
  dart.addTypeTests(types.AndroidWebStorageOrigin);
  dart.addTypeCaches(types.AndroidWebStorageOrigin);
  dart.setMethodSignature(types.AndroidWebStorageOrigin, () => ({
    __proto__: dart.getMethods(types.AndroidWebStorageOrigin.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.AndroidWebStorageOrigin, I[53]);
  dart.setFieldSignature(types.AndroidWebStorageOrigin, () => ({
    __proto__: dart.getFields(types.AndroidWebStorageOrigin.__proto__),
    origin: dart.fieldType(dart.nullable(core.String)),
    quota: dart.fieldType(dart.nullable(core.int)),
    usage: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(types.AndroidWebStorageOrigin, ['toString']);
  types.IOSWKWebsiteDataType = class IOSWKWebsiteDataType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$38];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSWKWebsiteDataType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4201, 26, "element");
            return element.toValue() == value;
          }, T.IOSWKWebsiteDataTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSWKWebsiteDataType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4182, 45, "_value");
    this[S$._value$38] = _value;
    ;
  }).prototype = types.IOSWKWebsiteDataType.prototype;
  dart.addTypeTests(types.IOSWKWebsiteDataType);
  dart.addTypeCaches(types.IOSWKWebsiteDataType);
  dart.setMethodSignature(types.IOSWKWebsiteDataType, () => ({
    __proto__: dart.getMethods(types.IOSWKWebsiteDataType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.IOSWKWebsiteDataType, I[53]);
  dart.setFieldSignature(types.IOSWKWebsiteDataType, () => ({
    __proto__: dart.getFields(types.IOSWKWebsiteDataType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSWKWebsiteDataType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSWKWebsiteDataType, ['hashCode']);
  dart.defineLazy(types.IOSWKWebsiteDataType, {
    /*types.IOSWKWebsiteDataType.values*/get values() {
      return T.JSArrayOfIOSWKWebsiteDataType().of([types.IOSWKWebsiteDataType.WKWebsiteDataTypeFetchCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeDiskCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeMemoryCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeOfflineWebApplicationCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeCookies, types.IOSWKWebsiteDataType.WKWebsiteDataTypeSessionStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeLocalStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeWebSQLDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeIndexedDBDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeServiceWorkerRegistrations])[S.$toSet]();
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeFetchCache*/get WKWebsiteDataTypeFetchCache() {
      return C[196] || CT.C196;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeDiskCache*/get WKWebsiteDataTypeDiskCache() {
      return C[197] || CT.C197;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeMemoryCache*/get WKWebsiteDataTypeMemoryCache() {
      return C[198] || CT.C198;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeOfflineWebApplicationCache*/get WKWebsiteDataTypeOfflineWebApplicationCache() {
      return C[199] || CT.C199;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeCookies*/get WKWebsiteDataTypeCookies() {
      return C[200] || CT.C200;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeSessionStorage*/get WKWebsiteDataTypeSessionStorage() {
      return C[201] || CT.C201;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeLocalStorage*/get WKWebsiteDataTypeLocalStorage() {
      return C[202] || CT.C202;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeWebSQLDatabases*/get WKWebsiteDataTypeWebSQLDatabases() {
      return C[203] || CT.C203;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeIndexedDBDatabases*/get WKWebsiteDataTypeIndexedDBDatabases() {
      return C[204] || CT.C204;
    },
    /*types.IOSWKWebsiteDataType.WKWebsiteDataTypeServiceWorkerRegistrations*/get WKWebsiteDataTypeServiceWorkerRegistrations() {
      return C[205] || CT.C205;
    },
    /*types.IOSWKWebsiteDataType.ALL*/get ALL() {
      return T.JSArrayOfIOSWKWebsiteDataType().of([types.IOSWKWebsiteDataType.WKWebsiteDataTypeFetchCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeDiskCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeMemoryCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeOfflineWebApplicationCache, types.IOSWKWebsiteDataType.WKWebsiteDataTypeCookies, types.IOSWKWebsiteDataType.WKWebsiteDataTypeSessionStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeLocalStorage, types.IOSWKWebsiteDataType.WKWebsiteDataTypeWebSQLDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeIndexedDBDatabases, types.IOSWKWebsiteDataType.WKWebsiteDataTypeServiceWorkerRegistrations])[S.$toSet]();
    }
  }, false);
  types.IOSWKWebsiteDataRecord = class IOSWKWebsiteDataRecord extends core.Object {
    get displayName() {
      return this[S$.displayName];
    }
    set displayName(value) {
      this[S$.displayName] = value;
    }
    get dataTypes() {
      return this[S$.dataTypes];
    }
    set dataTypes(value) {
      this[S$.dataTypes] = value;
    }
    toMap() {
      let dataTypesString = T.JSArrayOfString().of([]);
      if (this.dataTypes != null) {
        for (let dataType of dart.nullCheck(this.dataTypes)) {
          dataTypesString[S.$add](dataType.toValue());
        }
      }
      return new (T.IdentityMapOfString$dynamic()).from(["displayName", this.displayName, "dataTypes", dataTypesString]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKWebsiteDataRecord.new = function(opts) {
    let displayName = opts && 'displayName' in opts ? opts.displayName : null;
    let dataTypes = opts && 'dataTypes' in opts ? opts.dataTypes : null;
    this[S$.displayName] = displayName;
    this[S$.dataTypes] = dataTypes;
    ;
  }).prototype = types.IOSWKWebsiteDataRecord.prototype;
  dart.addTypeTests(types.IOSWKWebsiteDataRecord);
  dart.addTypeCaches(types.IOSWKWebsiteDataRecord);
  dart.setMethodSignature(types.IOSWKWebsiteDataRecord, () => ({
    __proto__: dart.getMethods(types.IOSWKWebsiteDataRecord.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSWKWebsiteDataRecord, I[53]);
  dart.setFieldSignature(types.IOSWKWebsiteDataRecord, () => ({
    __proto__: dart.getFields(types.IOSWKWebsiteDataRecord.__proto__),
    displayName: dart.fieldType(dart.nullable(core.String)),
    dataTypes: dart.fieldType(dart.nullable(core.Set$(types.IOSWKWebsiteDataType)))
  }));
  dart.defineExtensionMethods(types.IOSWKWebsiteDataRecord, ['toString']);
  types.InAppWebViewHitTestResultType = class InAppWebViewHitTestResultType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$39];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.InAppWebViewHitTestResultType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4336, 26, "element");
            return element.toValue() == value;
          }, T.InAppWebViewHitTestResultTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 2:
        {
          return "PHONE_TYPE";
        }
        case 3:
        {
          return "GEO_TYPE";
        }
        case 4:
        {
          return "EMAIL_TYPE";
        }
        case 5:
        {
          return "IMAGE_TYPE";
        }
        case 7:
        {
          return "SRC_ANCHOR_TYPE";
        }
        case 8:
        {
          return "SRC_IMAGE_ANCHOR_TYPE";
        }
        case 9:
        {
          return "EDIT_TEXT_TYPE";
        }
        case 0:
        default:
        {
          return "UNKNOWN_TYPE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.InAppWebViewHitTestResultType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4319, 54, "_value");
    this[S$._value$39] = _value;
    ;
  }).prototype = types.InAppWebViewHitTestResultType.prototype;
  dart.addTypeTests(types.InAppWebViewHitTestResultType);
  dart.addTypeCaches(types.InAppWebViewHitTestResultType);
  dart.setMethodSignature(types.InAppWebViewHitTestResultType, () => ({
    __proto__: dart.getMethods(types.InAppWebViewHitTestResultType.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.InAppWebViewHitTestResultType, I[53]);
  dart.setFieldSignature(types.InAppWebViewHitTestResultType, () => ({
    __proto__: dart.getFields(types.InAppWebViewHitTestResultType.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.InAppWebViewHitTestResultType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.InAppWebViewHitTestResultType, ['hashCode']);
  dart.defineLazy(types.InAppWebViewHitTestResultType, {
    /*types.InAppWebViewHitTestResultType.values*/get values() {
      return T.JSArrayOfInAppWebViewHitTestResultType().of([types.InAppWebViewHitTestResultType.UNKNOWN_TYPE, types.InAppWebViewHitTestResultType.PHONE_TYPE, types.InAppWebViewHitTestResultType.GEO_TYPE, types.InAppWebViewHitTestResultType.EMAIL_TYPE, types.InAppWebViewHitTestResultType.IMAGE_TYPE, types.InAppWebViewHitTestResultType.SRC_ANCHOR_TYPE, types.InAppWebViewHitTestResultType.SRC_IMAGE_ANCHOR_TYPE, types.InAppWebViewHitTestResultType.EDIT_TEXT_TYPE])[S.$toSet]();
    },
    /*types.InAppWebViewHitTestResultType.UNKNOWN_TYPE*/get UNKNOWN_TYPE() {
      return C[206] || CT.C206;
    },
    /*types.InAppWebViewHitTestResultType.PHONE_TYPE*/get PHONE_TYPE() {
      return C[207] || CT.C207;
    },
    /*types.InAppWebViewHitTestResultType.GEO_TYPE*/get GEO_TYPE() {
      return C[208] || CT.C208;
    },
    /*types.InAppWebViewHitTestResultType.EMAIL_TYPE*/get EMAIL_TYPE() {
      return C[209] || CT.C209;
    },
    /*types.InAppWebViewHitTestResultType.IMAGE_TYPE*/get IMAGE_TYPE() {
      return C[210] || CT.C210;
    },
    /*types.InAppWebViewHitTestResultType.SRC_ANCHOR_TYPE*/get SRC_ANCHOR_TYPE() {
      return C[211] || CT.C211;
    },
    /*types.InAppWebViewHitTestResultType.SRC_IMAGE_ANCHOR_TYPE*/get SRC_IMAGE_ANCHOR_TYPE() {
      return C[212] || CT.C212;
    },
    /*types.InAppWebViewHitTestResultType.EDIT_TEXT_TYPE*/get EDIT_TEXT_TYPE() {
      return C[213] || CT.C213;
    }
  }, false);
  types.InAppWebViewHitTestResult = class InAppWebViewHitTestResult extends core.Object {
    get type() {
      return this[S$.type$2];
    }
    set type(value) {
      this[S$.type$2] = value;
    }
    get extra() {
      return this[S$.extra];
    }
    set extra(value) {
      this[S$.extra] = value;
    }
    toMap() {
      let t76;
      return new (T.IdentityMapOfString$dynamic()).from(["type", (t76 = this.type, t76 == null ? null : t76.toValue()), "extra", this.extra]);
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.InAppWebViewHitTestResult.new({type: types.InAppWebViewHitTestResultType.fromValue(T.intN().as(map[S.$_get]("type"))), extra: T.StringN().as(map[S.$_get]("extra"))});
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.InAppWebViewHitTestResult.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    this[S$.type$2] = type;
    this[S$.extra] = extra;
    ;
  }).prototype = types.InAppWebViewHitTestResult.prototype;
  dart.addTypeTests(types.InAppWebViewHitTestResult);
  dart.addTypeCaches(types.InAppWebViewHitTestResult);
  dart.setMethodSignature(types.InAppWebViewHitTestResult, () => ({
    __proto__: dart.getMethods(types.InAppWebViewHitTestResult.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.InAppWebViewHitTestResult, I[53]);
  dart.setFieldSignature(types.InAppWebViewHitTestResult, () => ({
    __proto__: dart.getFields(types.InAppWebViewHitTestResult.__proto__),
    type: dart.fieldType(dart.nullable(types.InAppWebViewHitTestResultType)),
    extra: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.InAppWebViewHitTestResult, ['toString']);
  types.WebViewRenderProcessAction = class WebViewRenderProcessAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$40];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["action", this[S._value$1]]);
    }
  };
  (types.WebViewRenderProcessAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4441, 51, "_value");
    this[S$._value$40] = _value;
    ;
  }).prototype = types.WebViewRenderProcessAction.prototype;
  dart.addTypeTests(types.WebViewRenderProcessAction);
  dart.addTypeCaches(types.WebViewRenderProcessAction);
  dart.setMethodSignature(types.WebViewRenderProcessAction, () => ({
    __proto__: dart.getMethods(types.WebViewRenderProcessAction.__proto__),
    toValue: dart.fnType(core.int, []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.WebViewRenderProcessAction, I[53]);
  dart.setFieldSignature(types.WebViewRenderProcessAction, () => ({
    __proto__: dart.getFields(types.WebViewRenderProcessAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.WebViewRenderProcessAction, ['_equals']);
  dart.defineExtensionAccessors(types.WebViewRenderProcessAction, ['hashCode']);
  dart.defineLazy(types.WebViewRenderProcessAction, {
    /*types.WebViewRenderProcessAction.TERMINATE*/get TERMINATE() {
      return C[214] || CT.C214;
    }
  }, false);
  types.RenderProcessGoneDetail = class RenderProcessGoneDetail extends core.Object {
    get didCrash() {
      return this[S$.didCrash];
    }
    set didCrash(value) {
      this[S$.didCrash] = value;
    }
    get rendererPriorityAtExit() {
      return this[S$.rendererPriorityAtExit];
    }
    set rendererPriorityAtExit(value) {
      this[S$.rendererPriorityAtExit] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.RenderProcessGoneDetail.new({didCrash: core.bool.as(map[S.$_get]("didCrash")), rendererPriorityAtExit: types.RendererPriority.fromValue(T.intN().as(map[S.$_get]("rendererPriorityAtExit")))});
    }
    toMap() {
      let t76;
      return new (T.IdentityMapOfString$dynamic()).from(["didCrash", this.didCrash, "rendererPriorityAtExit", (t76 = this.rendererPriorityAtExit, t76 == null ? null : t76.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.RenderProcessGoneDetail.new = function(opts) {
    let didCrash = opts && 'didCrash' in opts ? opts.didCrash : null;
    if (didCrash == null) dart.nullFailed(I[52], 4471, 22, "didCrash");
    let rendererPriorityAtExit = opts && 'rendererPriorityAtExit' in opts ? opts.rendererPriorityAtExit : null;
    this[S$.didCrash] = didCrash;
    this[S$.rendererPriorityAtExit] = rendererPriorityAtExit;
    ;
  }).prototype = types.RenderProcessGoneDetail.prototype;
  dart.addTypeTests(types.RenderProcessGoneDetail);
  dart.addTypeCaches(types.RenderProcessGoneDetail);
  dart.setMethodSignature(types.RenderProcessGoneDetail, () => ({
    __proto__: dart.getMethods(types.RenderProcessGoneDetail.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.RenderProcessGoneDetail, I[53]);
  dart.setFieldSignature(types.RenderProcessGoneDetail, () => ({
    __proto__: dart.getFields(types.RenderProcessGoneDetail.__proto__),
    didCrash: dart.fieldType(core.bool),
    rendererPriorityAtExit: dart.fieldType(dart.nullable(types.RendererPriority))
  }));
  dart.defineExtensionMethods(types.RenderProcessGoneDetail, ['toString']);
  types.RendererPriority = class RendererPriority extends core.Object {
    get [S._value$1]() {
      return this[S$._value$41];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.RendererPriority.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4517, 26, "element");
            return element.toValue() == value;
          }, T.RendererPriorityTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 0:
        {
          return "RENDERER_PRIORITY_WAIVED";
        }
        case 1:
        {
          return "RENDERER_PRIORITY_BOUND";
        }
        case 2:
        default:
        {
          return "RENDERER_PRIORITY_IMPORTANT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.RendererPriority._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4505, 41, "_value");
    this[S$._value$41] = _value;
    ;
  }).prototype = types.RendererPriority.prototype;
  dart.addTypeTests(types.RendererPriority);
  dart.addTypeCaches(types.RendererPriority);
  dart.setMethodSignature(types.RendererPriority, () => ({
    __proto__: dart.getMethods(types.RendererPriority.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.RendererPriority, I[53]);
  dart.setFieldSignature(types.RendererPriority, () => ({
    __proto__: dart.getFields(types.RendererPriority.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.RendererPriority, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.RendererPriority, ['hashCode']);
  dart.defineLazy(types.RendererPriority, {
    /*types.RendererPriority.values*/get values() {
      return T.JSArrayOfRendererPriority().of([types.RendererPriority.RENDERER_PRIORITY_WAIVED, types.RendererPriority.RENDERER_PRIORITY_BOUND, types.RendererPriority.RENDERER_PRIORITY_IMPORTANT])[S.$toSet]();
    },
    /*types.RendererPriority.RENDERER_PRIORITY_WAIVED*/get RENDERER_PRIORITY_WAIVED() {
      return C[215] || CT.C215;
    },
    /*types.RendererPriority.RENDERER_PRIORITY_BOUND*/get RENDERER_PRIORITY_BOUND() {
      return C[216] || CT.C216;
    },
    /*types.RendererPriority.RENDERER_PRIORITY_IMPORTANT*/get RENDERER_PRIORITY_IMPORTANT() {
      return C[217] || CT.C217;
    }
  }, false);
  types.RendererPriorityPolicy = class RendererPriorityPolicy extends core.Object {
    get rendererRequestedPriority() {
      return this[S$.rendererRequestedPriority];
    }
    set rendererRequestedPriority(value) {
      this[S$.rendererRequestedPriority] = value;
    }
    get waivedWhenNotVisible() {
      return this[S$.waivedWhenNotVisible];
    }
    set waivedWhenNotVisible(value) {
      this[S$.waivedWhenNotVisible] = value;
    }
    toMap() {
      let t77;
      return new (T.IdentityMapOfString$dynamic()).from(["rendererRequestedPriority", (t77 = this.rendererRequestedPriority, t77 == null ? null : t77.toValue()), "waivedWhenNotVisible", this.waivedWhenNotVisible]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
    static fromMap(map) {
      return map != null ? new types.RendererPriorityPolicy.new({rendererRequestedPriority: types.RendererPriority.fromValue(T.intN().as(map[S.$_get]("rendererRequestedPriority"))), waivedWhenNotVisible: core.bool.as(map[S.$_get]("waivedWhenNotVisible"))}) : null;
    }
  };
  (types.RendererPriorityPolicy.new = function(opts) {
    let rendererRequestedPriority = opts && 'rendererRequestedPriority' in opts ? opts.rendererRequestedPriority : null;
    let waivedWhenNotVisible = opts && 'waivedWhenNotVisible' in opts ? opts.waivedWhenNotVisible : null;
    if (waivedWhenNotVisible == null) dart.nullFailed(I[52], 4572, 21, "waivedWhenNotVisible");
    this[S$.rendererRequestedPriority] = rendererRequestedPriority;
    this[S$.waivedWhenNotVisible] = waivedWhenNotVisible;
    ;
  }).prototype = types.RendererPriorityPolicy.prototype;
  dart.addTypeTests(types.RendererPriorityPolicy);
  dart.addTypeCaches(types.RendererPriorityPolicy);
  dart.setMethodSignature(types.RendererPriorityPolicy, () => ({
    __proto__: dart.getMethods(types.RendererPriorityPolicy.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.RendererPriorityPolicy, I[53]);
  dart.setFieldSignature(types.RendererPriorityPolicy, () => ({
    __proto__: dart.getFields(types.RendererPriorityPolicy.__proto__),
    rendererRequestedPriority: dart.fieldType(dart.nullable(types.RendererPriority)),
    waivedWhenNotVisible: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(types.RendererPriorityPolicy, ['toString']);
  types.FormResubmissionAction = class FormResubmissionAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$42];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["action", this[S._value$1]]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.FormResubmissionAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4604, 47, "_value");
    this[S$._value$42] = _value;
    ;
  }).prototype = types.FormResubmissionAction.prototype;
  dart.addTypeTests(types.FormResubmissionAction);
  dart.addTypeCaches(types.FormResubmissionAction);
  dart.setMethodSignature(types.FormResubmissionAction, () => ({
    __proto__: dart.getMethods(types.FormResubmissionAction.__proto__),
    toValue: dart.fnType(core.int, []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.FormResubmissionAction, I[53]);
  dart.setFieldSignature(types.FormResubmissionAction, () => ({
    __proto__: dart.getFields(types.FormResubmissionAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.FormResubmissionAction, ['_equals', 'toString']);
  dart.defineExtensionAccessors(types.FormResubmissionAction, ['hashCode']);
  dart.defineLazy(types.FormResubmissionAction, {
    /*types.FormResubmissionAction.RESEND*/get RESEND() {
      return C[218] || CT.C218;
    },
    /*types.FormResubmissionAction.DONT_RESEND*/get DONT_RESEND() {
      return C[219] || CT.C219;
    }
  }, false);
  types.AndroidOverScrollMode = class AndroidOverScrollMode extends core.Object {
    get [S._value$1]() {
      return this[S$._value$43];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidOverScrollMode.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4650, 26, "element");
            return element.toValue() == value;
          }, T.AndroidOverScrollModeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "OVER_SCROLL_IF_CONTENT_SCROLLS";
        }
        case 2:
        {
          return "OVER_SCROLL_NEVER";
        }
        case 0:
        default:
        {
          return "OVER_SCROLL_ALWAYS";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidOverScrollMode._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4638, 46, "_value");
    this[S$._value$43] = _value;
    ;
  }).prototype = types.AndroidOverScrollMode.prototype;
  dart.addTypeTests(types.AndroidOverScrollMode);
  dart.addTypeCaches(types.AndroidOverScrollMode);
  dart.setMethodSignature(types.AndroidOverScrollMode, () => ({
    __proto__: dart.getMethods(types.AndroidOverScrollMode.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidOverScrollMode, I[53]);
  dart.setFieldSignature(types.AndroidOverScrollMode, () => ({
    __proto__: dart.getFields(types.AndroidOverScrollMode.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidOverScrollMode, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidOverScrollMode, ['hashCode']);
  dart.defineLazy(types.AndroidOverScrollMode, {
    /*types.AndroidOverScrollMode.values*/get values() {
      return T.JSArrayOfAndroidOverScrollMode().of([types.AndroidOverScrollMode.OVER_SCROLL_ALWAYS, types.AndroidOverScrollMode.OVER_SCROLL_IF_CONTENT_SCROLLS, types.AndroidOverScrollMode.OVER_SCROLL_NEVER])[S.$toSet]();
    },
    /*types.AndroidOverScrollMode.OVER_SCROLL_ALWAYS*/get OVER_SCROLL_ALWAYS() {
      return C[220] || CT.C220;
    },
    /*types.AndroidOverScrollMode.OVER_SCROLL_IF_CONTENT_SCROLLS*/get OVER_SCROLL_IF_CONTENT_SCROLLS() {
      return C[53] || CT.C53;
    },
    /*types.AndroidOverScrollMode.OVER_SCROLL_NEVER*/get OVER_SCROLL_NEVER() {
      return C[221] || CT.C221;
    }
  }, false);
  types.AndroidScrollBarStyle = class AndroidScrollBarStyle extends core.Object {
    get [S._value$1]() {
      return this[S$._value$44];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidScrollBarStyle.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4712, 26, "element");
            return element.toValue() == value;
          }, T.AndroidScrollBarStyleTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 16777216:
        {
          return "SCROLLBARS_INSIDE_INSET";
        }
        case 33554432:
        {
          return "SCROLLBARS_OUTSIDE_OVERLAY";
        }
        case 50331648:
        {
          return "SCROLLBARS_OUTSIDE_INSET";
        }
        case 0:
        default:
        {
          return "SCROLLBARS_INSIDE_OVERLAY";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidScrollBarStyle._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4699, 46, "_value");
    this[S$._value$44] = _value;
    ;
  }).prototype = types.AndroidScrollBarStyle.prototype;
  dart.addTypeTests(types.AndroidScrollBarStyle);
  dart.addTypeCaches(types.AndroidScrollBarStyle);
  dart.setMethodSignature(types.AndroidScrollBarStyle, () => ({
    __proto__: dart.getMethods(types.AndroidScrollBarStyle.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidScrollBarStyle, I[53]);
  dart.setFieldSignature(types.AndroidScrollBarStyle, () => ({
    __proto__: dart.getFields(types.AndroidScrollBarStyle.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidScrollBarStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidScrollBarStyle, ['hashCode']);
  dart.defineLazy(types.AndroidScrollBarStyle, {
    /*types.AndroidScrollBarStyle.values*/get values() {
      return T.JSArrayOfAndroidScrollBarStyle().of([types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_OVERLAY, types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_INSET, types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_OVERLAY, types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_INSET])[S.$toSet]();
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_OVERLAY*/get SCROLLBARS_INSIDE_OVERLAY() {
      return C[54] || CT.C54;
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_INSIDE_INSET*/get SCROLLBARS_INSIDE_INSET() {
      return C[222] || CT.C222;
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_OVERLAY*/get SCROLLBARS_OUTSIDE_OVERLAY() {
      return C[223] || CT.C223;
    },
    /*types.AndroidScrollBarStyle.SCROLLBARS_OUTSIDE_INSET*/get SCROLLBARS_OUTSIDE_INSET() {
      return C[224] || CT.C224;
    }
  }, false);
  types.AndroidVerticalScrollbarPosition = class AndroidVerticalScrollbarPosition extends core.Object {
    get [S._value$1]() {
      return this[S$._value$45];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidVerticalScrollbarPosition.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4779, 26, "element");
            return element.toValue() == value;
          }, T.AndroidVerticalScrollbarPositionTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "SCROLLBAR_POSITION_LEFT";
        }
        case 2:
        {
          return "SCROLLBAR_POSITION_RIGHT";
        }
        case 0:
        default:
        {
          return "SCROLLBAR_POSITION_DEFAULT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidVerticalScrollbarPosition._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4767, 57, "_value");
    this[S$._value$45] = _value;
    ;
  }).prototype = types.AndroidVerticalScrollbarPosition.prototype;
  dart.addTypeTests(types.AndroidVerticalScrollbarPosition);
  dart.addTypeCaches(types.AndroidVerticalScrollbarPosition);
  dart.setMethodSignature(types.AndroidVerticalScrollbarPosition, () => ({
    __proto__: dart.getMethods(types.AndroidVerticalScrollbarPosition.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidVerticalScrollbarPosition, I[53]);
  dart.setFieldSignature(types.AndroidVerticalScrollbarPosition, () => ({
    __proto__: dart.getFields(types.AndroidVerticalScrollbarPosition.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidVerticalScrollbarPosition, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidVerticalScrollbarPosition, ['hashCode']);
  dart.defineLazy(types.AndroidVerticalScrollbarPosition, {
    /*types.AndroidVerticalScrollbarPosition.values*/get values() {
      return T.JSArrayOfAndroidVerticalScrollbarPosition().of([types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_DEFAULT, types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_LEFT, types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_RIGHT])[S.$toSet]();
    },
    /*types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_DEFAULT*/get SCROLLBAR_POSITION_DEFAULT() {
      return C[55] || CT.C55;
    },
    /*types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_LEFT*/get SCROLLBAR_POSITION_LEFT() {
      return C[225] || CT.C225;
    },
    /*types.AndroidVerticalScrollbarPosition.SCROLLBAR_POSITION_RIGHT*/get SCROLLBAR_POSITION_RIGHT() {
      return C[226] || CT.C226;
    }
  }, false);
  types.AndroidWebViewPackageInfo = class AndroidWebViewPackageInfo extends core.Object {
    get versionName() {
      return this[S$.versionName];
    }
    set versionName(value) {
      this[S$.versionName] = value;
    }
    get packageName() {
      return this[S$.packageName$1];
    }
    set packageName(value) {
      this[S$.packageName$1] = value;
    }
    static fromMap(map) {
      return map != null ? new types.AndroidWebViewPackageInfo.new({versionName: T.StringN().as(map[S.$_get]("versionName")), packageName: T.StringN().as(map[S.$_get]("packageName"))}) : null;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["versionName", this.versionName, "packageName", this.packageName]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.AndroidWebViewPackageInfo.new = function(opts) {
    let versionName = opts && 'versionName' in opts ? opts.versionName : null;
    let packageName = opts && 'packageName' in opts ? opts.packageName : null;
    this[S$.versionName] = versionName;
    this[S$.packageName$1] = packageName;
    ;
  }).prototype = types.AndroidWebViewPackageInfo.prototype;
  dart.addTypeTests(types.AndroidWebViewPackageInfo);
  dart.addTypeCaches(types.AndroidWebViewPackageInfo);
  dart.setMethodSignature(types.AndroidWebViewPackageInfo, () => ({
    __proto__: dart.getMethods(types.AndroidWebViewPackageInfo.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.AndroidWebViewPackageInfo, I[53]);
  dart.setFieldSignature(types.AndroidWebViewPackageInfo, () => ({
    __proto__: dart.getFields(types.AndroidWebViewPackageInfo.__proto__),
    versionName: dart.fieldType(dart.nullable(core.String)),
    packageName: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.AndroidWebViewPackageInfo, ['toString']);
  types.RequestFocusNodeHrefResult = class RequestFocusNodeHrefResult extends core.Object {
    get url() {
      return this[S$.url$10];
    }
    set url(value) {
      this[S$.url$10] = value;
    }
    get title() {
      return this[S$.title$1];
    }
    set title(value) {
      this[S$.title$1] = value;
    }
    get src() {
      return this[S$.src];
    }
    set src(value) {
      this[S$.src] = value;
    }
    toMap() {
      let t80;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t80 = this.url, t80 == null ? null : dart.toString(t80)), "title", this.title, "src", this.src]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.RequestFocusNodeHrefResult.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let src = opts && 'src' in opts ? opts.src : null;
    this[S$.url$10] = url;
    this[S$.title$1] = title;
    this[S$.src] = src;
    ;
  }).prototype = types.RequestFocusNodeHrefResult.prototype;
  dart.addTypeTests(types.RequestFocusNodeHrefResult);
  dart.addTypeCaches(types.RequestFocusNodeHrefResult);
  dart.setMethodSignature(types.RequestFocusNodeHrefResult, () => ({
    __proto__: dart.getMethods(types.RequestFocusNodeHrefResult.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.RequestFocusNodeHrefResult, I[53]);
  dart.setFieldSignature(types.RequestFocusNodeHrefResult, () => ({
    __proto__: dart.getFields(types.RequestFocusNodeHrefResult.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    title: dart.fieldType(dart.nullable(core.String)),
    src: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.RequestFocusNodeHrefResult, ['toString']);
  types.RequestImageRefResult = class RequestImageRefResult extends core.Object {
    get url() {
      return this[S$.url$11];
    }
    set url(value) {
      this[S$.url$11] = value;
    }
    toMap() {
      let t80;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t80 = this.url, t80 == null ? null : dart.toString(t80))]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.RequestImageRefResult.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    this[S$.url$11] = url;
    ;
  }).prototype = types.RequestImageRefResult.prototype;
  dart.addTypeTests(types.RequestImageRefResult);
  dart.addTypeCaches(types.RequestImageRefResult);
  dart.setMethodSignature(types.RequestImageRefResult, () => ({
    __proto__: dart.getMethods(types.RequestImageRefResult.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.RequestImageRefResult, I[53]);
  dart.setFieldSignature(types.RequestImageRefResult, () => ({
    __proto__: dart.getFields(types.RequestImageRefResult.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(types.RequestImageRefResult, ['toString']);
  types.MetaTag = class MetaTag extends core.Object {
    get name() {
      return this[S$.name$3];
    }
    set name(value) {
      this[S$.name$3] = value;
    }
    get content() {
      return this[S$.content];
    }
    set content(value) {
      this[S$.content] = value;
    }
    get attrs() {
      return this[S$.attrs];
    }
    set attrs(value) {
      this[S$.attrs] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["name", this.name, "content", this.content, "attrs", this.attrs]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.MetaTag.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let attrs = opts && 'attrs' in opts ? opts.attrs : null;
    this[S$.name$3] = name;
    this[S$.content] = content;
    this[S$.attrs] = attrs;
    ;
  }).prototype = types.MetaTag.prototype;
  dart.addTypeTests(types.MetaTag);
  dart.addTypeCaches(types.MetaTag);
  dart.setMethodSignature(types.MetaTag, () => ({
    __proto__: dart.getMethods(types.MetaTag.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.MetaTag, I[53]);
  dart.setFieldSignature(types.MetaTag, () => ({
    __proto__: dart.getFields(types.MetaTag.__proto__),
    name: dart.fieldType(dart.nullable(core.String)),
    content: dart.fieldType(dart.nullable(core.String)),
    attrs: dart.fieldType(dart.nullable(core.List$(types.MetaTagAttribute)))
  }));
  dart.defineExtensionMethods(types.MetaTag, ['toString']);
  types.MetaTagAttribute = class MetaTagAttribute extends core.Object {
    get name() {
      return this[S$.name$4];
    }
    set name(value) {
      this[S$.name$4] = value;
    }
    get value() {
      return this[S$.value$4];
    }
    set value(value) {
      this[S$.value$4] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["name", this.name, "value", this.value]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.MetaTagAttribute.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[S$.name$4] = name;
    this[S$.value$4] = value;
    ;
  }).prototype = types.MetaTagAttribute.prototype;
  dart.addTypeTests(types.MetaTagAttribute);
  dart.addTypeCaches(types.MetaTagAttribute);
  dart.setMethodSignature(types.MetaTagAttribute, () => ({
    __proto__: dart.getMethods(types.MetaTagAttribute.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.MetaTagAttribute, I[53]);
  dart.setFieldSignature(types.MetaTagAttribute, () => ({
    __proto__: dart.getFields(types.MetaTagAttribute.__proto__),
    name: dart.fieldType(dart.nullable(core.String)),
    value: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.MetaTagAttribute, ['toString']);
  types.WebStorageType = class WebStorageType extends core.Object {
    get [S._value$1]() {
      return this[S$._value$46];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.WebStorageType.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 4971, 26, "element");
            return element.toValue() == value;
          }, T.WebStorageTypeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.WebStorageType._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 4960, 39, "_value");
    this[S$._value$46] = _value;
    ;
  }).prototype = types.WebStorageType.prototype;
  dart.addTypeTests(types.WebStorageType);
  dart.addTypeCaches(types.WebStorageType);
  dart.setMethodSignature(types.WebStorageType, () => ({
    __proto__: dart.getMethods(types.WebStorageType.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.WebStorageType, I[53]);
  dart.setFieldSignature(types.WebStorageType, () => ({
    __proto__: dart.getFields(types.WebStorageType.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.WebStorageType, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.WebStorageType, ['hashCode']);
  dart.defineLazy(types.WebStorageType, {
    /*types.WebStorageType.values*/get values() {
      return T.JSArrayOfWebStorageType().of([types.WebStorageType.LOCAL_STORAGE, types.WebStorageType.SESSION_STORAGE])[S.$toSet]();
    },
    /*types.WebStorageType.LOCAL_STORAGE*/get LOCAL_STORAGE() {
      return C[227] || CT.C227;
    },
    /*types.WebStorageType.SESSION_STORAGE*/get SESSION_STORAGE() {
      return C[228] || CT.C228;
    }
  }, false);
  types.HTTPCookieSameSitePolicy = class HTTPCookieSameSitePolicy extends core.Object {
    get [S._value$1]() {
      return this[S$._value$47];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.HTTPCookieSameSitePolicy.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5014, 26, "element");
            return element.toValue() == value;
          }, T.HTTPCookieSameSitePolicyTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.HTTPCookieSameSitePolicy._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5002, 49, "_value");
    this[S$._value$47] = _value;
    ;
  }).prototype = types.HTTPCookieSameSitePolicy.prototype;
  dart.addTypeTests(types.HTTPCookieSameSitePolicy);
  dart.addTypeCaches(types.HTTPCookieSameSitePolicy);
  dart.setMethodSignature(types.HTTPCookieSameSitePolicy, () => ({
    __proto__: dart.getMethods(types.HTTPCookieSameSitePolicy.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.HTTPCookieSameSitePolicy, I[53]);
  dart.setFieldSignature(types.HTTPCookieSameSitePolicy, () => ({
    __proto__: dart.getFields(types.HTTPCookieSameSitePolicy.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.HTTPCookieSameSitePolicy, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.HTTPCookieSameSitePolicy, ['hashCode']);
  dart.defineLazy(types.HTTPCookieSameSitePolicy, {
    /*types.HTTPCookieSameSitePolicy.values*/get values() {
      return T.JSArrayOfHTTPCookieSameSitePolicy().of([types.HTTPCookieSameSitePolicy.LAX, types.HTTPCookieSameSitePolicy.STRICT, types.HTTPCookieSameSitePolicy.NONE])[S.$toSet]();
    },
    /*types.HTTPCookieSameSitePolicy.LAX*/get LAX() {
      return C[229] || CT.C229;
    },
    /*types.HTTPCookieSameSitePolicy.STRICT*/get STRICT() {
      return C[230] || CT.C230;
    },
    /*types.HTTPCookieSameSitePolicy.NONE*/get NONE() {
      return C[231] || CT.C231;
    }
  }, false);
  types.AndroidSslError = class AndroidSslError extends core.Object {
    get [S._value$1]() {
      return this[S$._value$48];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidSslError.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5070, 26, "element");
            return element.toValue() == value;
          }, T.AndroidSslErrorTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "SSL_EXPIRED";
        }
        case 2:
        {
          return "SSL_IDMISMATCH";
        }
        case 3:
        {
          return "SSL_UNTRUSTED";
        }
        case 4:
        {
          return "SSL_DATE_INVALID";
        }
        case 5:
        {
          return "SSL_INVALID";
        }
        case 0:
        default:
        {
          return "SSL_NOTYETVALID";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidSslError._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5055, 40, "_value");
    this[S$._value$48] = _value;
    ;
  }).prototype = types.AndroidSslError.prototype;
  dart.addTypeTests(types.AndroidSslError);
  dart.addTypeCaches(types.AndroidSslError);
  dart.setMethodSignature(types.AndroidSslError, () => ({
    __proto__: dart.getMethods(types.AndroidSslError.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidSslError, I[53]);
  dart.setFieldSignature(types.AndroidSslError, () => ({
    __proto__: dart.getFields(types.AndroidSslError.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidSslError, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidSslError, ['hashCode']);
  dart.defineLazy(types.AndroidSslError, {
    /*types.AndroidSslError.values*/get values() {
      return T.JSArrayOfAndroidSslError().of([types.AndroidSslError.SSL_NOTYETVALID, types.AndroidSslError.SSL_EXPIRED, types.AndroidSslError.SSL_IDMISMATCH, types.AndroidSslError.SSL_UNTRUSTED, types.AndroidSslError.SSL_DATE_INVALID, types.AndroidSslError.SSL_INVALID])[S.$toSet]();
    },
    /*types.AndroidSslError.SSL_NOTYETVALID*/get SSL_NOTYETVALID() {
      return C[232] || CT.C232;
    },
    /*types.AndroidSslError.SSL_EXPIRED*/get SSL_EXPIRED() {
      return C[233] || CT.C233;
    },
    /*types.AndroidSslError.SSL_IDMISMATCH*/get SSL_IDMISMATCH() {
      return C[234] || CT.C234;
    },
    /*types.AndroidSslError.SSL_UNTRUSTED*/get SSL_UNTRUSTED() {
      return C[235] || CT.C235;
    },
    /*types.AndroidSslError.SSL_DATE_INVALID*/get SSL_DATE_INVALID() {
      return C[236] || CT.C236;
    },
    /*types.AndroidSslError.SSL_INVALID*/get SSL_INVALID() {
      return C[237] || CT.C237;
    }
  }, false);
  types.IOSSslError = class IOSSslError extends core.Object {
    get [S._value$1]() {
      return this[S$._value$49];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSSslError.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5143, 26, "element");
            return element.toValue() == value;
          }, T.IOSSslErrorTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 3:
        {
          return "DENY";
        }
        case 4:
        {
          return "UNSPECIFIED";
        }
        case 5:
        {
          return "RECOVERABLE_TRUST_FAILURE";
        }
        case 6:
        {
          return "FATAL_TRUST_FAILURE";
        }
        case 7:
        {
          return "OTHER_ERROR";
        }
        case 0:
        default:
        {
          return "INVALID";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSSslError._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5128, 36, "_value");
    this[S$._value$49] = _value;
    ;
  }).prototype = types.IOSSslError.prototype;
  dart.addTypeTests(types.IOSSslError);
  dart.addTypeCaches(types.IOSSslError);
  dart.setMethodSignature(types.IOSSslError, () => ({
    __proto__: dart.getMethods(types.IOSSslError.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSSslError, I[53]);
  dart.setFieldSignature(types.IOSSslError, () => ({
    __proto__: dart.getFields(types.IOSSslError.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSSslError, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSSslError, ['hashCode']);
  dart.defineLazy(types.IOSSslError, {
    /*types.IOSSslError.values*/get values() {
      return T.JSArrayOfIOSSslError().of([types.IOSSslError.INVALID, types.IOSSslError.DENY, types.IOSSslError.UNSPECIFIED, types.IOSSslError.RECOVERABLE_TRUST_FAILURE, types.IOSSslError.FATAL_TRUST_FAILURE, types.IOSSslError.OTHER_ERROR])[S.$toSet]();
    },
    /*types.IOSSslError.INVALID*/get INVALID() {
      return C[238] || CT.C238;
    },
    /*types.IOSSslError.DENY*/get DENY() {
      return C[239] || CT.C239;
    },
    /*types.IOSSslError.UNSPECIFIED*/get UNSPECIFIED() {
      return C[240] || CT.C240;
    },
    /*types.IOSSslError.RECOVERABLE_TRUST_FAILURE*/get RECOVERABLE_TRUST_FAILURE() {
      return C[241] || CT.C241;
    },
    /*types.IOSSslError.FATAL_TRUST_FAILURE*/get FATAL_TRUST_FAILURE() {
      return C[242] || CT.C242;
    },
    /*types.IOSSslError.OTHER_ERROR*/get OTHER_ERROR() {
      return C[243] || CT.C243;
    }
  }, false);
  types.IOSUIScrollViewContentInsetAdjustmentBehavior = class IOSUIScrollViewContentInsetAdjustmentBehavior extends core.Object {
    get [S._value$1]() {
      return this[S$._value$50];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSUIScrollViewContentInsetAdjustmentBehavior.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5215, 26, "element");
            return element.toValue() == value;
          }, T.IOSUIScrollViewContentInsetAdjustmentBehaviorTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "SCROLLABLE_AXES";
        }
        case 2:
        {
          return "NEVER";
        }
        case 3:
        {
          return "ALWAYS";
        }
        case 0:
        default:
        {
          return "AUTOMATIC";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSUIScrollViewContentInsetAdjustmentBehavior._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5202, 70, "_value");
    this[S$._value$50] = _value;
    ;
  }).prototype = types.IOSUIScrollViewContentInsetAdjustmentBehavior.prototype;
  dart.addTypeTests(types.IOSUIScrollViewContentInsetAdjustmentBehavior);
  dart.addTypeCaches(types.IOSUIScrollViewContentInsetAdjustmentBehavior);
  dart.setMethodSignature(types.IOSUIScrollViewContentInsetAdjustmentBehavior, () => ({
    __proto__: dart.getMethods(types.IOSUIScrollViewContentInsetAdjustmentBehavior.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSUIScrollViewContentInsetAdjustmentBehavior, I[53]);
  dart.setFieldSignature(types.IOSUIScrollViewContentInsetAdjustmentBehavior, () => ({
    __proto__: dart.getFields(types.IOSUIScrollViewContentInsetAdjustmentBehavior.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSUIScrollViewContentInsetAdjustmentBehavior, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSUIScrollViewContentInsetAdjustmentBehavior, ['hashCode']);
  dart.defineLazy(types.IOSUIScrollViewContentInsetAdjustmentBehavior, {
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.values*/get values() {
      return T.JSArrayOfIOSUIScrollViewContentInsetAdjustmentBehavior().of([types.IOSUIScrollViewContentInsetAdjustmentBehavior.AUTOMATIC, types.IOSUIScrollViewContentInsetAdjustmentBehavior.SCROLLABLE_AXES, types.IOSUIScrollViewContentInsetAdjustmentBehavior.NEVER, types.IOSUIScrollViewContentInsetAdjustmentBehavior.ALWAYS])[S.$toSet]();
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.AUTOMATIC*/get AUTOMATIC() {
      return C[244] || CT.C244;
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.SCROLLABLE_AXES*/get SCROLLABLE_AXES() {
      return C[245] || CT.C245;
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.NEVER*/get NEVER() {
      return C[50] || CT.C50;
    },
    /*types.IOSUIScrollViewContentInsetAdjustmentBehavior.ALWAYS*/get ALWAYS() {
      return C[246] || CT.C246;
    }
  }, false);
  types.SslCertificate = class SslCertificate extends core.Object {
    get issuedBy() {
      return this[S$.issuedBy];
    }
    set issuedBy(value) {
      this[S$.issuedBy] = value;
    }
    get issuedTo() {
      return this[S$.issuedTo];
    }
    set issuedTo(value) {
      this[S$.issuedTo] = value;
    }
    get validNotAfterDate() {
      return this[S$.validNotAfterDate];
    }
    set validNotAfterDate(value) {
      this[S$.validNotAfterDate] = value;
    }
    get validNotBeforeDate() {
      return this[S$.validNotBeforeDate];
    }
    set validNotBeforeDate(value) {
      this[S$.validNotBeforeDate] = value;
    }
    get x509Certificate() {
      return this[S$.x509Certificate];
    }
    set x509Certificate(value) {
      this[S$.x509Certificate] = value;
    }
    static fromMap(map) {
      let t86, t86$, t86$0, t86$1, t86$2, t86$3, t86$4, t86$5, t86$6, t86$7;
      if (map == null) {
        return null;
      }
      let x509Certificate = null;
      try {
        x509Certificate = x509_certificate.X509Certificate.fromData({data: typed_data.Uint8List.as(map[S.$_get]("x509Certificate"))});
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stacktrace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          core.print(e);
          core.print(stacktrace);
        } else
          throw e$;
      }
      if (platform.defaultTargetPlatform == platform.TargetPlatform.iOS) {
        if (x509Certificate != null) {
          return new types.SslCertificate.new({issuedBy: new types.SslCertificateDName.new({CName: (t86 = x509Certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.COMMON_NAME}), t86 == null ? "" : t86), DName: (t86$ = x509Certificate.issuerDistinguishedName, t86$ == null ? "" : t86$), OName: (t86$0 = x509Certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATION_NAME}), t86$0 == null ? "" : t86$0), UName: (t86$1 = x509Certificate.issuer({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATIONAL_UNIT_NAME}), t86$1 == null ? "" : t86$1)}), issuedTo: new types.SslCertificateDName.new({CName: (t86$2 = x509Certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.COMMON_NAME}), t86$2 == null ? "" : t86$2), DName: (t86$3 = x509Certificate.subjectDistinguishedName, t86$3 == null ? "" : t86$3), OName: (t86$4 = x509Certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATION_NAME}), t86$4 == null ? "" : t86$4), UName: (t86$5 = x509Certificate.subject({dn: asn1_distinguished_names.ASN1DistinguishedNames.ORGANIZATIONAL_UNIT_NAME}), t86$5 == null ? "" : t86$5)}), validNotAfterDate: x509Certificate.notAfter, validNotBeforeDate: x509Certificate.notBefore, x509Certificate: x509Certificate});
        }
        return null;
      }
      return new types.SslCertificate.new({issuedBy: types.SslCertificateDName.fromMap(T.MapNOfString$dynamic().as((t86$6 = map[S.$_get]("issuedBy"), t86$6 == null ? null : dart.dgsend(t86$6, [core.String, dart.dynamic], 'cast', [])))), issuedTo: types.SslCertificateDName.fromMap(T.MapNOfString$dynamic().as((t86$7 = map[S.$_get]("issuedTo"), t86$7 == null ? null : dart.dgsend(t86$7, [core.String, dart.dynamic], 'cast', [])))), validNotAfterDate: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(map[S.$_get]("validNotAfterDate"))), validNotBeforeDate: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(map[S.$_get]("validNotBeforeDate"))), x509Certificate: x509Certificate});
    }
    toMap() {
      let t86, t86$, t86$0, t86$1, t86$2;
      return new (T.IdentityMapOfString$dynamic()).from(["issuedBy", (t86 = this.issuedBy, t86 == null ? null : t86.toMap()), "issuedTo", (t86$ = this.issuedTo, t86$ == null ? null : t86$.toMap()), "validNotAfterDate", (t86$0 = this.validNotAfterDate, t86$0 == null ? null : t86$0.millisecondsSinceEpoch), "validNotBeforeDate", (t86$1 = this.validNotBeforeDate, t86$1 == null ? null : t86$1.millisecondsSinceEpoch), "x509Certificate", (t86$2 = this.x509Certificate, t86$2 == null ? null : t86$2.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SslCertificate.new = function(opts) {
    let issuedBy = opts && 'issuedBy' in opts ? opts.issuedBy : null;
    let issuedTo = opts && 'issuedTo' in opts ? opts.issuedTo : null;
    let validNotAfterDate = opts && 'validNotAfterDate' in opts ? opts.validNotAfterDate : null;
    let validNotBeforeDate = opts && 'validNotBeforeDate' in opts ? opts.validNotBeforeDate : null;
    let x509Certificate = opts && 'x509Certificate' in opts ? opts.x509Certificate : null;
    this[S$.issuedBy] = issuedBy;
    this[S$.issuedTo] = issuedTo;
    this[S$.validNotAfterDate] = validNotAfterDate;
    this[S$.validNotBeforeDate] = validNotBeforeDate;
    this[S$.x509Certificate] = x509Certificate;
    ;
  }).prototype = types.SslCertificate.prototype;
  dart.addTypeTests(types.SslCertificate);
  dart.addTypeCaches(types.SslCertificate);
  dart.setMethodSignature(types.SslCertificate, () => ({
    __proto__: dart.getMethods(types.SslCertificate.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.SslCertificate, I[53]);
  dart.setFieldSignature(types.SslCertificate, () => ({
    __proto__: dart.getFields(types.SslCertificate.__proto__),
    issuedBy: dart.fieldType(dart.nullable(types.SslCertificateDName)),
    issuedTo: dart.fieldType(dart.nullable(types.SslCertificateDName)),
    validNotAfterDate: dart.fieldType(dart.nullable(core.DateTime)),
    validNotBeforeDate: dart.fieldType(dart.nullable(core.DateTime)),
    x509Certificate: dart.fieldType(dart.nullable(x509_certificate.X509Certificate))
  }));
  dart.defineExtensionMethods(types.SslCertificate, ['toString']);
  types.SslCertificateDName = class SslCertificateDName extends core.Object {
    get CName() {
      return this[S$.CName];
    }
    set CName(value) {
      this[S$.CName] = value;
    }
    get DName() {
      return this[S$.DName];
    }
    set DName(value) {
      this[S$.DName] = value;
    }
    get OName() {
      return this[S$.OName];
    }
    set OName(value) {
      this[S$.OName] = value;
    }
    get UName() {
      return this[S$.UName];
    }
    set UName(value) {
      this[S$.UName] = value;
    }
    static fromMap(map) {
      let t86, t86$, t86$0, t86$1;
      return map != null ? new types.SslCertificateDName.new({CName: T.StringN().as((t86 = map[S.$_get]("CName"), t86 == null ? "" : t86)), DName: T.StringN().as((t86$ = map[S.$_get]("DName"), t86$ == null ? "" : t86$)), OName: T.StringN().as((t86$0 = map[S.$_get]("OName"), t86$0 == null ? "" : t86$0)), UName: T.StringN().as((t86$1 = map[S.$_get]("UName"), t86$1 == null ? "" : t86$1))}) : null;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["CName", this.CName, "DName", this.DName, "OName", this.OName, "UName", this.UName]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.SslCertificateDName.new = function(opts) {
    let CName = opts && 'CName' in opts ? opts.CName : "";
    let DName = opts && 'DName' in opts ? opts.DName : "";
    let OName = opts && 'OName' in opts ? opts.OName : "";
    let UName = opts && 'UName' in opts ? opts.UName : "";
    this[S$.CName] = CName;
    this[S$.DName] = DName;
    this[S$.OName] = OName;
    this[S$.UName] = UName;
    ;
  }).prototype = types.SslCertificateDName.prototype;
  dart.addTypeTests(types.SslCertificateDName);
  dart.addTypeCaches(types.SslCertificateDName);
  dart.setMethodSignature(types.SslCertificateDName, () => ({
    __proto__: dart.getMethods(types.SslCertificateDName.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.SslCertificateDName, I[53]);
  dart.setFieldSignature(types.SslCertificateDName, () => ({
    __proto__: dart.getFields(types.SslCertificateDName.__proto__),
    CName: dart.fieldType(dart.nullable(core.String)),
    DName: dart.fieldType(dart.nullable(core.String)),
    OName: dart.fieldType(dart.nullable(core.String)),
    UName: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.SslCertificateDName, ['toString']);
  types.LoginRequest = class LoginRequest extends core.Object {
    get realm() {
      return this[S$.realm$1];
    }
    set realm(value) {
      this[S$.realm$1] = value;
    }
    get account() {
      return this[S$.account];
    }
    set account(value) {
      this[S$.account] = value;
    }
    get args() {
      return this[S$.args];
    }
    set args(value) {
      this[S$.args] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.LoginRequest.new({realm: core.String.as(map[S.$_get]("realm")), account: T.StringN().as(map[S.$_get]("account")), args: core.String.as(map[S.$_get]("args"))});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["realm", this.realm, "account", this.account, "args", this.args]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.LoginRequest.new = function(opts) {
    let realm = opts && 'realm' in opts ? opts.realm : null;
    if (realm == null) dart.nullFailed(I[52], 5435, 31, "realm");
    let account = opts && 'account' in opts ? opts.account : null;
    let args = opts && 'args' in opts ? opts.args : null;
    if (args == null) dart.nullFailed(I[52], 5435, 66, "args");
    this[S$.realm$1] = realm;
    this[S$.account] = account;
    this[S$.args] = args;
    ;
  }).prototype = types.LoginRequest.prototype;
  dart.addTypeTests(types.LoginRequest);
  dart.addTypeCaches(types.LoginRequest);
  dart.setMethodSignature(types.LoginRequest, () => ({
    __proto__: dart.getMethods(types.LoginRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.LoginRequest, I[53]);
  dart.setFieldSignature(types.LoginRequest, () => ({
    __proto__: dart.getFields(types.LoginRequest.__proto__),
    realm: dart.fieldType(core.String),
    account: dart.fieldType(dart.nullable(core.String)),
    args: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(types.LoginRequest, ['toString']);
  types.UserScriptInjectionTime = class UserScriptInjectionTime extends core.Object {
    get [S._value$1]() {
      return this[S$._value$51];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.UserScriptInjectionTime.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5477, 26, "element");
            return element.toValue() == value;
          }, T.UserScriptInjectionTimeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "AT_DOCUMENT_END";
        }
        case 0:
        default:
        {
          return "AT_DOCUMENT_START";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.UserScriptInjectionTime._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5466, 48, "_value");
    this[S$._value$51] = _value;
    ;
  }).prototype = types.UserScriptInjectionTime.prototype;
  dart.addTypeTests(types.UserScriptInjectionTime);
  dart.addTypeCaches(types.UserScriptInjectionTime);
  dart.setMethodSignature(types.UserScriptInjectionTime, () => ({
    __proto__: dart.getMethods(types.UserScriptInjectionTime.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.UserScriptInjectionTime, I[53]);
  dart.setFieldSignature(types.UserScriptInjectionTime, () => ({
    __proto__: dart.getFields(types.UserScriptInjectionTime.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.UserScriptInjectionTime, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.UserScriptInjectionTime, ['hashCode']);
  dart.defineLazy(types.UserScriptInjectionTime, {
    /*types.UserScriptInjectionTime.values*/get values() {
      return T.JSArrayOfUserScriptInjectionTime().of([types.UserScriptInjectionTime.AT_DOCUMENT_START, types.UserScriptInjectionTime.AT_DOCUMENT_END])[S.$toSet]();
    },
    /*types.UserScriptInjectionTime.AT_DOCUMENT_START*/get AT_DOCUMENT_START() {
      return C[247] || CT.C247;
    },
    /*types.UserScriptInjectionTime.AT_DOCUMENT_END*/get AT_DOCUMENT_END() {
      return C[248] || CT.C248;
    }
  }, false);
  types.UserScript = class UserScript extends core.Object {
    get groupName() {
      return this[S$.groupName];
    }
    set groupName(value) {
      this[S$.groupName] = value;
    }
    get source() {
      return this[S$.source];
    }
    set source(value) {
      this[S$.source] = value;
    }
    get injectionTime() {
      return this[S$.injectionTime];
    }
    set injectionTime(value) {
      this[S$.injectionTime] = value;
    }
    get iosForMainFrameOnly() {
      return this[S$.iosForMainFrameOnly];
    }
    set iosForMainFrameOnly(value) {
      this[S$.iosForMainFrameOnly] = value;
    }
    get contentWorld() {
      let t87;
      return dart.test(this[S$.__UserScript_contentWorld_isSet]) ? (t87 = this[S$.__UserScript_contentWorld], t87) : dart.throw(new _internal.LateError.fieldNI("contentWorld"));
    }
    set contentWorld(t87) {
      if (t87 == null) dart.nullFailed(I[52], 5534, 21, "null");
      this[S$.__UserScript_contentWorld_isSet] = true;
      this[S$.__UserScript_contentWorld] = t87;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["groupName", this.groupName, "source", this.source, "injectionTime", this.injectionTime.toValue(), "iosForMainFrameOnly", this.iosForMainFrameOnly, "contentWorld", this.contentWorld.toMap()]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.UserScript.new = function(opts) {
    let t87;
    let groupName = opts && 'groupName' in opts ? opts.groupName : null;
    let source = opts && 'source' in opts ? opts.source : null;
    if (source == null) dart.nullFailed(I[52], 5538, 21, "source");
    let injectionTime = opts && 'injectionTime' in opts ? opts.injectionTime : null;
    if (injectionTime == null) dart.nullFailed(I[52], 5539, 21, "injectionTime");
    let iosForMainFrameOnly = opts && 'iosForMainFrameOnly' in opts ? opts.iosForMainFrameOnly : true;
    if (iosForMainFrameOnly == null) dart.nullFailed(I[52], 5540, 12, "iosForMainFrameOnly");
    let contentWorld = opts && 'contentWorld' in opts ? opts.contentWorld : null;
    this[S$.__UserScript_contentWorld] = null;
    this[S$.__UserScript_contentWorld_isSet] = false;
    this[S$.groupName] = groupName;
    this[S$.source] = source;
    this[S$.injectionTime] = injectionTime;
    this[S$.iosForMainFrameOnly] = iosForMainFrameOnly;
    this.contentWorld = (t87 = contentWorld, t87 == null ? types.ContentWorld.PAGE : t87);
  }).prototype = types.UserScript.prototype;
  dart.addTypeTests(types.UserScript);
  dart.addTypeCaches(types.UserScript);
  dart.setMethodSignature(types.UserScript, () => ({
    __proto__: dart.getMethods(types.UserScript.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(types.UserScript, () => ({
    __proto__: dart.getGetters(types.UserScript.__proto__),
    contentWorld: types.ContentWorld
  }));
  dart.setSetterSignature(types.UserScript, () => ({
    __proto__: dart.getSetters(types.UserScript.__proto__),
    contentWorld: types.ContentWorld
  }));
  dart.setLibraryUri(types.UserScript, I[53]);
  dart.setFieldSignature(types.UserScript, () => ({
    __proto__: dart.getFields(types.UserScript.__proto__),
    groupName: dart.fieldType(dart.nullable(core.String)),
    source: dart.fieldType(core.String),
    injectionTime: dart.fieldType(types.UserScriptInjectionTime),
    iosForMainFrameOnly: dart.fieldType(core.bool),
    [S$.__UserScript_contentWorld]: dart.fieldType(dart.nullable(types.ContentWorld)),
    [S$.__UserScript_contentWorld_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(types.UserScript, ['toString']);
  types.ContentWorld = class ContentWorld extends core.Object {
    get name() {
      return this[S$.name$5];
    }
    set name(value) {
      super.name = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["name", this.name]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ContentWorld.world = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[52], 5584, 37, "name");
    this[S$.name$5] = name;
    if (!(!this.name[S.$startsWith]("WINDOW-ID-") && !this.name[S.$contains](types._contentWorldNameRegExp))) dart.assertFailed(null, I[52], 5586, 12, "!this.name.startsWith(\"WINDOW-ID-\") &&\n        !this.name.contains(_contentWorldNameRegExp)");
  }).prototype = types.ContentWorld.prototype;
  dart.addTypeTests(types.ContentWorld);
  dart.addTypeCaches(types.ContentWorld);
  dart.setMethodSignature(types.ContentWorld, () => ({
    __proto__: dart.getMethods(types.ContentWorld.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.ContentWorld, I[53]);
  dart.setFieldSignature(types.ContentWorld, () => ({
    __proto__: dart.getFields(types.ContentWorld.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.ContentWorld, ['toString']);
  dart.defineLazy(types.ContentWorld, {
    /*types.ContentWorld.DEFAULT_CLIENT*/get DEFAULT_CLIENT() {
      return new types.ContentWorld.world({name: "defaultClient"});
    },
    /*types.ContentWorld.PAGE*/get PAGE() {
      return new types.ContentWorld.world({name: "page"});
    }
  }, false);
  types.CallAsyncJavaScriptResult = class CallAsyncJavaScriptResult extends core.Object {
    get value() {
      return this[S$.value$5];
    }
    set value(value) {
      this[S$.value$5] = value;
    }
    get error() {
      return this[S$.error];
    }
    set error(value) {
      this[S$.error] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["value", this.value, "error", this.error]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.CallAsyncJavaScriptResult.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let error = opts && 'error' in opts ? opts.error : null;
    this[S$.value$5] = value;
    this[S$.error] = error;
    ;
  }).prototype = types.CallAsyncJavaScriptResult.prototype;
  dart.addTypeTests(types.CallAsyncJavaScriptResult);
  dart.addTypeCaches(types.CallAsyncJavaScriptResult);
  dart.setMethodSignature(types.CallAsyncJavaScriptResult, () => ({
    __proto__: dart.getMethods(types.CallAsyncJavaScriptResult.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.CallAsyncJavaScriptResult, I[53]);
  dart.setFieldSignature(types.CallAsyncJavaScriptResult, () => ({
    __proto__: dart.getFields(types.CallAsyncJavaScriptResult.__proto__),
    value: dart.fieldType(dart.dynamic),
    error: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.CallAsyncJavaScriptResult, ['toString']);
  types.InAppWebViewRect = class InAppWebViewRect extends core.Object {
    get x() {
      return this[S$.x];
    }
    set x(value) {
      this[S$.x] = value;
    }
    get y() {
      return this[S$.y];
    }
    set y(value) {
      this[S$.y] = value;
    }
    get width() {
      return this[S$.width$1];
    }
    set width(value) {
      this[S$.width$1] = value;
    }
    get height() {
      return this[S$.height$1];
    }
    set height(value) {
      this[S$.height$1] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["x", this.x, "y", this.y, "width", this.width, "height", this.height]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.InAppWebViewRect.new = function(opts) {
    let x = opts && 'x' in opts ? opts.x : null;
    if (x == null) dart.nullFailed(I[52], 5655, 22, "x");
    let y = opts && 'y' in opts ? opts.y : null;
    if (y == null) dart.nullFailed(I[52], 5656, 21, "y");
    let width = opts && 'width' in opts ? opts.width : null;
    if (width == null) dart.nullFailed(I[52], 5657, 21, "width");
    let height = opts && 'height' in opts ? opts.height : null;
    if (height == null) dart.nullFailed(I[52], 5658, 21, "height");
    this[S$.x] = x;
    this[S$.y] = y;
    this[S$.width$1] = width;
    this[S$.height$1] = height;
    if (!(dart.notNull(this.x) >= 0 && dart.notNull(this.y) >= 0 && dart.notNull(this.width) >= 0 && dart.notNull(this.height) >= 0)) dart.assertFailed(null, I[52], 5659, 12, "this.x >= 0 && this.y >= 0 && this.width >= 0 && this.height >= 0");
  }).prototype = types.InAppWebViewRect.prototype;
  dart.addTypeTests(types.InAppWebViewRect);
  dart.addTypeCaches(types.InAppWebViewRect);
  dart.setMethodSignature(types.InAppWebViewRect, () => ({
    __proto__: dart.getMethods(types.InAppWebViewRect.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.InAppWebViewRect, I[53]);
  dart.setFieldSignature(types.InAppWebViewRect, () => ({
    __proto__: dart.getFields(types.InAppWebViewRect.__proto__),
    x: dart.fieldType(core.double),
    y: dart.fieldType(core.double),
    width: dart.fieldType(core.double),
    height: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(types.InAppWebViewRect, ['toString']);
  types.CompressFormat = class CompressFormat extends core.Object {
    get [S._value$1]() {
      return this[S$._value$52];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.CompressFormat.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5694, 26, "element");
            return element.toValue() == value;
          }, T.CompressFormatTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.CompressFormat._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5680, 39, "_value");
    this[S$._value$52] = _value;
    ;
  }).prototype = types.CompressFormat.prototype;
  dart.addTypeTests(types.CompressFormat);
  dart.addTypeCaches(types.CompressFormat);
  dart.setMethodSignature(types.CompressFormat, () => ({
    __proto__: dart.getMethods(types.CompressFormat.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.CompressFormat, I[53]);
  dart.setFieldSignature(types.CompressFormat, () => ({
    __proto__: dart.getFields(types.CompressFormat.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.CompressFormat, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.CompressFormat, ['hashCode']);
  dart.defineLazy(types.CompressFormat, {
    /*types.CompressFormat.values*/get values() {
      return T.JSArrayOfCompressFormat().of([types.CompressFormat.JPEG, types.CompressFormat.PNG, types.CompressFormat.WEBP, types.CompressFormat.WEBP_LOSSY, types.CompressFormat.WEBP_LOSSLESS])[S.$toSet]();
    },
    /*types.CompressFormat.PNG*/get PNG() {
      return C[249] || CT.C249;
    },
    /*types.CompressFormat.JPEG*/get JPEG() {
      return C[250] || CT.C250;
    },
    /*types.CompressFormat.WEBP*/get WEBP() {
      return C[251] || CT.C251;
    },
    /*types.CompressFormat.WEBP_LOSSY*/get WEBP_LOSSY() {
      return C[252] || CT.C252;
    },
    /*types.CompressFormat.WEBP_LOSSLESS*/get WEBP_LOSSLESS() {
      return C[253] || CT.C253;
    }
  }, false);
  types.ScreenshotConfiguration = class ScreenshotConfiguration extends core.Object {
    get rect() {
      return this[S$.rect];
    }
    set rect(value) {
      this[S$.rect] = value;
    }
    get snapshotWidth() {
      return this[S$.snapshotWidth];
    }
    set snapshotWidth(value) {
      this[S$.snapshotWidth] = value;
    }
    get compressFormat() {
      return this[S$.compressFormat];
    }
    set compressFormat(value) {
      this[S$.compressFormat] = value;
    }
    get quality() {
      return this[S$.quality];
    }
    set quality(value) {
      this[S$.quality] = value;
    }
    get iosAfterScreenUpdates() {
      return this[S$.iosAfterScreenUpdates];
    }
    set iosAfterScreenUpdates(value) {
      this[S$.iosAfterScreenUpdates] = value;
    }
    toMap() {
      let t89;
      return new (T.IdentityMapOfString$dynamic()).from(["rect", (t89 = this.rect, t89 == null ? null : t89.toMap()), "snapshotWidth", this.snapshotWidth, "compressFormat", this.compressFormat.toValue(), "quality", this.quality, "iosAfterScreenUpdates", this.iosAfterScreenUpdates]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ScreenshotConfiguration.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let snapshotWidth = opts && 'snapshotWidth' in opts ? opts.snapshotWidth : null;
    let compressFormat = opts && 'compressFormat' in opts ? opts.compressFormat : C[249] || CT.C249;
    if (compressFormat == null) dart.nullFailed(I[52], 5784, 12, "compressFormat");
    let quality = opts && 'quality' in opts ? opts.quality : 100;
    if (quality == null) dart.nullFailed(I[52], 5785, 12, "quality");
    let iosAfterScreenUpdates = opts && 'iosAfterScreenUpdates' in opts ? opts.iosAfterScreenUpdates : true;
    if (iosAfterScreenUpdates == null) dart.nullFailed(I[52], 5786, 12, "iosAfterScreenUpdates");
    this[S$.rect] = rect;
    this[S$.snapshotWidth] = snapshotWidth;
    this[S$.compressFormat] = compressFormat;
    this[S$.quality] = quality;
    this[S$.iosAfterScreenUpdates] = iosAfterScreenUpdates;
    if (!(dart.notNull(this.quality) >= 0)) dart.assertFailed(null, I[52], 5787, 12, "this.quality >= 0");
  }).prototype = types.ScreenshotConfiguration.prototype;
  dart.addTypeTests(types.ScreenshotConfiguration);
  dart.addTypeCaches(types.ScreenshotConfiguration);
  dart.setMethodSignature(types.ScreenshotConfiguration, () => ({
    __proto__: dart.getMethods(types.ScreenshotConfiguration.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.ScreenshotConfiguration, I[53]);
  dart.setFieldSignature(types.ScreenshotConfiguration, () => ({
    __proto__: dart.getFields(types.ScreenshotConfiguration.__proto__),
    rect: dart.fieldType(dart.nullable(types.InAppWebViewRect)),
    snapshotWidth: dart.fieldType(dart.nullable(core.double)),
    compressFormat: dart.fieldType(types.CompressFormat),
    quality: dart.fieldType(core.int),
    iosAfterScreenUpdates: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(types.ScreenshotConfiguration, ['toString']);
  types.IOSWKPDFConfiguration = class IOSWKPDFConfiguration extends core.Object {
    get rect() {
      return this[S$.rect$1];
    }
    set rect(value) {
      this[S$.rect$1] = value;
    }
    toMap() {
      let t89;
      return new (T.IdentityMapOfString$dynamic()).from(["rect", (t89 = this.rect, t89 == null ? null : t89.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKPDFConfiguration.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    this[S$.rect$1] = rect;
    ;
  }).prototype = types.IOSWKPDFConfiguration.prototype;
  dart.addTypeTests(types.IOSWKPDFConfiguration);
  dart.addTypeCaches(types.IOSWKPDFConfiguration);
  dart.setMethodSignature(types.IOSWKPDFConfiguration, () => ({
    __proto__: dart.getMethods(types.IOSWKPDFConfiguration.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSWKPDFConfiguration, I[53]);
  dart.setFieldSignature(types.IOSWKPDFConfiguration, () => ({
    __proto__: dart.getFields(types.IOSWKPDFConfiguration.__proto__),
    rect: dart.fieldType(dart.nullable(types.InAppWebViewRect))
  }));
  dart.defineExtensionMethods(types.IOSWKPDFConfiguration, ['toString']);
  types.WebArchiveFormat = class WebArchiveFormat extends core.Object {
    get [S._value$1]() {
      return this[S$._value$53];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.WebArchiveFormat.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5848, 26, "element");
            return element.toValue() == value;
          }, T.WebArchiveFormatTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.WebArchiveFormat._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5839, 41, "_value");
    this[S$._value$53] = _value;
    ;
  }).prototype = types.WebArchiveFormat.prototype;
  dart.addTypeTests(types.WebArchiveFormat);
  dart.addTypeCaches(types.WebArchiveFormat);
  dart.setMethodSignature(types.WebArchiveFormat, () => ({
    __proto__: dart.getMethods(types.WebArchiveFormat.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.WebArchiveFormat, I[53]);
  dart.setFieldSignature(types.WebArchiveFormat, () => ({
    __proto__: dart.getFields(types.WebArchiveFormat.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.WebArchiveFormat, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.WebArchiveFormat, ['hashCode']);
  dart.defineLazy(types.WebArchiveFormat, {
    /*types.WebArchiveFormat.values*/get values() {
      return T.JSArrayOfWebArchiveFormat().of([types.WebArchiveFormat.MHT, types.WebArchiveFormat.WEBARCHIVE])[S.$toSet]();
    },
    /*types.WebArchiveFormat.MHT*/get MHT() {
      return C[254] || CT.C254;
    },
    /*types.WebArchiveFormat.WEBARCHIVE*/get WEBARCHIVE() {
      return C[255] || CT.C255;
    }
  }, false);
  types.CrossOrigin = class CrossOrigin extends core.Object {
    get [S._value$1]() {
      return this[S$._value$54];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.CrossOrigin.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5890, 26, "element");
            return element.toValue() == value;
          }, T.CrossOriginTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.CrossOrigin._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5879, 36, "_value");
    this[S$._value$54] = _value;
    ;
  }).prototype = types.CrossOrigin.prototype;
  dart.addTypeTests(types.CrossOrigin);
  dart.addTypeCaches(types.CrossOrigin);
  dart.setMethodSignature(types.CrossOrigin, () => ({
    __proto__: dart.getMethods(types.CrossOrigin.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.CrossOrigin, I[53]);
  dart.setFieldSignature(types.CrossOrigin, () => ({
    __proto__: dart.getFields(types.CrossOrigin.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.CrossOrigin, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.CrossOrigin, ['hashCode']);
  dart.defineLazy(types.CrossOrigin, {
    /*types.CrossOrigin.values*/get values() {
      return T.JSArrayOfCrossOrigin().of([types.CrossOrigin.ANONYMOUS, types.CrossOrigin.USE_CREDENTIALS])[S.$toSet]();
    },
    /*types.CrossOrigin.ANONYMOUS*/get ANONYMOUS() {
      return C[256] || CT.C256;
    },
    /*types.CrossOrigin.USE_CREDENTIALS*/get USE_CREDENTIALS() {
      return C[257] || CT.C257;
    }
  }, false);
  types.ReferrerPolicy = class ReferrerPolicy extends core.Object {
    get [S._value$1]() {
      return this[S$._value$55];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.ReferrerPolicy.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 5938, 26, "element");
            return element.toValue() == value;
          }, T.ReferrerPolicyTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.ReferrerPolicy._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 5921, 39, "_value");
    this[S$._value$55] = _value;
    ;
  }).prototype = types.ReferrerPolicy.prototype;
  dart.addTypeTests(types.ReferrerPolicy);
  dart.addTypeCaches(types.ReferrerPolicy);
  dart.setMethodSignature(types.ReferrerPolicy, () => ({
    __proto__: dart.getMethods(types.ReferrerPolicy.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.ReferrerPolicy, I[53]);
  dart.setFieldSignature(types.ReferrerPolicy, () => ({
    __proto__: dart.getFields(types.ReferrerPolicy.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.ReferrerPolicy, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.ReferrerPolicy, ['hashCode']);
  dart.defineLazy(types.ReferrerPolicy, {
    /*types.ReferrerPolicy.values*/get values() {
      return T.JSArrayOfReferrerPolicy().of([types.ReferrerPolicy.NO_REFERRER, types.ReferrerPolicy.NO_REFERRER_WHEN_DOWNGRADE, types.ReferrerPolicy.ORIGIN, types.ReferrerPolicy.ORIGIN_WHEN_CROSS_ORIGIN, types.ReferrerPolicy.SAME_ORIGIN, types.ReferrerPolicy.STRICT_ORIGIN, types.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN, types.ReferrerPolicy.UNSAFE_URL])[S.$toSet]();
    },
    /*types.ReferrerPolicy.NO_REFERRER*/get NO_REFERRER() {
      return C[258] || CT.C258;
    },
    /*types.ReferrerPolicy.NO_REFERRER_WHEN_DOWNGRADE*/get NO_REFERRER_WHEN_DOWNGRADE() {
      return C[259] || CT.C259;
    },
    /*types.ReferrerPolicy.ORIGIN*/get ORIGIN() {
      return C[260] || CT.C260;
    },
    /*types.ReferrerPolicy.ORIGIN_WHEN_CROSS_ORIGIN*/get ORIGIN_WHEN_CROSS_ORIGIN() {
      return C[261] || CT.C261;
    },
    /*types.ReferrerPolicy.SAME_ORIGIN*/get SAME_ORIGIN() {
      return C[262] || CT.C262;
    },
    /*types.ReferrerPolicy.STRICT_ORIGIN*/get STRICT_ORIGIN() {
      return C[263] || CT.C263;
    },
    /*types.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN*/get STRICT_ORIGIN_WHEN_CROSS_ORIGIN() {
      return C[264] || CT.C264;
    },
    /*types.ReferrerPolicy.UNSAFE_URL*/get UNSAFE_URL() {
      return C[265] || CT.C265;
    }
  }, false);
  types.ScriptHtmlTagAttributes = class ScriptHtmlTagAttributes extends core.Object {
    get type() {
      return this[S$.type$3];
    }
    set type(value) {
      this[S$.type$3] = value;
    }
    get id() {
      return this[S$.id$4];
    }
    set id(value) {
      this[S$.id$4] = value;
    }
    get async() {
      return this[S$.async];
    }
    set async(value) {
      this[S$.async] = value;
    }
    get defer() {
      return this[S$.defer];
    }
    set defer(value) {
      this[S$.defer] = value;
    }
    get crossOrigin() {
      return this[S$.crossOrigin];
    }
    set crossOrigin(value) {
      this[S$.crossOrigin] = value;
    }
    get integrity() {
      return this[S$.integrity$1];
    }
    set integrity(value) {
      this[S$.integrity$1] = value;
    }
    get noModule() {
      return this[S$.noModule];
    }
    set noModule(value) {
      this[S$.noModule] = value;
    }
    get nonce() {
      return this[S$.nonce];
    }
    set nonce(value) {
      this[S$.nonce] = value;
    }
    get referrerPolicy() {
      return this[S$.referrerPolicy$1];
    }
    set referrerPolicy(value) {
      this[S$.referrerPolicy$1] = value;
    }
    get onLoad() {
      return this[S$.onLoad];
    }
    set onLoad(value) {
      this[S$.onLoad] = value;
    }
    get onError() {
      return this[S$.onError];
    }
    set onError(value) {
      this[S$.onError] = value;
    }
    toMap() {
      let t92, t92$;
      return new (T.IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "async", this.async, "defer", this.defer, "crossOrigin", (t92 = this.crossOrigin, t92 == null ? null : t92.toValue()), "integrity", this.integrity, "noModule", this.noModule, "nonce", this.nonce, "referrerPolicy", (t92$ = this.referrerPolicy, t92$ == null ? null : t92$.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.ScriptHtmlTagAttributes.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : "text/javascript";
    if (type == null) dart.nullFailed(I[52], 6051, 13, "type");
    let id = opts && 'id' in opts ? opts.id : null;
    let async = opts && 'async' in opts ? opts.async : null;
    let defer = opts && 'defer' in opts ? opts.defer : null;
    let crossOrigin = opts && 'crossOrigin' in opts ? opts.crossOrigin : null;
    let integrity = opts && 'integrity' in opts ? opts.integrity : null;
    let noModule = opts && 'noModule' in opts ? opts.noModule : null;
    let nonce = opts && 'nonce' in opts ? opts.nonce : null;
    let referrerPolicy = opts && 'referrerPolicy' in opts ? opts.referrerPolicy : null;
    let onLoad = opts && 'onLoad' in opts ? opts.onLoad : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[S$.type$3] = type;
    this[S$.id$4] = id;
    this[S$.async] = async;
    this[S$.defer] = defer;
    this[S$.crossOrigin] = crossOrigin;
    this[S$.integrity$1] = integrity;
    this[S$.noModule] = noModule;
    this[S$.nonce] = nonce;
    this[S$.referrerPolicy$1] = referrerPolicy;
    this[S$.onLoad] = onLoad;
    this[S$.onError] = onError;
    if (this.onLoad != null || this.onError != null) {
      if (!(this.id != null)) dart.assertFailed("onLoad and onError callbacks require the id property to be set.", I[52], 6063, 14, "this.id != null");
    }
  }).prototype = types.ScriptHtmlTagAttributes.prototype;
  dart.addTypeTests(types.ScriptHtmlTagAttributes);
  dart.addTypeCaches(types.ScriptHtmlTagAttributes);
  dart.setMethodSignature(types.ScriptHtmlTagAttributes, () => ({
    __proto__: dart.getMethods(types.ScriptHtmlTagAttributes.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.ScriptHtmlTagAttributes, I[53]);
  dart.setFieldSignature(types.ScriptHtmlTagAttributes, () => ({
    __proto__: dart.getFields(types.ScriptHtmlTagAttributes.__proto__),
    type: dart.fieldType(core.String),
    id: dart.fieldType(dart.nullable(core.String)),
    async: dart.fieldType(dart.nullable(core.bool)),
    defer: dart.fieldType(dart.nullable(core.bool)),
    crossOrigin: dart.fieldType(dart.nullable(types.CrossOrigin)),
    integrity: dart.fieldType(dart.nullable(core.String)),
    noModule: dart.fieldType(dart.nullable(core.bool)),
    nonce: dart.fieldType(dart.nullable(core.String)),
    referrerPolicy: dart.fieldType(dart.nullable(types.ReferrerPolicy)),
    onLoad: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, []))),
    onError: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, [])))
  }));
  dart.defineExtensionMethods(types.ScriptHtmlTagAttributes, ['toString']);
  types.CSSLinkHtmlTagAttributes = class CSSLinkHtmlTagAttributes extends core.Object {
    get id() {
      return this[S$.id$5];
    }
    set id(value) {
      this[S$.id$5] = value;
    }
    get media() {
      return this[S$.media];
    }
    set media(value) {
      this[S$.media] = value;
    }
    get crossOrigin() {
      return this[S$.crossOrigin$1];
    }
    set crossOrigin(value) {
      this[S$.crossOrigin$1] = value;
    }
    get integrity() {
      return this[S$.integrity$2];
    }
    set integrity(value) {
      this[S$.integrity$2] = value;
    }
    get referrerPolicy() {
      return this[S$.referrerPolicy$2];
    }
    set referrerPolicy(value) {
      this[S$.referrerPolicy$2] = value;
    }
    get disabled() {
      return this[S$.disabled];
    }
    set disabled(value) {
      this[S$.disabled] = value;
    }
    get alternate() {
      return this[S$.alternate];
    }
    set alternate(value) {
      this[S$.alternate] = value;
    }
    get title() {
      return this[S$.title$2];
    }
    set title(value) {
      this[S$.title$2] = value;
    }
    toMap() {
      let t92, t92$;
      return new (T.IdentityMapOfString$dynamic()).from(["id", this.id, "media", this.media, "crossOrigin", (t92 = this.crossOrigin, t92 == null ? null : t92.toValue()), "integrity", this.integrity, "referrerPolicy", (t92$ = this.referrerPolicy, t92$ == null ? null : t92$.toValue()), "disabled", this.disabled, "alternate", this.alternate, "title", this.title]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.CSSLinkHtmlTagAttributes.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let media = opts && 'media' in opts ? opts.media : null;
    let crossOrigin = opts && 'crossOrigin' in opts ? opts.crossOrigin : null;
    let integrity = opts && 'integrity' in opts ? opts.integrity : null;
    let referrerPolicy = opts && 'referrerPolicy' in opts ? opts.referrerPolicy : null;
    let disabled = opts && 'disabled' in opts ? opts.disabled : null;
    let alternate = opts && 'alternate' in opts ? opts.alternate : null;
    let title = opts && 'title' in opts ? opts.title : null;
    this[S$.id$5] = id;
    this[S$.media] = media;
    this[S$.crossOrigin$1] = crossOrigin;
    this[S$.integrity$2] = integrity;
    this[S$.referrerPolicy$2] = referrerPolicy;
    this[S$.disabled] = disabled;
    this[S$.alternate] = alternate;
    this[S$.title$2] = title;
    ;
  }).prototype = types.CSSLinkHtmlTagAttributes.prototype;
  dart.addTypeTests(types.CSSLinkHtmlTagAttributes);
  dart.addTypeCaches(types.CSSLinkHtmlTagAttributes);
  dart.setMethodSignature(types.CSSLinkHtmlTagAttributes, () => ({
    __proto__: dart.getMethods(types.CSSLinkHtmlTagAttributes.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.CSSLinkHtmlTagAttributes, I[53]);
  dart.setFieldSignature(types.CSSLinkHtmlTagAttributes, () => ({
    __proto__: dart.getFields(types.CSSLinkHtmlTagAttributes.__proto__),
    id: dart.fieldType(dart.nullable(core.String)),
    media: dart.fieldType(dart.nullable(core.String)),
    crossOrigin: dart.fieldType(dart.nullable(types.CrossOrigin)),
    integrity: dart.fieldType(dart.nullable(core.String)),
    referrerPolicy: dart.fieldType(dart.nullable(types.ReferrerPolicy)),
    disabled: dart.fieldType(dart.nullable(core.bool)),
    alternate: dart.fieldType(dart.nullable(core.bool)),
    title: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(types.CSSLinkHtmlTagAttributes, ['toString']);
  types.IOSURLResponse = class IOSURLResponse extends core.Object {
    get url() {
      return this[S$.url$12];
    }
    set url(value) {
      this[S$.url$12] = value;
    }
    get expectedContentLength() {
      return this[S$.expectedContentLength];
    }
    set expectedContentLength(value) {
      this[S$.expectedContentLength] = value;
    }
    get mimeType() {
      return this[S$.mimeType$1];
    }
    set mimeType(value) {
      this[S$.mimeType$1] = value;
    }
    get suggestedFilename() {
      return this[S$.suggestedFilename];
    }
    set suggestedFilename(value) {
      this[S$.suggestedFilename] = value;
    }
    get textEncodingName() {
      return this[S$.textEncodingName];
    }
    set textEncodingName(value) {
      this[S$.textEncodingName] = value;
    }
    get headers() {
      return this[S$.headers$4];
    }
    set headers(value) {
      this[S$.headers$4] = value;
    }
    get statusCode() {
      return this[S$.statusCode$1];
    }
    set statusCode(value) {
      this[S$.statusCode$1] = value;
    }
    static fromMap(map) {
      let t92;
      if (map == null) {
        return null;
      }
      return new types.IOSURLResponse.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, expectedContentLength: core.int.as(map[S.$_get]("expectedContentLength")), mimeType: T.StringN().as(map[S.$_get]("mimeType")), suggestedFilename: T.StringN().as(map[S.$_get]("suggestedFilename")), textEncodingName: T.StringN().as(map[S.$_get]("textEncodingName")), headers: T.MapNOfString$String().as((t92 = map[S.$_get]("headers"), t92 == null ? null : dart.dgsend(t92, [core.String, core.String], 'cast', []))), statusCode: T.intN().as(map[S.$_get]("statusCode"))});
    }
    toMap() {
      let t92;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t92 = this.url, t92 == null ? null : dart.toString(t92)), "expectedContentLength", this.expectedContentLength, "mimeType", this.mimeType, "suggestedFilename", this.suggestedFilename, "textEncodingName", this.textEncodingName, "headers", this.headers, "statusCode", this.statusCode]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSURLResponse.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let expectedContentLength = opts && 'expectedContentLength' in opts ? opts.expectedContentLength : null;
    if (expectedContentLength == null) dart.nullFailed(I[52], 6183, 21, "expectedContentLength");
    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
    let suggestedFilename = opts && 'suggestedFilename' in opts ? opts.suggestedFilename : null;
    let textEncodingName = opts && 'textEncodingName' in opts ? opts.textEncodingName : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    this[S$.url$12] = url;
    this[S$.expectedContentLength] = expectedContentLength;
    this[S$.mimeType$1] = mimeType;
    this[S$.suggestedFilename] = suggestedFilename;
    this[S$.textEncodingName] = textEncodingName;
    this[S$.headers$4] = headers;
    this[S$.statusCode$1] = statusCode;
    ;
  }).prototype = types.IOSURLResponse.prototype;
  dart.addTypeTests(types.IOSURLResponse);
  dart.addTypeCaches(types.IOSURLResponse);
  dart.setMethodSignature(types.IOSURLResponse, () => ({
    __proto__: dart.getMethods(types.IOSURLResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSURLResponse, I[53]);
  dart.setFieldSignature(types.IOSURLResponse, () => ({
    __proto__: dart.getFields(types.IOSURLResponse.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    expectedContentLength: dart.fieldType(core.int),
    mimeType: dart.fieldType(dart.nullable(core.String)),
    suggestedFilename: dart.fieldType(dart.nullable(core.String)),
    textEncodingName: dart.fieldType(dart.nullable(core.String)),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    statusCode: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(types.IOSURLResponse, ['toString']);
  types.IOSWKNavigationResponse = class IOSWKNavigationResponse extends core.Object {
    get response() {
      return this[S$.response$1];
    }
    set response(value) {
      this[S$.response$1] = value;
    }
    get isForMainFrame() {
      return this[S$.isForMainFrame$2];
    }
    set isForMainFrame(value) {
      this[S$.isForMainFrame$2] = value;
    }
    get canShowMIMEType() {
      return this[S$.canShowMIMEType];
    }
    set canShowMIMEType(value) {
      this[S$.canShowMIMEType] = value;
    }
    static fromMap(map) {
      let t92;
      if (map == null) {
        return null;
      }
      return new types.IOSWKNavigationResponse.new({response: types.IOSURLResponse.fromMap(T.MapNOfString$dynamic().as((t92 = map[S.$_get]("response"), t92 == null ? null : dart.dgsend(t92, [core.String, dart.dynamic], 'cast', [])))), isForMainFrame: core.bool.as(map[S.$_get]("isForMainFrame")), canShowMIMEType: core.bool.as(map[S.$_get]("canShowMIMEType"))});
    }
    toMap() {
      let t92;
      return new (T.IdentityMapOfString$dynamic()).from(["response", (t92 = this.response, t92 == null ? null : t92.toMap()), "isForMainFrame", this.isForMainFrame, "canShowMIMEType", this.canShowMIMEType]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKNavigationResponse.new = function(opts) {
    let response = opts && 'response' in opts ? opts.response : null;
    let isForMainFrame = opts && 'isForMainFrame' in opts ? opts.isForMainFrame : null;
    if (isForMainFrame == null) dart.nullFailed(I[52], 6239, 21, "isForMainFrame");
    let canShowMIMEType = opts && 'canShowMIMEType' in opts ? opts.canShowMIMEType : null;
    if (canShowMIMEType == null) dart.nullFailed(I[52], 6240, 21, "canShowMIMEType");
    this[S$.response$1] = response;
    this[S$.isForMainFrame$2] = isForMainFrame;
    this[S$.canShowMIMEType] = canShowMIMEType;
    ;
  }).prototype = types.IOSWKNavigationResponse.prototype;
  dart.addTypeTests(types.IOSWKNavigationResponse);
  dart.addTypeCaches(types.IOSWKNavigationResponse);
  dart.setMethodSignature(types.IOSWKNavigationResponse, () => ({
    __proto__: dart.getMethods(types.IOSWKNavigationResponse.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSWKNavigationResponse, I[53]);
  dart.setFieldSignature(types.IOSWKNavigationResponse, () => ({
    __proto__: dart.getFields(types.IOSWKNavigationResponse.__proto__),
    response: dart.fieldType(dart.nullable(types.IOSURLResponse)),
    isForMainFrame: dart.fieldType(core.bool),
    canShowMIMEType: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(types.IOSWKNavigationResponse, ['toString']);
  types.IOSNavigationResponseAction = class IOSNavigationResponseAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$56];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["action", this[S._value$1]]);
    }
  };
  (types.IOSNavigationResponseAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 6277, 52, "_value");
    this[S$._value$56] = _value;
    ;
  }).prototype = types.IOSNavigationResponseAction.prototype;
  dart.addTypeTests(types.IOSNavigationResponseAction);
  dart.addTypeCaches(types.IOSNavigationResponseAction);
  dart.setMethodSignature(types.IOSNavigationResponseAction, () => ({
    __proto__: dart.getMethods(types.IOSNavigationResponseAction.__proto__),
    toValue: dart.fnType(core.int, []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSNavigationResponseAction, I[53]);
  dart.setFieldSignature(types.IOSNavigationResponseAction, () => ({
    __proto__: dart.getFields(types.IOSNavigationResponseAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSNavigationResponseAction, ['_equals']);
  dart.defineExtensionAccessors(types.IOSNavigationResponseAction, ['hashCode']);
  dart.defineLazy(types.IOSNavigationResponseAction, {
    /*types.IOSNavigationResponseAction.CANCEL*/get CANCEL() {
      return C[266] || CT.C266;
    },
    /*types.IOSNavigationResponseAction.ALLOW*/get ALLOW() {
      return C[267] || CT.C267;
    }
  }, false);
  types.IOSShouldAllowDeprecatedTLSAction = class IOSShouldAllowDeprecatedTLSAction extends core.Object {
    get [S._value$1]() {
      return this[S$._value$57];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    toValue() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["action", this[S._value$1]]);
    }
  };
  (types.IOSShouldAllowDeprecatedTLSAction._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 6304, 58, "_value");
    this[S$._value$57] = _value;
    ;
  }).prototype = types.IOSShouldAllowDeprecatedTLSAction.prototype;
  dart.addTypeTests(types.IOSShouldAllowDeprecatedTLSAction);
  dart.addTypeCaches(types.IOSShouldAllowDeprecatedTLSAction);
  dart.setMethodSignature(types.IOSShouldAllowDeprecatedTLSAction, () => ({
    __proto__: dart.getMethods(types.IOSShouldAllowDeprecatedTLSAction.__proto__),
    toValue: dart.fnType(core.int, []),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSShouldAllowDeprecatedTLSAction, I[53]);
  dart.setFieldSignature(types.IOSShouldAllowDeprecatedTLSAction, () => ({
    __proto__: dart.getFields(types.IOSShouldAllowDeprecatedTLSAction.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSShouldAllowDeprecatedTLSAction, ['_equals']);
  dart.defineExtensionAccessors(types.IOSShouldAllowDeprecatedTLSAction, ['hashCode']);
  dart.defineLazy(types.IOSShouldAllowDeprecatedTLSAction, {
    /*types.IOSShouldAllowDeprecatedTLSAction.CANCEL*/get CANCEL() {
      return C[268] || CT.C268;
    },
    /*types.IOSShouldAllowDeprecatedTLSAction.ALLOW*/get ALLOW() {
      return C[269] || CT.C269;
    }
  }, false);
  types.URLRequest = class URLRequest extends core.Object {
    get url() {
      return this[S$.url$13];
    }
    set url(value) {
      this[S$.url$13] = value;
    }
    get method() {
      return this[S$.method$3];
    }
    set method(value) {
      this[S$.method$3] = value;
    }
    get body() {
      return this[S$.body$1];
    }
    set body(value) {
      this[S$.body$1] = value;
    }
    get headers() {
      return this[S$.headers$5];
    }
    set headers(value) {
      this[S$.headers$5] = value;
    }
    get iosAllowsCellularAccess() {
      return this[S$.iosAllowsCellularAccess];
    }
    set iosAllowsCellularAccess(value) {
      this[S$.iosAllowsCellularAccess] = value;
    }
    get iosAllowsConstrainedNetworkAccess() {
      return this[S$.iosAllowsConstrainedNetworkAccess];
    }
    set iosAllowsConstrainedNetworkAccess(value) {
      this[S$.iosAllowsConstrainedNetworkAccess] = value;
    }
    get iosAllowsExpensiveNetworkAccess() {
      return this[S$.iosAllowsExpensiveNetworkAccess];
    }
    set iosAllowsExpensiveNetworkAccess(value) {
      this[S$.iosAllowsExpensiveNetworkAccess] = value;
    }
    get iosCachePolicy() {
      return this[S$.iosCachePolicy];
    }
    set iosCachePolicy(value) {
      this[S$.iosCachePolicy] = value;
    }
    get iosHttpShouldHandleCookies() {
      return this[S$.iosHttpShouldHandleCookies];
    }
    set iosHttpShouldHandleCookies(value) {
      this[S$.iosHttpShouldHandleCookies] = value;
    }
    get iosHttpShouldUsePipelining() {
      return this[S$.iosHttpShouldUsePipelining];
    }
    set iosHttpShouldUsePipelining(value) {
      this[S$.iosHttpShouldUsePipelining] = value;
    }
    get iosNetworkServiceType() {
      return this[S$.iosNetworkServiceType];
    }
    set iosNetworkServiceType(value) {
      this[S$.iosNetworkServiceType] = value;
    }
    get iosTimeoutInterval() {
      return this[S$.iosTimeoutInterval];
    }
    set iosTimeoutInterval(value) {
      this[S$.iosTimeoutInterval] = value;
    }
    get iosMainDocumentURL() {
      return this[S$.iosMainDocumentURL];
    }
    set iosMainDocumentURL(value) {
      this[S$.iosMainDocumentURL] = value;
    }
    static fromMap(map) {
      let t92;
      if (map == null) {
        return null;
      }
      return new types.URLRequest.new({url: map[S.$_get]("url") != null ? core.Uri.parse(core.String.as(map[S.$_get]("url"))) : null, headers: T.MapNOfString$String().as((t92 = map[S.$_get]("headers"), t92 == null ? null : dart.dgsend(t92, [core.String, core.String], 'cast', []))), method: T.StringN().as(map[S.$_get]("method")), body: T.Uint8ListN().as(map[S.$_get]("body")), iosAllowsCellularAccess: T.boolN().as(map[S.$_get]("iosAllowsCellularAccess")), iosAllowsConstrainedNetworkAccess: T.boolN().as(map[S.$_get]("iosAllowsConstrainedNetworkAccess")), iosAllowsExpensiveNetworkAccess: T.boolN().as(map[S.$_get]("iosAllowsExpensiveNetworkAccess")), iosCachePolicy: types.IOSURLRequestCachePolicy.fromValue(T.intN().as(map[S.$_get]("iosCachePolicy"))), iosHttpShouldHandleCookies: T.boolN().as(map[S.$_get]("iosHttpShouldHandleCookies")), iosHttpShouldUsePipelining: T.boolN().as(map[S.$_get]("iosHttpShouldUsePipelining")), iosNetworkServiceType: types.IOSURLRequestNetworkServiceType.fromValue(T.intN().as(map[S.$_get]("iosNetworkServiceType"))), iosTimeoutInterval: T.doubleN().as(map[S.$_get]("iosTimeoutInterval")), iosMainDocumentURL: map[S.$_get]("iosMainDocumentURL") != null ? core.Uri.parse(core.String.as(map[S.$_get]("iosMainDocumentURL"))) : null});
    }
    toMap() {
      let t92, t92$, t92$0, t92$1;
      return new (T.IdentityMapOfString$dynamic()).from(["url", (t92 = this.url, t92 == null ? null : dart.toString(t92)), "headers", this.headers, "method", this.method, "body", this.body, "iosAllowsCellularAccess", this.iosAllowsCellularAccess, "iosAllowsConstrainedNetworkAccess", this.iosAllowsConstrainedNetworkAccess, "iosAllowsExpensiveNetworkAccess", this.iosAllowsExpensiveNetworkAccess, "iosCachePolicy", (t92$ = this.iosCachePolicy, t92$ == null ? null : t92$.toValue()), "iosHttpShouldHandleCookies", this.iosHttpShouldHandleCookies, "iosHttpShouldUsePipelining", this.iosHttpShouldUsePipelining, "iosNetworkServiceType", (t92$0 = this.iosNetworkServiceType, t92$0 == null ? null : t92$0.toValue()), "iosTimeoutInterval", this.iosTimeoutInterval, "iosMainDocumentURL", (t92$1 = this.iosMainDocumentURL, t92$1 == null ? null : dart.toString(t92$1))]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.URLRequest.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let iosAllowsCellularAccess = opts && 'iosAllowsCellularAccess' in opts ? opts.iosAllowsCellularAccess : null;
    let iosAllowsConstrainedNetworkAccess = opts && 'iosAllowsConstrainedNetworkAccess' in opts ? opts.iosAllowsConstrainedNetworkAccess : null;
    let iosAllowsExpensiveNetworkAccess = opts && 'iosAllowsExpensiveNetworkAccess' in opts ? opts.iosAllowsExpensiveNetworkAccess : null;
    let iosCachePolicy = opts && 'iosCachePolicy' in opts ? opts.iosCachePolicy : null;
    let iosHttpShouldHandleCookies = opts && 'iosHttpShouldHandleCookies' in opts ? opts.iosHttpShouldHandleCookies : null;
    let iosHttpShouldUsePipelining = opts && 'iosHttpShouldUsePipelining' in opts ? opts.iosHttpShouldUsePipelining : null;
    let iosNetworkServiceType = opts && 'iosNetworkServiceType' in opts ? opts.iosNetworkServiceType : null;
    let iosTimeoutInterval = opts && 'iosTimeoutInterval' in opts ? opts.iosTimeoutInterval : null;
    let iosMainDocumentURL = opts && 'iosMainDocumentURL' in opts ? opts.iosMainDocumentURL : null;
    this[S$.url$13] = url;
    this[S$.method$3] = method;
    this[S$.headers$5] = headers;
    this[S$.body$1] = body;
    this[S$.iosAllowsCellularAccess] = iosAllowsCellularAccess;
    this[S$.iosAllowsConstrainedNetworkAccess] = iosAllowsConstrainedNetworkAccess;
    this[S$.iosAllowsExpensiveNetworkAccess] = iosAllowsExpensiveNetworkAccess;
    this[S$.iosCachePolicy] = iosCachePolicy;
    this[S$.iosHttpShouldHandleCookies] = iosHttpShouldHandleCookies;
    this[S$.iosHttpShouldUsePipelining] = iosHttpShouldUsePipelining;
    this[S$.iosNetworkServiceType] = iosNetworkServiceType;
    this[S$.iosTimeoutInterval] = iosTimeoutInterval;
    this[S$.iosMainDocumentURL] = iosMainDocumentURL;
    ;
  }).prototype = types.URLRequest.prototype;
  dart.addTypeTests(types.URLRequest);
  dart.addTypeCaches(types.URLRequest);
  dart.setMethodSignature(types.URLRequest, () => ({
    __proto__: dart.getMethods(types.URLRequest.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.URLRequest, I[53]);
  dart.setFieldSignature(types.URLRequest, () => ({
    __proto__: dart.getFields(types.URLRequest.__proto__),
    url: dart.fieldType(dart.nullable(core.Uri)),
    method: dart.fieldType(dart.nullable(core.String)),
    body: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    iosAllowsCellularAccess: dart.fieldType(dart.nullable(core.bool)),
    iosAllowsConstrainedNetworkAccess: dart.fieldType(dart.nullable(core.bool)),
    iosAllowsExpensiveNetworkAccess: dart.fieldType(dart.nullable(core.bool)),
    iosCachePolicy: dart.fieldType(dart.nullable(types.IOSURLRequestCachePolicy)),
    iosHttpShouldHandleCookies: dart.fieldType(dart.nullable(core.bool)),
    iosHttpShouldUsePipelining: dart.fieldType(dart.nullable(core.bool)),
    iosNetworkServiceType: dart.fieldType(dart.nullable(types.IOSURLRequestNetworkServiceType)),
    iosTimeoutInterval: dart.fieldType(dart.nullable(core.double)),
    iosMainDocumentURL: dart.fieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(types.URLRequest, ['toString']);
  types.IOSWKWindowFeatures = class IOSWKWindowFeatures extends core.Object {
    get allowsResizing() {
      return this[S$.allowsResizing];
    }
    set allowsResizing(value) {
      this[S$.allowsResizing] = value;
    }
    get height() {
      return this[S$.height$2];
    }
    set height(value) {
      this[S$.height$2] = value;
    }
    get menuBarVisibility() {
      return this[S$.menuBarVisibility];
    }
    set menuBarVisibility(value) {
      this[S$.menuBarVisibility] = value;
    }
    get statusBarVisibility() {
      return this[S$.statusBarVisibility];
    }
    set statusBarVisibility(value) {
      this[S$.statusBarVisibility] = value;
    }
    get toolbarsVisibility() {
      return this[S$.toolbarsVisibility];
    }
    set toolbarsVisibility(value) {
      this[S$.toolbarsVisibility] = value;
    }
    get width() {
      return this[S$.width$2];
    }
    set width(value) {
      this[S$.width$2] = value;
    }
    get x() {
      return this[S$.x$1];
    }
    set x(value) {
      this[S$.x$1] = value;
    }
    get y() {
      return this[S$.y$1];
    }
    set y(value) {
      this[S$.y$1] = value;
    }
    static fromMap(map) {
      if (map == null) {
        return null;
      }
      return new types.IOSWKWindowFeatures.new({allowsResizing: T.boolN().as(map[S.$_get]("allowsResizing")), height: T.doubleN().as(map[S.$_get]("height")), menuBarVisibility: T.boolN().as(map[S.$_get]("menuBarVisibility")), statusBarVisibility: T.boolN().as(map[S.$_get]("statusBarVisibility")), toolbarsVisibility: T.boolN().as(map[S.$_get]("toolbarsVisibility")), width: T.doubleN().as(map[S.$_get]("width")), x: T.doubleN().as(map[S.$_get]("x")), y: T.doubleN().as(map[S.$_get]("y"))});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["allowsResizing", this.allowsResizing, "height", this.height, "menuBarVisibility", this.menuBarVisibility, "statusBarVisibility", this.statusBarVisibility, "toolbarsVisibility", this.toolbarsVisibility, "width", this.width, "x", this.x, "y", this.y]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSWKWindowFeatures.new = function(opts) {
    let allowsResizing = opts && 'allowsResizing' in opts ? opts.allowsResizing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let menuBarVisibility = opts && 'menuBarVisibility' in opts ? opts.menuBarVisibility : null;
    let statusBarVisibility = opts && 'statusBarVisibility' in opts ? opts.statusBarVisibility : null;
    let toolbarsVisibility = opts && 'toolbarsVisibility' in opts ? opts.toolbarsVisibility : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let x = opts && 'x' in opts ? opts.x : null;
    let y = opts && 'y' in opts ? opts.y : null;
    this[S$.allowsResizing] = allowsResizing;
    this[S$.height$2] = height;
    this[S$.menuBarVisibility] = menuBarVisibility;
    this[S$.statusBarVisibility] = statusBarVisibility;
    this[S$.toolbarsVisibility] = toolbarsVisibility;
    this[S$.width$2] = width;
    this[S$.x$1] = x;
    this[S$.y$1] = y;
    ;
  }).prototype = types.IOSWKWindowFeatures.prototype;
  dart.addTypeTests(types.IOSWKWindowFeatures);
  dart.addTypeCaches(types.IOSWKWindowFeatures);
  dart.setMethodSignature(types.IOSWKWindowFeatures, () => ({
    __proto__: dart.getMethods(types.IOSWKWindowFeatures.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSWKWindowFeatures, I[53]);
  dart.setFieldSignature(types.IOSWKWindowFeatures, () => ({
    __proto__: dart.getFields(types.IOSWKWindowFeatures.__proto__),
    allowsResizing: dart.fieldType(dart.nullable(core.bool)),
    height: dart.fieldType(dart.nullable(core.double)),
    menuBarVisibility: dart.fieldType(dart.nullable(core.bool)),
    statusBarVisibility: dart.fieldType(dart.nullable(core.bool)),
    toolbarsVisibility: dart.fieldType(dart.nullable(core.bool)),
    width: dart.fieldType(dart.nullable(core.double)),
    x: dart.fieldType(dart.nullable(core.double)),
    y: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(types.IOSWKWindowFeatures, ['toString']);
  types.IOSNSAttributedString = class IOSNSAttributedString extends core.Object {
    get string() {
      return this[S$.string];
    }
    set string(value) {
      this[S$.string] = value;
    }
    get backgroundColor() {
      return this[S$.backgroundColor$1];
    }
    set backgroundColor(value) {
      this[S$.backgroundColor$1] = value;
    }
    get baselineOffset() {
      return this[S$.baselineOffset];
    }
    set baselineOffset(value) {
      this[S$.baselineOffset] = value;
    }
    get expansion() {
      return this[S$.expansion];
    }
    set expansion(value) {
      this[S$.expansion] = value;
    }
    get foregroundColor() {
      return this[S$.foregroundColor];
    }
    set foregroundColor(value) {
      this[S$.foregroundColor] = value;
    }
    get kern() {
      return this[S$.kern];
    }
    set kern(value) {
      this[S$.kern] = value;
    }
    get ligature() {
      return this[S$.ligature];
    }
    set ligature(value) {
      this[S$.ligature] = value;
    }
    get obliqueness() {
      return this[S$.obliqueness];
    }
    set obliqueness(value) {
      this[S$.obliqueness] = value;
    }
    get strikethroughColor() {
      return this[S$.strikethroughColor];
    }
    set strikethroughColor(value) {
      this[S$.strikethroughColor] = value;
    }
    get strikethroughStyle() {
      return this[S$.strikethroughStyle];
    }
    set strikethroughStyle(value) {
      this[S$.strikethroughStyle] = value;
    }
    get strokeColor() {
      return this[S$.strokeColor];
    }
    set strokeColor(value) {
      this[S$.strokeColor] = value;
    }
    get strokeWidth() {
      return this[S$.strokeWidth];
    }
    set strokeWidth(value) {
      this[S$.strokeWidth] = value;
    }
    get textEffect() {
      return this[S$.textEffect];
    }
    set textEffect(value) {
      this[S$.textEffect] = value;
    }
    get underlineColor() {
      return this[S$.underlineColor];
    }
    set underlineColor(value) {
      this[S$.underlineColor] = value;
    }
    get underlineStyle() {
      return this[S$.underlineStyle];
    }
    set underlineStyle(value) {
      this[S$.underlineStyle] = value;
    }
    toMap() {
      let t92, t92$, t92$0, t92$1, t92$2, t92$3, t92$4, t92$5;
      return new (T.IdentityMapOfString$dynamic()).from(["string", this.string, "backgroundColor", (t92 = this.backgroundColor, t92 == null ? null : util['HexColor|toHex'](t92)), "baselineOffset", this.baselineOffset, "expansion", this.expansion, "foregroundColor", (t92$ = this.foregroundColor, t92$ == null ? null : util['HexColor|toHex'](t92$)), "kern", this.kern, "ligature", this.ligature, "obliqueness", this.obliqueness, "strikethroughColor", (t92$0 = this.strikethroughColor, t92$0 == null ? null : util['HexColor|toHex'](t92$0)), "strikethroughStyle", (t92$1 = this.strikethroughStyle, t92$1 == null ? null : t92$1.toValue()), "strokeColor", (t92$2 = this.strokeColor, t92$2 == null ? null : util['HexColor|toHex'](t92$2)), "strokeWidth", this.strokeWidth, "textEffect", (t92$3 = this.textEffect, t92$3 == null ? null : t92$3.toValue()), "underlineColor", (t92$4 = this.underlineColor, t92$4 == null ? null : util['HexColor|toHex'](t92$4)), "underlineStyle", (t92$5 = this.underlineStyle, t92$5 == null ? null : t92$5.toValue())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (types.IOSNSAttributedString.new = function(opts) {
    let string = opts && 'string' in opts ? opts.string : null;
    if (string == null) dart.nullFailed(I[52], 6632, 19, "string");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let baselineOffset = opts && 'baselineOffset' in opts ? opts.baselineOffset : null;
    let expansion = opts && 'expansion' in opts ? opts.expansion : null;
    let foregroundColor = opts && 'foregroundColor' in opts ? opts.foregroundColor : null;
    let kern = opts && 'kern' in opts ? opts.kern : null;
    let ligature = opts && 'ligature' in opts ? opts.ligature : null;
    let obliqueness = opts && 'obliqueness' in opts ? opts.obliqueness : null;
    let strikethroughColor = opts && 'strikethroughColor' in opts ? opts.strikethroughColor : null;
    let strikethroughStyle = opts && 'strikethroughStyle' in opts ? opts.strikethroughStyle : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let textEffect = opts && 'textEffect' in opts ? opts.textEffect : null;
    let underlineColor = opts && 'underlineColor' in opts ? opts.underlineColor : null;
    let underlineStyle = opts && 'underlineStyle' in opts ? opts.underlineStyle : null;
    this[S$.string] = string;
    this[S$.backgroundColor$1] = backgroundColor;
    this[S$.baselineOffset] = baselineOffset;
    this[S$.expansion] = expansion;
    this[S$.foregroundColor] = foregroundColor;
    this[S$.kern] = kern;
    this[S$.ligature] = ligature;
    this[S$.obliqueness] = obliqueness;
    this[S$.strikethroughColor] = strikethroughColor;
    this[S$.strikethroughStyle] = strikethroughStyle;
    this[S$.strokeColor] = strokeColor;
    this[S$.strokeWidth] = strokeWidth;
    this[S$.textEffect] = textEffect;
    this[S$.underlineColor] = underlineColor;
    this[S$.underlineStyle] = underlineStyle;
    ;
  }).prototype = types.IOSNSAttributedString.prototype;
  dart.addTypeTests(types.IOSNSAttributedString);
  dart.addTypeCaches(types.IOSNSAttributedString);
  dart.setMethodSignature(types.IOSNSAttributedString, () => ({
    __proto__: dart.getMethods(types.IOSNSAttributedString.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(types.IOSNSAttributedString, I[53]);
  dart.setFieldSignature(types.IOSNSAttributedString, () => ({
    __proto__: dart.getFields(types.IOSNSAttributedString.__proto__),
    string: dart.fieldType(core.String),
    backgroundColor: dart.fieldType(dart.nullable(ui.Color)),
    baselineOffset: dart.fieldType(dart.nullable(core.double)),
    expansion: dart.fieldType(dart.nullable(core.double)),
    foregroundColor: dart.fieldType(dart.nullable(ui.Color)),
    kern: dart.fieldType(dart.nullable(core.double)),
    ligature: dart.fieldType(dart.nullable(core.int)),
    obliqueness: dart.fieldType(dart.nullable(core.double)),
    strikethroughColor: dart.fieldType(dart.nullable(ui.Color)),
    strikethroughStyle: dart.fieldType(dart.nullable(types.IOSNSUnderlineStyle)),
    strokeColor: dart.fieldType(dart.nullable(ui.Color)),
    strokeWidth: dart.fieldType(dart.nullable(core.double)),
    textEffect: dart.fieldType(dart.nullable(types.IOSNSAttributedStringTextEffectStyle)),
    underlineColor: dart.fieldType(dart.nullable(ui.Color)),
    underlineStyle: dart.fieldType(dart.nullable(types.IOSNSUnderlineStyle))
  }));
  dart.defineExtensionMethods(types.IOSNSAttributedString, ['toString']);
  types.IOSNSUnderlineStyle = class IOSNSUnderlineStyle extends core.Object {
    get [S._value$1]() {
      return this[S$._value$58];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSNSUnderlineStyle.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 6701, 26, "element");
            return element.toValue() == value;
          }, T.IOSNSUnderlineStyleTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 1:
        {
          return "SINGLE";
        }
        case 2:
        {
          return "THICK";
        }
        case 9:
        {
          return "DOUBLE";
        }
        case 256:
        {
          return "PATTERN_DOT";
        }
        case 512:
        {
          return "PATTERN_DASH";
        }
        case 768:
        {
          return "PATTERN_DASH_DOT";
        }
        case 1024:
        {
          return "PATTERN_DASH_DOT_DOT";
        }
        case 32768:
        {
          return "BY_WORD";
        }
        case 0:
        default:
        {
          return "STYLE_NONE";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSNSUnderlineStyle._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 6683, 44, "_value");
    this[S$._value$58] = _value;
    ;
  }).prototype = types.IOSNSUnderlineStyle.prototype;
  dart.addTypeTests(types.IOSNSUnderlineStyle);
  dart.addTypeCaches(types.IOSNSUnderlineStyle);
  dart.setMethodSignature(types.IOSNSUnderlineStyle, () => ({
    __proto__: dart.getMethods(types.IOSNSUnderlineStyle.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.IOSNSUnderlineStyle, I[53]);
  dart.setFieldSignature(types.IOSNSUnderlineStyle, () => ({
    __proto__: dart.getFields(types.IOSNSUnderlineStyle.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.IOSNSUnderlineStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSNSUnderlineStyle, ['hashCode']);
  dart.defineLazy(types.IOSNSUnderlineStyle, {
    /*types.IOSNSUnderlineStyle.values*/get values() {
      return T.JSArrayOfIOSNSUnderlineStyle().of([types.IOSNSUnderlineStyle.STYLE_NONE, types.IOSNSUnderlineStyle.SINGLE, types.IOSNSUnderlineStyle.THICK, types.IOSNSUnderlineStyle.DOUBLE, types.IOSNSUnderlineStyle.PATTERN_DOT, types.IOSNSUnderlineStyle.PATTERN_DASH, types.IOSNSUnderlineStyle.PATTERN_DASH_DOT, types.IOSNSUnderlineStyle.PATTERN_DASH_DOT_DOT, types.IOSNSUnderlineStyle.BY_WORD])[S.$toSet]();
    },
    /*types.IOSNSUnderlineStyle.STYLE_NONE*/get STYLE_NONE() {
      return C[270] || CT.C270;
    },
    /*types.IOSNSUnderlineStyle.SINGLE*/get SINGLE() {
      return C[271] || CT.C271;
    },
    /*types.IOSNSUnderlineStyle.THICK*/get THICK() {
      return C[272] || CT.C272;
    },
    /*types.IOSNSUnderlineStyle.DOUBLE*/get DOUBLE() {
      return C[273] || CT.C273;
    },
    /*types.IOSNSUnderlineStyle.PATTERN_DOT*/get PATTERN_DOT() {
      return C[274] || CT.C274;
    },
    /*types.IOSNSUnderlineStyle.PATTERN_DASH*/get PATTERN_DASH() {
      return C[275] || CT.C275;
    },
    /*types.IOSNSUnderlineStyle.PATTERN_DASH_DOT*/get PATTERN_DASH_DOT() {
      return C[276] || CT.C276;
    },
    /*types.IOSNSUnderlineStyle.PATTERN_DASH_DOT_DOT*/get PATTERN_DASH_DOT_DOT() {
      return C[277] || CT.C277;
    },
    /*types.IOSNSUnderlineStyle.BY_WORD*/get BY_WORD() {
      return C[278] || CT.C278;
    }
  }, false);
  types.IOSNSAttributedStringTextEffectStyle = class IOSNSAttributedStringTextEffectStyle extends core.Object {
    get [S._value$1]() {
      return this[S$._value$59];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.IOSNSAttributedStringTextEffectStyle.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 6783, 26, "element");
            return element.toValue() == value;
          }, T.IOSNSAttributedStringTextEffectStyleTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      return this[S._value$1];
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.IOSNSAttributedStringTextEffectStyle._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 6773, 61, "_value");
    this[S$._value$59] = _value;
    ;
  }).prototype = types.IOSNSAttributedStringTextEffectStyle.prototype;
  dart.addTypeTests(types.IOSNSAttributedStringTextEffectStyle);
  dart.addTypeCaches(types.IOSNSAttributedStringTextEffectStyle);
  dart.setMethodSignature(types.IOSNSAttributedStringTextEffectStyle, () => ({
    __proto__: dart.getMethods(types.IOSNSAttributedStringTextEffectStyle.__proto__),
    toValue: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.IOSNSAttributedStringTextEffectStyle, I[53]);
  dart.setFieldSignature(types.IOSNSAttributedStringTextEffectStyle, () => ({
    __proto__: dart.getFields(types.IOSNSAttributedStringTextEffectStyle.__proto__),
    [S._value$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(types.IOSNSAttributedStringTextEffectStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.IOSNSAttributedStringTextEffectStyle, ['hashCode']);
  dart.defineLazy(types.IOSNSAttributedStringTextEffectStyle, {
    /*types.IOSNSAttributedStringTextEffectStyle.values*/get values() {
      return T.JSArrayOfIOSNSAttributedStringTextEffectStyle().of([types.IOSNSAttributedStringTextEffectStyle.LETTERPRESS_STYLE])[S.$toSet]();
    },
    /*types.IOSNSAttributedStringTextEffectStyle.LETTERPRESS_STYLE*/get LETTERPRESS_STYLE() {
      return C[279] || CT.C279;
    }
  }, false);
  types.AndroidPullToRefreshSize = class AndroidPullToRefreshSize extends core.Object {
    get [S._value$1]() {
      return this[S$._value$60];
    }
    set [S._value$1](value) {
      super[S._value$1] = value;
    }
    static fromValue(value) {
      if (value != null) {
        try {
          return types.AndroidPullToRefreshSize.values[S.$firstWhere](dart.fn(element => {
            if (element == null) dart.nullFailed(I[52], 6821, 26, "element");
            return element.toValue() == value;
          }, T.AndroidPullToRefreshSizeTobool()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
      }
      return null;
    }
    toValue() {
      return this[S._value$1];
    }
    toString() {
      switch (this[S._value$1]) {
        case 0:
        {
          return "LARGE";
        }
        case 1:
        default:
        {
          return "DEFAULT";
        }
      }
    }
    _equals(value) {
      if (value == null) return false;
      return dart.equals(value, this[S._value$1]);
    }
    get hashCode() {
      return dart.hashCode(this[S._value$1]);
    }
  };
  (types.AndroidPullToRefreshSize._internal = function(_value) {
    if (_value == null) dart.nullFailed(I[52], 6810, 49, "_value");
    this[S$._value$60] = _value;
    ;
  }).prototype = types.AndroidPullToRefreshSize.prototype;
  dart.addTypeTests(types.AndroidPullToRefreshSize);
  dart.addTypeCaches(types.AndroidPullToRefreshSize);
  dart.setMethodSignature(types.AndroidPullToRefreshSize, () => ({
    __proto__: dart.getMethods(types.AndroidPullToRefreshSize.__proto__),
    toValue: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(types.AndroidPullToRefreshSize, I[53]);
  dart.setFieldSignature(types.AndroidPullToRefreshSize, () => ({
    __proto__: dart.getFields(types.AndroidPullToRefreshSize.__proto__),
    [S._value$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(types.AndroidPullToRefreshSize, ['toString', '_equals']);
  dart.defineExtensionAccessors(types.AndroidPullToRefreshSize, ['hashCode']);
  dart.defineLazy(types.AndroidPullToRefreshSize, {
    /*types.AndroidPullToRefreshSize.values*/get values() {
      return T.JSArrayOfAndroidPullToRefreshSize().of([types.AndroidPullToRefreshSize.DEFAULT, types.AndroidPullToRefreshSize.LARGE])[S.$toSet]();
    },
    /*types.AndroidPullToRefreshSize.DEFAULT*/get DEFAULT() {
      return C[280] || CT.C280;
    },
    /*types.AndroidPullToRefreshSize.LARGE*/get LARGE() {
      return C[281] || CT.C281;
    }
  }, false);
  dart.defineLazy(types, {
    /*types._contentWorldNameRegExp*/get _contentWorldNameRegExp() {
      return core.RegExp.new("[\\s]");
    }
  }, false);
  context_menu.ContextMenu = class ContextMenu extends core.Object {
    get onCreateContextMenu() {
      return this[S$.onCreateContextMenu];
    }
    set onCreateContextMenu(value) {
      super.onCreateContextMenu = value;
    }
    get onHideContextMenu() {
      return this[S$.onHideContextMenu];
    }
    set onHideContextMenu(value) {
      super.onHideContextMenu = value;
    }
    get onContextMenuActionItemClicked() {
      return this[S$.onContextMenuActionItemClicked];
    }
    set onContextMenuActionItemClicked(value) {
      super.onContextMenuActionItemClicked = value;
    }
    get options() {
      return this[S$.options];
    }
    set options(value) {
      super.options = value;
    }
    get menuItems() {
      return this[S$.menuItems];
    }
    set menuItems(value) {
      super.menuItems = value;
    }
    toMap() {
      let t95;
      return new (T.IdentityMapOfString$dynamic()).from(["menuItems", this.menuItems[S.$map](T.MapOfString$dynamic(), dart.fn(menuItem => {
          if (menuItem == null) dart.nullFailed(I[54], 38, 35, "menuItem");
          return menuItem.toMap();
        }, T.ContextMenuItemToMapOfString$dynamic()))[S.$toList](), "options", (t95 = this.options, t95 == null ? null : t95.toMap())]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (context_menu.ContextMenu.new = function(opts) {
    let menuItems = opts && 'menuItems' in opts ? opts.menuItems : C[282] || CT.C282;
    if (menuItems == null) dart.nullFailed(I[54], 30, 13, "menuItems");
    let onCreateContextMenu = opts && 'onCreateContextMenu' in opts ? opts.onCreateContextMenu : null;
    let onHideContextMenu = opts && 'onHideContextMenu' in opts ? opts.onHideContextMenu : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let onContextMenuActionItemClicked = opts && 'onContextMenuActionItemClicked' in opts ? opts.onContextMenuActionItemClicked : null;
    this[S$.menuItems] = menuItems;
    this[S$.onCreateContextMenu] = onCreateContextMenu;
    this[S$.onHideContextMenu] = onHideContextMenu;
    this[S$.options] = options;
    this[S$.onContextMenuActionItemClicked] = onContextMenuActionItemClicked;
    ;
  }).prototype = context_menu.ContextMenu.prototype;
  dart.addTypeTests(context_menu.ContextMenu);
  dart.addTypeCaches(context_menu.ContextMenu);
  dart.setMethodSignature(context_menu.ContextMenu, () => ({
    __proto__: dart.getMethods(context_menu.ContextMenu.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(context_menu.ContextMenu, I[55]);
  dart.setFieldSignature(context_menu.ContextMenu, () => ({
    __proto__: dart.getFields(context_menu.ContextMenu.__proto__),
    onCreateContextMenu: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [types.InAppWebViewHitTestResult]))),
    onHideContextMenu: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onContextMenuActionItemClicked: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [context_menu.ContextMenuItem]))),
    options: dart.finalFieldType(dart.nullable(context_menu.ContextMenuOptions)),
    menuItems: dart.finalFieldType(core.List$(context_menu.ContextMenuItem))
  }));
  dart.defineExtensionMethods(context_menu.ContextMenu, ['toString']);
  context_menu.ContextMenuItem = class ContextMenuItem extends core.Object {
    get androidId() {
      return this[S$.androidId];
    }
    set androidId(value) {
      this[S$.androidId] = value;
    }
    get iosId() {
      return this[S$.iosId];
    }
    set iosId(value) {
      this[S$.iosId] = value;
    }
    get title() {
      return this[S$.title$3];
    }
    set title(value) {
      this[S$.title$3] = value;
    }
    get action() {
      return this[S$.action$13];
    }
    set action(value) {
      this[S$.action$13] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["androidId", this.androidId, "iosId", this.iosId, "title", this.title]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (context_menu.ContextMenuItem.new = function(opts) {
    let androidId = opts && 'androidId' in opts ? opts.androidId : null;
    let iosId = opts && 'iosId' in opts ? opts.iosId : null;
    let title = opts && 'title' in opts ? opts.title : null;
    if (title == null) dart.nullFailed(I[54], 68, 50, "title");
    let action = opts && 'action' in opts ? opts.action : null;
    this[S$.androidId] = androidId;
    this[S$.iosId] = iosId;
    this[S$.title$3] = title;
    this[S$.action$13] = action;
    ;
  }).prototype = context_menu.ContextMenuItem.prototype;
  dart.addTypeTests(context_menu.ContextMenuItem);
  dart.addTypeCaches(context_menu.ContextMenuItem);
  dart.setMethodSignature(context_menu.ContextMenuItem, () => ({
    __proto__: dart.getMethods(context_menu.ContextMenuItem.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(context_menu.ContextMenuItem, I[55]);
  dart.setFieldSignature(context_menu.ContextMenuItem, () => ({
    __proto__: dart.getFields(context_menu.ContextMenuItem.__proto__),
    androidId: dart.fieldType(dart.nullable(core.int)),
    iosId: dart.fieldType(dart.nullable(core.String)),
    title: dart.fieldType(core.String),
    action: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, [])))
  }));
  dart.defineExtensionMethods(context_menu.ContextMenuItem, ['toString']);
  context_menu.ContextMenuOptions = class ContextMenuOptions extends core.Object {
    get hideDefaultSystemContextMenuItems() {
      return this[S$.hideDefaultSystemContextMenuItems];
    }
    set hideDefaultSystemContextMenuItems(value) {
      this[S$.hideDefaultSystemContextMenuItems] = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["hideDefaultSystemContextMenuItems", this.hideDefaultSystemContextMenuItems]);
    }
    toJson() {
      return this.toMap();
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (context_menu.ContextMenuOptions.new = function(opts) {
    let hideDefaultSystemContextMenuItems = opts && 'hideDefaultSystemContextMenuItems' in opts ? opts.hideDefaultSystemContextMenuItems : false;
    if (hideDefaultSystemContextMenuItems == null) dart.nullFailed(I[54], 89, 28, "hideDefaultSystemContextMenuItems");
    this[S$.hideDefaultSystemContextMenuItems] = hideDefaultSystemContextMenuItems;
    ;
  }).prototype = context_menu.ContextMenuOptions.prototype;
  dart.addTypeTests(context_menu.ContextMenuOptions);
  dart.addTypeCaches(context_menu.ContextMenuOptions);
  dart.setMethodSignature(context_menu.ContextMenuOptions, () => ({
    __proto__: dart.getMethods(context_menu.ContextMenuOptions.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(context_menu.ContextMenuOptions, I[55]);
  dart.setFieldSignature(context_menu.ContextMenuOptions, () => ({
    __proto__: dart.getFields(context_menu.ContextMenuOptions.__proto__),
    hideDefaultSystemContextMenuItems: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(context_menu.ContextMenuOptions, ['toString']);
  in_app_browser.InAppBrowserAlreadyOpenedException = class InAppBrowserAlreadyOpenedException extends core.Object {
    get message() {
      return this[S$.message$12];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      let message = this.message;
      if (message == null) return "InAppBrowserAlreadyOpenedException";
      return "InAppBrowserAlreadyOpenedException: " + dart.str(message);
    }
  };
  (in_app_browser.InAppBrowserAlreadyOpenedException.new = function(message = null) {
    this[S$.message$12] = message;
    ;
  }).prototype = in_app_browser.InAppBrowserAlreadyOpenedException.prototype;
  dart.addTypeTests(in_app_browser.InAppBrowserAlreadyOpenedException);
  dart.addTypeCaches(in_app_browser.InAppBrowserAlreadyOpenedException);
  in_app_browser.InAppBrowserAlreadyOpenedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(in_app_browser.InAppBrowserAlreadyOpenedException, I[56]);
  dart.setFieldSignature(in_app_browser.InAppBrowserAlreadyOpenedException, () => ({
    __proto__: dart.getFields(in_app_browser.InAppBrowserAlreadyOpenedException.__proto__),
    message: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(in_app_browser.InAppBrowserAlreadyOpenedException, ['toString']);
  in_app_browser.InAppBrowserNotOpenedException = class InAppBrowserNotOpenedException extends core.Object {
    get message() {
      return this[S$.message$13];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      let message = this.message;
      if (message == null) return "InAppBrowserNotOpenedException";
      return "InAppBrowserNotOpenedException: " + dart.str(message);
    }
  };
  (in_app_browser.InAppBrowserNotOpenedException.new = function(message = null) {
    this[S$.message$13] = message;
    ;
  }).prototype = in_app_browser.InAppBrowserNotOpenedException.prototype;
  dart.addTypeTests(in_app_browser.InAppBrowserNotOpenedException);
  dart.addTypeCaches(in_app_browser.InAppBrowserNotOpenedException);
  in_app_browser.InAppBrowserNotOpenedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(in_app_browser.InAppBrowserNotOpenedException, I[56]);
  dart.setFieldSignature(in_app_browser.InAppBrowserNotOpenedException, () => ({
    __proto__: dart.getFields(in_app_browser.InAppBrowserNotOpenedException.__proto__),
    message: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(in_app_browser.InAppBrowserNotOpenedException, ['toString']);
  in_app_browser.InAppBrowser = class InAppBrowser extends core.Object {
    get contextMenu() {
      return this[S$.contextMenu$2];
    }
    set contextMenu(value) {
      this[S$.contextMenu$2] = value;
    }
    get pullToRefreshController() {
      return this[S$.pullToRefreshController$2];
    }
    set pullToRefreshController(value) {
      this[S$.pullToRefreshController$2] = value;
    }
    get initialUserScripts() {
      return this[S$.initialUserScripts$2];
    }
    set initialUserScripts(value) {
      super.initialUserScripts = value;
    }
    get windowId() {
      return this[S$.windowId$3];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get id() {
      let t95;
      return dart.test(this[S$.__InAppBrowser_id_isSet]) ? (t95 = this[S$.__InAppBrowser_id], t95) : dart.throw(new _internal.LateError.fieldNI("id"));
    }
    set id(t95) {
      if (t95 == null) dart.nullFailed(I[57], 45, 21, "null");
      if (dart.test(this[S$.__InAppBrowser_id_isSet]))
        dart.throw(new _internal.LateError.fieldAI("id"));
      else {
        this[S$.__InAppBrowser_id_isSet] = true;
        this[S$.__InAppBrowser_id] = t95;
      }
    }
    get [S$._channel$7]() {
      let t96;
      return dart.test(this[S$.__InAppBrowser__channel_isSet]) ? (t96 = this[S$.__InAppBrowser__channel], t96) : dart.throw(new _internal.LateError.fieldNI("_channel"));
    }
    set [S$._channel$7](t96) {
      if (t96 == null) dart.nullFailed(I[57], 57, 22, "null");
      this[S$.__InAppBrowser__channel_isSet] = true;
      this[S$.__InAppBrowser__channel] = t96;
    }
    get webViewController() {
      let t97;
      return dart.test(this[S$.__InAppBrowser_webViewController_isSet]) ? (t97 = this[S$.__InAppBrowser_webViewController], t97) : dart.throw(new _internal.LateError.fieldNI("webViewController"));
    }
    set webViewController(t97) {
      if (t97 == null) dart.nullFailed(I[57], 62, 37, "null");
      if (dart.test(this[S$.__InAppBrowser_webViewController_isSet]))
        dart.throw(new _internal.LateError.fieldAI("webViewController"));
      else {
        this[S$.__InAppBrowser_webViewController_isSet] = true;
        this[S$.__InAppBrowser_webViewController] = t97;
      }
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[57], 78, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        let t98;
        switch (call.method) {
          case "onBrowserCreated":
          {
            this[S$._isOpened$1] = true;
            t98 = this.pullToRefreshController;
            t98 == null ? null : t98.initMethodChannel(this.id);
            this.onBrowserCreated();
            break;
          }
          case "onExit":
          {
            this[S$._isOpened$1] = false;
            this.onExit();
            break;
          }
          default:
          {
            return this.webViewController.handleMethod(call);
          }
        }
      }).bind(this));
    }
    openUrlRequest(opts) {
      let urlRequest = opts && 'urlRequest' in opts ? opts.urlRequest : null;
      if (urlRequest == null) dart.nullFailed(I[57], 100, 28, "urlRequest");
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* openUrlRequest() {
        this.throwIfAlreadyOpened({message: "Cannot open " + dart.str(urlRequest) + "!"});
        if (!(urlRequest.url != null && dart.toString(urlRequest.url)[S.$isNotEmpty])) dart.assertFailed(null, I[57], 103, 12, "urlRequest.url != null && urlRequest.url.toString().isNotEmpty");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("id", dart.fn(() => this.id, T.VoidToString()));
        args[S.$putIfAbsent]("urlRequest", dart.fn(() => urlRequest.toMap(), T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("options", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = options, t98 == null ? null : t98.toMap());
          return t98$ == null ? new in_app_browser_options$0.InAppBrowserClassOptions.new().toMap() : t98$;
        }, T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("contextMenu", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.contextMenu, t98 == null ? null : t98.toMap());
          return t98$ == null ? new _js_helper.LinkedMap.new() : t98$;
        }, T.VoidToMap()));
        args[S.$putIfAbsent]("windowId", dart.fn(() => this.windowId, T.VoidTointN()));
        args[S.$putIfAbsent]("initialUserScripts", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.initialUserScripts, t98 == null ? null : t98[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
            if (e == null) dart.nullFailed(I[57], 113, 40, "e");
            return e.toMap();
          }, T.UserScriptToMapOfString$dynamic()))[S.$toList]());
          return t98$ == null ? [] : t98$;
        }, T.VoidToList()));
        args[S.$putIfAbsent]("pullToRefreshOptions", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.pullToRefreshController, t98 == null ? null : t98.options.toMap());
          return t98$ == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t98$;
        }, T.VoidToMapOfString$dynamic()));
        yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.dynamic, "open", args);
      }).bind(this));
    }
    openFile(opts) {
      let assetFilePath = opts && 'assetFilePath' in opts ? opts.assetFilePath : null;
      if (assetFilePath == null) dart.nullFailed(I[57], 158, 24, "assetFilePath");
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* openFile() {
        this.throwIfAlreadyOpened({message: "Cannot open " + dart.str(assetFilePath) + "!"});
        if (!assetFilePath[S.$isNotEmpty]) dart.assertFailed(null, I[57], 161, 12, "assetFilePath.isNotEmpty");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("id", dart.fn(() => this.id, T.VoidToString()));
        args[S.$putIfAbsent]("assetFilePath", dart.fn(() => assetFilePath, T.VoidToString()));
        args[S.$putIfAbsent]("options", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = options, t98 == null ? null : t98.toMap());
          return t98$ == null ? new in_app_browser_options$0.InAppBrowserClassOptions.new().toMap() : t98$;
        }, T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("contextMenu", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.contextMenu, t98 == null ? null : t98.toMap());
          return t98$ == null ? new _js_helper.LinkedMap.new() : t98$;
        }, T.VoidToMap()));
        args[S.$putIfAbsent]("windowId", dart.fn(() => this.windowId, T.VoidTointN()));
        args[S.$putIfAbsent]("initialUserScripts", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.initialUserScripts, t98 == null ? null : t98[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
            if (e == null) dart.nullFailed(I[57], 171, 40, "e");
            return e.toMap();
          }, T.UserScriptToMapOfString$dynamic()))[S.$toList]());
          return t98$ == null ? [] : t98$;
        }, T.VoidToList()));
        args[S.$putIfAbsent]("pullToRefreshOptions", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.pullToRefreshController, t98 == null ? null : t98.options.toMap());
          return t98$ == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t98$;
        }, T.VoidToMapOfString$dynamic()));
        yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.dynamic, "open", args);
      }).bind(this));
    }
    openData(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      if (data == null) dart.nullFailed(I[57], 190, 24, "data");
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : "text/html";
      if (mimeType == null) dart.nullFailed(I[57], 191, 14, "mimeType");
      let encoding = opts && 'encoding' in opts ? opts.encoding : "utf8";
      if (encoding == null) dart.nullFailed(I[57], 192, 14, "encoding");
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let androidHistoryUrl = opts && 'androidHistoryUrl' in opts ? opts.androidHistoryUrl : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(dart.void, (function* openData() {
        this.throwIfAlreadyOpened({message: "Cannot open data!"});
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("id", dart.fn(() => this.id, T.VoidToString()));
        args[S.$putIfAbsent]("options", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = options, t98 == null ? null : t98.toMap());
          return t98$ == null ? new in_app_browser_options$0.InAppBrowserClassOptions.new().toMap() : t98$;
        }, T.VoidToMapOfString$dynamic()));
        args[S.$putIfAbsent]("data", dart.fn(() => data, T.VoidToString()));
        args[S.$putIfAbsent]("mimeType", dart.fn(() => mimeType, T.VoidToString()));
        args[S.$putIfAbsent]("encoding", dart.fn(() => encoding, T.VoidToString()));
        args[S.$putIfAbsent]("baseUrl", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = baseUrl, t98 == null ? null : dart.toString(t98));
          return t98$ == null ? "about:blank" : t98$;
        }, T.VoidToString()));
        args[S.$putIfAbsent]("historyUrl", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = androidHistoryUrl, t98 == null ? null : dart.toString(t98));
          return t98$ == null ? "about:blank" : t98$;
        }, T.VoidToString()));
        args[S.$putIfAbsent]("contextMenu", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.contextMenu, t98 == null ? null : t98.toMap());
          return t98$ == null ? new _js_helper.LinkedMap.new() : t98$;
        }, T.VoidToMap()));
        args[S.$putIfAbsent]("windowId", dart.fn(() => this.windowId, T.VoidTointN()));
        args[S.$putIfAbsent]("initialUserScripts", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.initialUserScripts, t98 == null ? null : t98[S.$map](T.MapOfString$dynamic(), dart.fn(e => {
            if (e == null) dart.nullFailed(I[57], 211, 40, "e");
            return e.toMap();
          }, T.UserScriptToMapOfString$dynamic()))[S.$toList]());
          return t98$ == null ? [] : t98$;
        }, T.VoidToList()));
        args[S.$putIfAbsent]("pullToRefreshOptions", dart.fn(() => {
          let t98, t98$;
          t98$ = (t98 = this.pullToRefreshController, t98 == null ? null : t98.options.toMap());
          return t98$ == null ? new pull_to_refresh_options.PullToRefreshOptions.new({enabled: false}).toMap() : t98$;
        }, T.VoidToMapOfString$dynamic()));
        yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.dynamic, "open", args);
      }).bind(this));
    }
    static openWithSystemBrowser(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      if (url == null) dart.nullFailed(I[57], 221, 59, "url");
      return async.async(dart.void, function* openWithSystemBrowser() {
        if (!dart.toString(url)[S.$isNotEmpty]) dart.assertFailed(null, I[57], 222, 12, "url.toString().isNotEmpty");
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("url", dart.fn(() => dart.toString(url), T.VoidToString()));
        return yield in_app_browser.InAppBrowser._sharedChannel.invokeMethod(dart.void, "openWithSystemBrowser", args);
      });
    }
    show() {
      return async.async(dart.void, (function* show() {
        this.throwIfNotOpened();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S$._channel$7].invokeMethod(dart.dynamic, "show", args);
      }).bind(this));
    }
    hide() {
      return async.async(dart.void, (function* hide() {
        this.throwIfNotOpened();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S$._channel$7].invokeMethod(dart.dynamic, "hide", args);
      }).bind(this));
    }
    close() {
      return async.async(dart.void, (function* close() {
        this.throwIfNotOpened();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        yield this[S$._channel$7].invokeMethod(dart.dynamic, "close", args);
      }).bind(this));
    }
    isHidden() {
      return async.async(core.bool, (function* isHidden() {
        this.throwIfNotOpened();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield this[S$._channel$7].invokeMethod(dart.dynamic, "isHidden", args));
      }).bind(this));
    }
    setOptions(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      if (options == null) dart.nullFailed(I[57], 257, 62, "options");
      return async.async(dart.void, (function* setOptions() {
        this.throwIfNotOpened();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("options", dart.fn(() => options.toMap(), T.VoidToMapOfString$dynamic()));
        yield this[S$._channel$7].invokeMethod(dart.dynamic, "setOptions", args);
      }).bind(this));
    }
    getOptions() {
      return async.async(T.InAppBrowserClassOptionsN(), (function* getOptions() {
        this.throwIfNotOpened();
        let args = new (T.IdentityMapOfString$dynamic()).new();
        let options = (yield this[S$._channel$7].invokeMethod(core.Map, "getOptions", args));
        if (options != null) {
          options = options[S.$cast](core.String, dart.dynamic);
          return in_app_browser_options$0.InAppBrowserClassOptions.fromMap(T.MapOfString$dynamic().as(options));
        }
        return null;
      }).bind(this));
    }
    isOpened() {
      return this[S$._isOpened$1];
    }
    onBrowserCreated() {
    }
    onExit() {
    }
    onLoadStart(url) {
    }
    onLoadStop(url) {
    }
    onLoadError(url, code, message) {
      if (code == null) dart.nullFailed(I[57], 310, 34, "code");
      if (message == null) dart.nullFailed(I[57], 310, 47, "message");
    }
    onLoadHttpError(url, statusCode, description) {
      if (statusCode == null) dart.nullFailed(I[57], 325, 38, "statusCode");
      if (description == null) dart.nullFailed(I[57], 325, 57, "description");
    }
    onProgressChanged(progress) {
      if (progress == null) dart.nullFailed(I[57], 330, 30, "progress");
    }
    onConsoleMessage(consoleMessage) {
      if (consoleMessage == null) dart.nullFailed(I[57], 335, 40, "consoleMessage");
    }
    shouldOverrideUrlLoading(navigationAction) {
      if (navigationAction == null) dart.nullFailed(I[57], 353, 24, "navigationAction");
    }
    onLoadResource(resource) {
      if (resource == null) dart.nullFailed(I[57], 358, 38, "resource");
    }
    onScrollChanged(x, y) {
      if (x == null) dart.nullFailed(I[57], 369, 28, "x");
      if (y == null) dart.nullFailed(I[57], 369, 35, "y");
    }
    onDownloadStart(url) {
      if (url == null) dart.nullFailed(I[57], 380, 28, "url");
    }
    onLoadResourceCustomScheme(url) {
      if (url == null) dart.nullFailed(I[57], 389, 65, "url");
    }
    onCreateWindow(createWindowAction) {
      if (createWindowAction == null) dart.nullFailed(I[57], 421, 52, "createWindowAction");
    }
    onCloseWindow() {
    }
    onWindowFocus() {
    }
    onWindowBlur() {
    }
    onJsAlert(jsAlertRequest) {
      if (jsAlertRequest == null) dart.nullFailed(I[57], 447, 54, "jsAlertRequest");
    }
    onJsConfirm(jsConfirmRequest) {
      if (jsConfirmRequest == null) dart.nullFailed(I[57], 457, 60, "jsConfirmRequest");
    }
    onJsPrompt(jsPromptRequest) {
      if (jsPromptRequest == null) dart.nullFailed(I[57], 467, 57, "jsPromptRequest");
    }
    onReceivedHttpAuthRequest(challenge) {
      if (challenge == null) dart.nullFailed(I[57], 477, 34, "challenge");
    }
    onReceivedServerTrustAuthRequest(challenge) {
      if (challenge == null) dart.nullFailed(I[57], 488, 34, "challenge");
    }
    onReceivedClientCertRequest(challenge) {
      if (challenge == null) dart.nullFailed(I[57], 501, 34, "challenge");
    }
    onFindResultReceived(activeMatchOrdinal, numberOfMatches, isDoneCounting) {
      if (activeMatchOrdinal == null) dart.nullFailed(I[57], 514, 11, "activeMatchOrdinal");
      if (numberOfMatches == null) dart.nullFailed(I[57], 514, 35, "numberOfMatches");
      if (isDoneCounting == null) dart.nullFailed(I[57], 514, 57, "isDoneCounting");
    }
    shouldInterceptAjaxRequest(ajaxRequest) {
      if (ajaxRequest == null) dart.nullFailed(I[57], 522, 64, "ajaxRequest");
    }
    onAjaxReadyStateChange(ajaxRequest) {
      if (ajaxRequest == null) dart.nullFailed(I[57], 530, 66, "ajaxRequest");
    }
    onAjaxProgress(ajaxRequest) {
      if (ajaxRequest == null) dart.nullFailed(I[57], 538, 58, "ajaxRequest");
    }
    shouldInterceptFetchRequest(fetchRequest) {
      if (fetchRequest == null) dart.nullFailed(I[57], 547, 20, "fetchRequest");
    }
    onUpdateVisitedHistory(url, androidIsReload) {
    }
    onPrint(url) {
    }
    onLongPressHitTestResult(hitTestResult) {
      if (hitTestResult == null) dart.nullFailed(I[57], 575, 59, "hitTestResult");
    }
    onEnterFullscreen() {
    }
    onExitFullscreen() {
    }
    onPageCommitVisible(url) {
    }
    onTitleChanged(title) {
    }
    onOverScrolled(x, y, clampedX, clampedY) {
      if (x == null) dart.nullFailed(I[57], 621, 27, "x");
      if (y == null) dart.nullFailed(I[57], 621, 34, "y");
      if (clampedX == null) dart.nullFailed(I[57], 621, 42, "clampedX");
      if (clampedY == null) dart.nullFailed(I[57], 621, 57, "clampedY");
    }
    onZoomScaleChanged(oldScale, newScale) {
      if (oldScale == null) dart.nullFailed(I[57], 634, 34, "oldScale");
      if (newScale == null) dart.nullFailed(I[57], 634, 51, "newScale");
    }
    androidOnSafeBrowsingHit(url, threatType) {
      if (url == null) dart.nullFailed(I[57], 647, 11, "url");
    }
    androidOnPermissionRequest(origin, resources) {
      if (origin == null) dart.nullFailed(I[57], 659, 14, "origin");
      if (resources == null) dart.nullFailed(I[57], 659, 35, "resources");
    }
    androidOnGeolocationPermissionsShowPrompt(origin) {
      if (origin == null) dart.nullFailed(I[57], 671, 56, "origin");
    }
    androidOnGeolocationPermissionsHidePrompt() {
    }
    androidShouldInterceptRequest(request) {
      if (request == null) dart.nullFailed(I[57], 699, 26, "request");
    }
    androidOnRenderProcessUnresponsive(url) {
    }
    androidOnRenderProcessResponsive(url) {
    }
    androidOnRenderProcessGone(detail) {
      if (detail == null) dart.nullFailed(I[57], 745, 59, "detail");
    }
    androidOnFormResubmission(url) {
    }
    androidOnScaleChanged(oldScale, newScale) {
      if (oldScale == null) dart.nullFailed(I[57], 756, 37, "oldScale");
      if (newScale == null) dart.nullFailed(I[57], 756, 54, "newScale");
    }
    androidOnReceivedIcon(icon) {
      if (icon == null) dart.nullFailed(I[57], 765, 40, "icon");
    }
    androidOnReceivedTouchIconUrl(url, precomposed) {
      if (url == null) dart.nullFailed(I[57], 776, 42, "url");
      if (precomposed == null) dart.nullFailed(I[57], 776, 52, "precomposed");
    }
    androidOnJsBeforeUnload(jsBeforeUnloadRequest) {
      if (jsBeforeUnloadRequest == null) dart.nullFailed(I[57], 792, 29, "jsBeforeUnloadRequest");
    }
    androidOnReceivedLoginRequest(loginRequest) {
      if (loginRequest == null) dart.nullFailed(I[57], 801, 51, "loginRequest");
    }
    iosOnWebContentProcessDidTerminate() {
    }
    iosOnDidReceiveServerRedirectForProvisionalNavigation() {
    }
    iosOnNavigationResponse(navigationResponse) {
      if (navigationResponse == null) dart.nullFailed(I[57], 825, 31, "navigationResponse");
    }
    iosShouldAllowDeprecatedTLS(challenge) {
      if (challenge == null) dart.nullFailed(I[57], 835, 34, "challenge");
    }
    throwIfAlreadyOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (message == null) dart.nullFailed(I[57], 837, 37, "message");
      if (dart.test(this.isOpened())) {
        dart.throw(new in_app_browser.InAppBrowserAlreadyOpenedException.new(T.JSArrayOfString().of(["Error: " + (message[S.$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is already opened."])));
      }
    }
    throwIfNotOpened(opts) {
      let message = opts && 'message' in opts ? opts.message : "";
      if (message == null) dart.nullFailed(I[57], 845, 33, "message");
      if (!dart.test(this.isOpened())) {
        dart.throw(new in_app_browser.InAppBrowserNotOpenedException.new(T.JSArrayOfString().of(["Error: " + (message[S.$isEmpty] ? "" : dart.notNull(message) + " ") + "The browser is not opened."])));
      }
    }
  };
  (in_app_browser.InAppBrowser.new = function(opts) {
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let initialUserScripts = opts && 'initialUserScripts' in opts ? opts.initialUserScripts : null;
    this[S$.__InAppBrowser_id] = null;
    this[S$.__InAppBrowser_id_isSet] = false;
    this[S$.contextMenu$2] = null;
    this[S$.pullToRefreshController$2] = null;
    this[S$._isOpened$1] = false;
    this[S$.__InAppBrowser__channel] = null;
    this[S$.__InAppBrowser__channel_isSet] = false;
    this[S$.__InAppBrowser_webViewController] = null;
    this[S$.__InAppBrowser_webViewController_isSet] = false;
    this[S$.windowId$3] = windowId;
    this[S$.initialUserScripts$2] = initialUserScripts;
    this.id = util.IdGenerator.generate();
    this[S$._channel$7] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappbrowser_" + dart.str(this.id));
    this[S$._channel$7].setMethodCallHandler(dart.bind(this, 'handleMethod'));
    this[S$._isOpened$1] = false;
    this.webViewController = new in_app_webview_controller$0.InAppWebViewController.fromInAppBrowser(this[S$._channel$7], this, this.initialUserScripts);
  }).prototype = in_app_browser.InAppBrowser.prototype;
  dart.addTypeTests(in_app_browser.InAppBrowser);
  dart.addTypeCaches(in_app_browser.InAppBrowser);
  dart.setMethodSignature(in_app_browser.InAppBrowser, () => ({
    __proto__: dart.getMethods(in_app_browser.InAppBrowser.__proto__),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall]),
    openUrlRequest: dart.fnType(async.Future$(dart.void), [], {options: dart.nullable(in_app_browser_options$0.InAppBrowserClassOptions)}, {urlRequest: types.URLRequest}),
    openFile: dart.fnType(async.Future$(dart.void), [], {options: dart.nullable(in_app_browser_options$0.InAppBrowserClassOptions)}, {assetFilePath: core.String}),
    openData: dart.fnType(async.Future$(dart.void), [], {androidHistoryUrl: dart.nullable(core.Uri), baseUrl: dart.nullable(core.Uri), encoding: core.String, mimeType: core.String, options: dart.nullable(in_app_browser_options$0.InAppBrowserClassOptions)}, {data: core.String}),
    show: dart.fnType(async.Future$(dart.void), []),
    hide: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    isHidden: dart.fnType(async.Future$(core.bool), []),
    setOptions: dart.fnType(async.Future$(dart.void), [], {}, {options: in_app_browser_options$0.InAppBrowserClassOptions}),
    getOptions: dart.fnType(async.Future$(dart.nullable(in_app_browser_options$0.InAppBrowserClassOptions)), []),
    isOpened: dart.fnType(core.bool, []),
    onBrowserCreated: dart.fnType(dart.void, []),
    onExit: dart.fnType(dart.void, []),
    onLoadStart: dart.fnType(dart.void, [dart.nullable(core.Uri)]),
    onLoadStop: dart.fnType(dart.void, [dart.nullable(core.Uri)]),
    onLoadError: dart.fnType(dart.void, [dart.nullable(core.Uri), core.int, core.String]),
    onLoadHttpError: dart.fnType(dart.void, [dart.nullable(core.Uri), core.int, core.String]),
    onProgressChanged: dart.fnType(dart.void, [core.int]),
    onConsoleMessage: dart.fnType(dart.void, [types.ConsoleMessage]),
    shouldOverrideUrlLoading: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.NavigationActionPolicy))), [types.NavigationAction]),
    onLoadResource: dart.fnType(dart.void, [types.LoadedResource]),
    onScrollChanged: dart.fnType(dart.void, [core.int, core.int]),
    onDownloadStart: dart.fnType(dart.void, [core.Uri]),
    onLoadResourceCustomScheme: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.CustomSchemeResponse))), [core.Uri]),
    onCreateWindow: dart.fnType(dart.nullable(async.Future$(dart.nullable(core.bool))), [types.CreateWindowAction]),
    onCloseWindow: dart.fnType(dart.void, []),
    onWindowFocus: dart.fnType(dart.void, []),
    onWindowBlur: dart.fnType(dart.void, []),
    onJsAlert: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.JsAlertResponse))), [types.JsAlertRequest]),
    onJsConfirm: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.JsConfirmResponse))), [types.JsConfirmRequest]),
    onJsPrompt: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.JsPromptResponse))), [types.JsPromptRequest]),
    onReceivedHttpAuthRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.HttpAuthResponse))), [types.URLAuthenticationChallenge]),
    onReceivedServerTrustAuthRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.ServerTrustAuthResponse))), [types.URLAuthenticationChallenge]),
    onReceivedClientCertRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.ClientCertResponse))), [types.URLAuthenticationChallenge]),
    onFindResultReceived: dart.fnType(dart.void, [core.int, core.int, core.bool]),
    shouldInterceptAjaxRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.AjaxRequest))), [types.AjaxRequest]),
    onAjaxReadyStateChange: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.AjaxRequestAction))), [types.AjaxRequest]),
    onAjaxProgress: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.AjaxRequestAction))), [types.AjaxRequest]),
    shouldInterceptFetchRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.FetchRequest))), [types.FetchRequest]),
    onUpdateVisitedHistory: dart.fnType(dart.void, [dart.nullable(core.Uri), dart.nullable(core.bool)]),
    onPrint: dart.fnType(dart.void, [dart.nullable(core.Uri)]),
    onLongPressHitTestResult: dart.fnType(dart.void, [types.InAppWebViewHitTestResult]),
    onEnterFullscreen: dart.fnType(dart.void, []),
    onExitFullscreen: dart.fnType(dart.void, []),
    onPageCommitVisible: dart.fnType(dart.void, [dart.nullable(core.Uri)]),
    onTitleChanged: dart.fnType(dart.void, [dart.nullable(core.String)]),
    onOverScrolled: dart.fnType(dart.void, [core.int, core.int, core.bool, core.bool]),
    onZoomScaleChanged: dart.fnType(dart.void, [core.double, core.double]),
    androidOnSafeBrowsingHit: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.SafeBrowsingResponse))), [core.Uri, dart.nullable(types.SafeBrowsingThreat)]),
    androidOnPermissionRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.PermissionRequestResponse))), [core.String, core.List$(core.String)]),
    androidOnGeolocationPermissionsShowPrompt: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.GeolocationPermissionShowPromptResponse))), [core.String]),
    androidOnGeolocationPermissionsHidePrompt: dart.fnType(dart.void, []),
    androidShouldInterceptRequest: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.WebResourceResponse))), [types.WebResourceRequest]),
    androidOnRenderProcessUnresponsive: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.WebViewRenderProcessAction))), [dart.nullable(core.Uri)]),
    androidOnRenderProcessResponsive: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.WebViewRenderProcessAction))), [dart.nullable(core.Uri)]),
    androidOnRenderProcessGone: dart.fnType(dart.void, [types.RenderProcessGoneDetail]),
    androidOnFormResubmission: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.FormResubmissionAction))), [dart.nullable(core.Uri)]),
    androidOnScaleChanged: dart.fnType(dart.void, [core.double, core.double]),
    androidOnReceivedIcon: dart.fnType(dart.void, [typed_data.Uint8List]),
    androidOnReceivedTouchIconUrl: dart.fnType(dart.void, [core.Uri, core.bool]),
    androidOnJsBeforeUnload: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.JsBeforeUnloadResponse))), [types.JsBeforeUnloadRequest]),
    androidOnReceivedLoginRequest: dart.fnType(dart.void, [types.LoginRequest]),
    iosOnWebContentProcessDidTerminate: dart.fnType(dart.void, []),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.fnType(dart.void, []),
    iosOnNavigationResponse: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.IOSNavigationResponseAction))), [types.IOSWKNavigationResponse]),
    iosShouldAllowDeprecatedTLS: dart.fnType(dart.nullable(async.Future$(dart.nullable(types.IOSShouldAllowDeprecatedTLSAction))), [types.URLAuthenticationChallenge]),
    throwIfAlreadyOpened: dart.fnType(dart.void, [], {message: core.String}, {}),
    throwIfNotOpened: dart.fnType(dart.void, [], {message: core.String}, {})
  }));
  dart.setGetterSignature(in_app_browser.InAppBrowser, () => ({
    __proto__: dart.getGetters(in_app_browser.InAppBrowser.__proto__),
    id: core.String,
    [S$._channel$7]: platform_channel.MethodChannel,
    webViewController: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setSetterSignature(in_app_browser.InAppBrowser, () => ({
    __proto__: dart.getSetters(in_app_browser.InAppBrowser.__proto__),
    id: core.String,
    [S$._channel$7]: platform_channel.MethodChannel,
    webViewController: in_app_webview_controller$0.InAppWebViewController
  }));
  dart.setLibraryUri(in_app_browser.InAppBrowser, I[56]);
  dart.setFieldSignature(in_app_browser.InAppBrowser, () => ({
    __proto__: dart.getFields(in_app_browser.InAppBrowser.__proto__),
    [S$.__InAppBrowser_id]: dart.fieldType(dart.nullable(core.String)),
    [S$.__InAppBrowser_id_isSet]: dart.fieldType(core.bool),
    contextMenu: dart.fieldType(dart.nullable(context_menu.ContextMenu)),
    pullToRefreshController: dart.fieldType(dart.nullable(pull_to_refresh_controller.PullToRefreshController)),
    initialUserScripts: dart.finalFieldType(dart.nullable(collection.UnmodifiableListView$(types.UserScript))),
    [S$._isOpened$1]: dart.fieldType(core.bool),
    [S$.__InAppBrowser__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    [S$.__InAppBrowser__channel_isSet]: dart.fieldType(core.bool),
    [S$.__InAppBrowser_webViewController]: dart.fieldType(dart.nullable(in_app_webview_controller$0.InAppWebViewController)),
    [S$.__InAppBrowser_webViewController_isSet]: dart.fieldType(core.bool),
    windowId: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineLazy(in_app_browser.InAppBrowser, {
    /*in_app_browser.InAppBrowser._sharedChannel*/get _sharedChannel() {
      return C[283] || CT.C283;
    }
  }, false);
  pull_to_refresh_controller.PullToRefreshController = class PullToRefreshController extends core.Object {
    get onRefresh() {
      return this[S$.onRefresh];
    }
    set onRefresh(value) {
      super.onRefresh = value;
    }
    get options() {
      let t98;
      return dart.test(this[S$.__PullToRefreshController_options_isSet]) ? (t98 = this[S$.__PullToRefreshController_options], t98) : dart.throw(new _internal.LateError.fieldNI("options"));
    }
    set options(t98) {
      if (t98 == null) dart.nullFailed(I[58], 19, 29, "null");
      this[S$.__PullToRefreshController_options_isSet] = true;
      this[S$.__PullToRefreshController_options] = t98;
    }
    handleMethod(call) {
      if (call == null) dart.nullFailed(I[58], 29, 43, "call");
      return async.async(dart.dynamic, (function* handleMethod() {
        switch (call.method) {
          case "onRefresh":
          {
            if (this.onRefresh != null) dart.nullCheck(this.onRefresh)();
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unimplemented " + dart.str(call.method) + " method"));
          }
        }
        return null;
      }).bind(this));
    }
    setEnabled(enabled) {
      if (enabled == null) dart.nullFailed(I[58], 41, 32, "enabled");
      return async.async(dart.void, (function* setEnabled() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("enabled", dart.fn(() => enabled, T.VoidTobool()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setEnabled", args));
      }).bind(this));
    }
    [S$._setRefreshing](refreshing) {
      if (refreshing == null) dart.nullFailed(I[58], 47, 36, "refreshing");
      return async.async(dart.void, (function* _setRefreshing() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("refreshing", dart.fn(() => refreshing, T.VoidTobool()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setRefreshing", args));
      }).bind(this));
    }
    beginRefreshing() {
      return async.async(dart.void, (function* beginRefreshing() {
        return yield this[S$._setRefreshing](true);
      }).bind(this));
    }
    endRefreshing() {
      return async.async(dart.void, (function* endRefreshing() {
        yield this[S$._setRefreshing](false);
      }).bind(this));
    }
    isRefreshing() {
      return async.async(core.bool, (function* isRefreshing() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfbool().as(yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "isRefreshing", args)));
      }).bind(this));
    }
    setColor(color) {
      if (color == null) dart.nullFailed(I[58], 79, 31, "color");
      return async.async(dart.void, (function* setColor() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("color", dart.fn(() => util['HexColor|toHex'](color), T.VoidToString()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setColor", args));
      }).bind(this));
    }
    setBackgroundColor(color) {
      if (color == null) dart.nullFailed(I[58], 86, 41, "color");
      return async.async(dart.void, (function* setBackgroundColor() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("color", dart.fn(() => util['HexColor|toHex'](color), T.VoidToString()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setBackgroundColor", args));
      }).bind(this));
    }
    setDistanceToTriggerSync(distanceToTriggerSync) {
      if (distanceToTriggerSync == null) dart.nullFailed(I[58], 95, 45, "distanceToTriggerSync");
      return async.async(dart.void, (function* setDistanceToTriggerSync() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("distanceToTriggerSync", dart.fn(() => distanceToTriggerSync, T.VoidToint()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setDistanceToTriggerSync", args));
      }).bind(this));
    }
    setSlingshotDistance(slingshotDistance) {
      if (slingshotDistance == null) dart.nullFailed(I[58], 104, 41, "slingshotDistance");
      return async.async(dart.void, (function* setSlingshotDistance() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("slingshotDistance", dart.fn(() => slingshotDistance, T.VoidToint()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setSlingshotDistance", args));
      }).bind(this));
    }
    getDefaultSlingshotDistance() {
      return async.async(core.int, (function* getDefaultSlingshotDistance() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        return T.FutureOrOfint().as(yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "getDefaultSlingshotDistance", args)));
      }).bind(this));
    }
    setSize(size) {
      if (size == null) dart.nullFailed(I[58], 121, 49, "size");
      return async.async(dart.void, (function* setSize() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("size", dart.fn(() => size.toValue(), T.VoidToint()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setSize", args));
      }).bind(this));
    }
    setAttributedTitle(attributedTitle) {
      if (attributedTitle == null) dart.nullFailed(I[58], 130, 57, "attributedTitle");
      return async.async(dart.void, (function* setAttributedTitle() {
        let t99;
        let args = new (T.IdentityMapOfString$dynamic()).new();
        args[S.$putIfAbsent]("attributedTitle", dart.fn(() => attributedTitle.toMap(), T.VoidToMapOfString$dynamic()));
        yield (t99 = this[S$._channel$8], t99 == null ? null : t99.invokeMethod(dart.dynamic, "setAttributedTitle", args));
      }).bind(this));
    }
    initMethodChannel(id) {
      let t99;
      this[S$._channel$8] = new platform_channel.MethodChannel.new("com.pichillilorenzo/flutter_inappwebview_pull_to_refresh_" + dart.str(id));
      t99 = this[S$._channel$8];
      t99 == null ? null : t99.setMethodCallHandler(dart.bind(this, 'handleMethod'));
    }
  };
  (pull_to_refresh_controller.PullToRefreshController.new = function(opts) {
    let t98;
    let options = opts && 'options' in opts ? opts.options : null;
    let onRefresh = opts && 'onRefresh' in opts ? opts.onRefresh : null;
    this[S$.__PullToRefreshController_options] = null;
    this[S$.__PullToRefreshController_options_isSet] = false;
    this[S$._channel$8] = null;
    this[S$.onRefresh] = onRefresh;
    this.options = (t98 = options, t98 == null ? new pull_to_refresh_options.PullToRefreshOptions.new() : t98);
  }).prototype = pull_to_refresh_controller.PullToRefreshController.prototype;
  dart.addTypeTests(pull_to_refresh_controller.PullToRefreshController);
  dart.addTypeCaches(pull_to_refresh_controller.PullToRefreshController);
  dart.setMethodSignature(pull_to_refresh_controller.PullToRefreshController, () => ({
    __proto__: dart.getMethods(pull_to_refresh_controller.PullToRefreshController.__proto__),
    handleMethod: dart.fnType(async.Future, [message_codec.MethodCall]),
    setEnabled: dart.fnType(async.Future$(dart.void), [core.bool]),
    [S$._setRefreshing]: dart.fnType(async.Future$(dart.void), [core.bool]),
    beginRefreshing: dart.fnType(async.Future$(dart.void), []),
    endRefreshing: dart.fnType(async.Future$(dart.void), []),
    isRefreshing: dart.fnType(async.Future$(core.bool), []),
    setColor: dart.fnType(async.Future$(dart.void), [ui.Color]),
    setBackgroundColor: dart.fnType(async.Future$(dart.void), [ui.Color]),
    setDistanceToTriggerSync: dart.fnType(async.Future$(dart.void), [core.int]),
    setSlingshotDistance: dart.fnType(async.Future$(dart.void), [core.int]),
    getDefaultSlingshotDistance: dart.fnType(async.Future$(core.int), []),
    setSize: dart.fnType(async.Future$(dart.void), [types.AndroidPullToRefreshSize]),
    setAttributedTitle: dart.fnType(async.Future$(dart.void), [types.IOSNSAttributedString]),
    initMethodChannel: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setGetterSignature(pull_to_refresh_controller.PullToRefreshController, () => ({
    __proto__: dart.getGetters(pull_to_refresh_controller.PullToRefreshController.__proto__),
    options: pull_to_refresh_options.PullToRefreshOptions
  }));
  dart.setSetterSignature(pull_to_refresh_controller.PullToRefreshController, () => ({
    __proto__: dart.getSetters(pull_to_refresh_controller.PullToRefreshController.__proto__),
    options: pull_to_refresh_options.PullToRefreshOptions
  }));
  dart.setLibraryUri(pull_to_refresh_controller.PullToRefreshController, I[59]);
  dart.setFieldSignature(pull_to_refresh_controller.PullToRefreshController, () => ({
    __proto__: dart.getFields(pull_to_refresh_controller.PullToRefreshController.__proto__),
    [S$.__PullToRefreshController_options]: dart.fieldType(dart.nullable(pull_to_refresh_options.PullToRefreshOptions)),
    [S$.__PullToRefreshController_options_isSet]: dart.fieldType(core.bool),
    [S$._channel$8]: dart.fieldType(dart.nullable(platform_channel.MethodChannel)),
    onRefresh: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  webview.WebView = class WebView extends core.Object {
    get windowId() {
      return this[S$.windowId$4];
    }
    set windowId(value) {
      super.windowId = value;
    }
    get onWebViewCreated() {
      return this[S$.onWebViewCreated$2];
    }
    set onWebViewCreated(value) {
      super.onWebViewCreated = value;
    }
    get onLoadStart() {
      return this[S$.onLoadStart$2];
    }
    set onLoadStart(value) {
      super.onLoadStart = value;
    }
    get onLoadStop() {
      return this[S$.onLoadStop$2];
    }
    set onLoadStop(value) {
      super.onLoadStop = value;
    }
    get onLoadError() {
      return this[S$.onLoadError$2];
    }
    set onLoadError(value) {
      super.onLoadError = value;
    }
    get onLoadHttpError() {
      return this[S$.onLoadHttpError$2];
    }
    set onLoadHttpError(value) {
      super.onLoadHttpError = value;
    }
    get onProgressChanged() {
      return this[S$.onProgressChanged$2];
    }
    set onProgressChanged(value) {
      super.onProgressChanged = value;
    }
    get onConsoleMessage() {
      return this[S$.onConsoleMessage$2];
    }
    set onConsoleMessage(value) {
      super.onConsoleMessage = value;
    }
    get shouldOverrideUrlLoading() {
      return this[S$.shouldOverrideUrlLoading$2];
    }
    set shouldOverrideUrlLoading(value) {
      super.shouldOverrideUrlLoading = value;
    }
    get onLoadResource() {
      return this[S$.onLoadResource$2];
    }
    set onLoadResource(value) {
      super.onLoadResource = value;
    }
    get onScrollChanged() {
      return this[S$.onScrollChanged$2];
    }
    set onScrollChanged(value) {
      super.onScrollChanged = value;
    }
    get onDownloadStart() {
      return this[S$.onDownloadStart$2];
    }
    set onDownloadStart(value) {
      super.onDownloadStart = value;
    }
    get onLoadResourceCustomScheme() {
      return this[S$.onLoadResourceCustomScheme$2];
    }
    set onLoadResourceCustomScheme(value) {
      super.onLoadResourceCustomScheme = value;
    }
    get onCreateWindow() {
      return this[S$.onCreateWindow$2];
    }
    set onCreateWindow(value) {
      super.onCreateWindow = value;
    }
    get onCloseWindow() {
      return this[S$.onCloseWindow$2];
    }
    set onCloseWindow(value) {
      super.onCloseWindow = value;
    }
    get onWindowFocus() {
      return this[S$.onWindowFocus$2];
    }
    set onWindowFocus(value) {
      super.onWindowFocus = value;
    }
    get onWindowBlur() {
      return this[S$.onWindowBlur$2];
    }
    set onWindowBlur(value) {
      super.onWindowBlur = value;
    }
    get onJsAlert() {
      return this[S$.onJsAlert$2];
    }
    set onJsAlert(value) {
      super.onJsAlert = value;
    }
    get onJsConfirm() {
      return this[S$.onJsConfirm$2];
    }
    set onJsConfirm(value) {
      super.onJsConfirm = value;
    }
    get onJsPrompt() {
      return this[S$.onJsPrompt$2];
    }
    set onJsPrompt(value) {
      super.onJsPrompt = value;
    }
    get onReceivedHttpAuthRequest() {
      return this[S$.onReceivedHttpAuthRequest$2];
    }
    set onReceivedHttpAuthRequest(value) {
      super.onReceivedHttpAuthRequest = value;
    }
    get onReceivedServerTrustAuthRequest() {
      return this[S$.onReceivedServerTrustAuthRequest$2];
    }
    set onReceivedServerTrustAuthRequest(value) {
      super.onReceivedServerTrustAuthRequest = value;
    }
    get onReceivedClientCertRequest() {
      return this[S$.onReceivedClientCertRequest$2];
    }
    set onReceivedClientCertRequest(value) {
      super.onReceivedClientCertRequest = value;
    }
    get onFindResultReceived() {
      return this[S$.onFindResultReceived$2];
    }
    set onFindResultReceived(value) {
      super.onFindResultReceived = value;
    }
    get shouldInterceptAjaxRequest() {
      return this[S$.shouldInterceptAjaxRequest$2];
    }
    set shouldInterceptAjaxRequest(value) {
      super.shouldInterceptAjaxRequest = value;
    }
    get onAjaxReadyStateChange() {
      return this[S$.onAjaxReadyStateChange$2];
    }
    set onAjaxReadyStateChange(value) {
      super.onAjaxReadyStateChange = value;
    }
    get onAjaxProgress() {
      return this[S$.onAjaxProgress$2];
    }
    set onAjaxProgress(value) {
      super.onAjaxProgress = value;
    }
    get shouldInterceptFetchRequest() {
      return this[S$.shouldInterceptFetchRequest$2];
    }
    set shouldInterceptFetchRequest(value) {
      super.shouldInterceptFetchRequest = value;
    }
    get onUpdateVisitedHistory() {
      return this[S$.onUpdateVisitedHistory$2];
    }
    set onUpdateVisitedHistory(value) {
      super.onUpdateVisitedHistory = value;
    }
    get onPrint() {
      return this[S$.onPrint$2];
    }
    set onPrint(value) {
      super.onPrint = value;
    }
    get onLongPressHitTestResult() {
      return this[S$.onLongPressHitTestResult$2];
    }
    set onLongPressHitTestResult(value) {
      super.onLongPressHitTestResult = value;
    }
    get onEnterFullscreen() {
      return this[S$.onEnterFullscreen$2];
    }
    set onEnterFullscreen(value) {
      super.onEnterFullscreen = value;
    }
    get onExitFullscreen() {
      return this[S$.onExitFullscreen$2];
    }
    set onExitFullscreen(value) {
      super.onExitFullscreen = value;
    }
    get onPageCommitVisible() {
      return this[S$.onPageCommitVisible$2];
    }
    set onPageCommitVisible(value) {
      super.onPageCommitVisible = value;
    }
    get onTitleChanged() {
      return this[S$.onTitleChanged$2];
    }
    set onTitleChanged(value) {
      super.onTitleChanged = value;
    }
    get onOverScrolled() {
      return this[S$.onOverScrolled$2];
    }
    set onOverScrolled(value) {
      super.onOverScrolled = value;
    }
    get onZoomScaleChanged() {
      return this[S$.onZoomScaleChanged$2];
    }
    set onZoomScaleChanged(value) {
      super.onZoomScaleChanged = value;
    }
    get androidOnSafeBrowsingHit() {
      return this[S$.androidOnSafeBrowsingHit$2];
    }
    set androidOnSafeBrowsingHit(value) {
      super.androidOnSafeBrowsingHit = value;
    }
    get androidOnPermissionRequest() {
      return this[S$.androidOnPermissionRequest$2];
    }
    set androidOnPermissionRequest(value) {
      super.androidOnPermissionRequest = value;
    }
    get androidOnGeolocationPermissionsShowPrompt() {
      return this[S$.androidOnGeolocationPermissionsShowPrompt$2];
    }
    set androidOnGeolocationPermissionsShowPrompt(value) {
      super.androidOnGeolocationPermissionsShowPrompt = value;
    }
    get androidOnGeolocationPermissionsHidePrompt() {
      return this[S$.androidOnGeolocationPermissionsHidePrompt$2];
    }
    set androidOnGeolocationPermissionsHidePrompt(value) {
      super.androidOnGeolocationPermissionsHidePrompt = value;
    }
    get androidShouldInterceptRequest() {
      return this[S$.androidShouldInterceptRequest$2];
    }
    set androidShouldInterceptRequest(value) {
      super.androidShouldInterceptRequest = value;
    }
    get androidOnRenderProcessUnresponsive() {
      return this[S$.androidOnRenderProcessUnresponsive$2];
    }
    set androidOnRenderProcessUnresponsive(value) {
      super.androidOnRenderProcessUnresponsive = value;
    }
    get androidOnRenderProcessResponsive() {
      return this[S$.androidOnRenderProcessResponsive$2];
    }
    set androidOnRenderProcessResponsive(value) {
      super.androidOnRenderProcessResponsive = value;
    }
    get androidOnRenderProcessGone() {
      return this[S$.androidOnRenderProcessGone$2];
    }
    set androidOnRenderProcessGone(value) {
      super.androidOnRenderProcessGone = value;
    }
    get androidOnFormResubmission() {
      return this[S$.androidOnFormResubmission$2];
    }
    set androidOnFormResubmission(value) {
      super.androidOnFormResubmission = value;
    }
    get androidOnScaleChanged() {
      return this[S$.androidOnScaleChanged$2];
    }
    set androidOnScaleChanged(value) {
      super.androidOnScaleChanged = value;
    }
    get androidOnReceivedIcon() {
      return this[S$.androidOnReceivedIcon$2];
    }
    set androidOnReceivedIcon(value) {
      super.androidOnReceivedIcon = value;
    }
    get androidOnReceivedTouchIconUrl() {
      return this[S$.androidOnReceivedTouchIconUrl$2];
    }
    set androidOnReceivedTouchIconUrl(value) {
      super.androidOnReceivedTouchIconUrl = value;
    }
    get androidOnJsBeforeUnload() {
      return this[S$.androidOnJsBeforeUnload$2];
    }
    set androidOnJsBeforeUnload(value) {
      super.androidOnJsBeforeUnload = value;
    }
    get androidOnReceivedLoginRequest() {
      return this[S$.androidOnReceivedLoginRequest$2];
    }
    set androidOnReceivedLoginRequest(value) {
      super.androidOnReceivedLoginRequest = value;
    }
    get iosOnWebContentProcessDidTerminate() {
      return this[S$.iosOnWebContentProcessDidTerminate$2];
    }
    set iosOnWebContentProcessDidTerminate(value) {
      super.iosOnWebContentProcessDidTerminate = value;
    }
    get iosOnDidReceiveServerRedirectForProvisionalNavigation() {
      return this[S$.iosOnDidReceiveServerRedirectForProvisionalNavigation$2];
    }
    set iosOnDidReceiveServerRedirectForProvisionalNavigation(value) {
      super.iosOnDidReceiveServerRedirectForProvisionalNavigation = value;
    }
    get iosOnNavigationResponse() {
      return this[S$.iosOnNavigationResponse$2];
    }
    set iosOnNavigationResponse(value) {
      super.iosOnNavigationResponse = value;
    }
    get iosShouldAllowDeprecatedTLS() {
      return this[S$.iosShouldAllowDeprecatedTLS$2];
    }
    set iosShouldAllowDeprecatedTLS(value) {
      super.iosShouldAllowDeprecatedTLS = value;
    }
    get initialUrlRequest() {
      return this[S$.initialUrlRequest$2];
    }
    set initialUrlRequest(value) {
      super.initialUrlRequest = value;
    }
    get initialFile() {
      return this[S$.initialFile$2];
    }
    set initialFile(value) {
      super.initialFile = value;
    }
    get initialData() {
      return this[S$.initialData$2];
    }
    set initialData(value) {
      super.initialData = value;
    }
    get initialOptions() {
      return this[S$.initialOptions$2];
    }
    set initialOptions(value) {
      super.initialOptions = value;
    }
    get contextMenu() {
      return this[S$.contextMenu$3];
    }
    set contextMenu(value) {
      super.contextMenu = value;
    }
    get initialUserScripts() {
      return this[S$.initialUserScripts$3];
    }
    set initialUserScripts(value) {
      super.initialUserScripts = value;
    }
    get pullToRefreshController() {
      return this[S$.pullToRefreshController$3];
    }
    set pullToRefreshController(value) {
      super.pullToRefreshController = value;
    }
  };
  (webview.WebView.new = function(opts) {
    let windowId = opts && 'windowId' in opts ? opts.windowId : null;
    let onWebViewCreated = opts && 'onWebViewCreated' in opts ? opts.onWebViewCreated : null;
    let onLoadStart = opts && 'onLoadStart' in opts ? opts.onLoadStart : null;
    let onLoadStop = opts && 'onLoadStop' in opts ? opts.onLoadStop : null;
    let onLoadError = opts && 'onLoadError' in opts ? opts.onLoadError : null;
    let onLoadHttpError = opts && 'onLoadHttpError' in opts ? opts.onLoadHttpError : null;
    let onProgressChanged = opts && 'onProgressChanged' in opts ? opts.onProgressChanged : null;
    let onConsoleMessage = opts && 'onConsoleMessage' in opts ? opts.onConsoleMessage : null;
    let shouldOverrideUrlLoading = opts && 'shouldOverrideUrlLoading' in opts ? opts.shouldOverrideUrlLoading : null;
    let onLoadResource = opts && 'onLoadResource' in opts ? opts.onLoadResource : null;
    let onScrollChanged = opts && 'onScrollChanged' in opts ? opts.onScrollChanged : null;
    let onDownloadStart = opts && 'onDownloadStart' in opts ? opts.onDownloadStart : null;
    let onLoadResourceCustomScheme = opts && 'onLoadResourceCustomScheme' in opts ? opts.onLoadResourceCustomScheme : null;
    let onCreateWindow = opts && 'onCreateWindow' in opts ? opts.onCreateWindow : null;
    let onCloseWindow = opts && 'onCloseWindow' in opts ? opts.onCloseWindow : null;
    let onJsAlert = opts && 'onJsAlert' in opts ? opts.onJsAlert : null;
    let onJsConfirm = opts && 'onJsConfirm' in opts ? opts.onJsConfirm : null;
    let onJsPrompt = opts && 'onJsPrompt' in opts ? opts.onJsPrompt : null;
    let onReceivedHttpAuthRequest = opts && 'onReceivedHttpAuthRequest' in opts ? opts.onReceivedHttpAuthRequest : null;
    let onReceivedServerTrustAuthRequest = opts && 'onReceivedServerTrustAuthRequest' in opts ? opts.onReceivedServerTrustAuthRequest : null;
    let onReceivedClientCertRequest = opts && 'onReceivedClientCertRequest' in opts ? opts.onReceivedClientCertRequest : null;
    let onFindResultReceived = opts && 'onFindResultReceived' in opts ? opts.onFindResultReceived : null;
    let shouldInterceptAjaxRequest = opts && 'shouldInterceptAjaxRequest' in opts ? opts.shouldInterceptAjaxRequest : null;
    let onAjaxReadyStateChange = opts && 'onAjaxReadyStateChange' in opts ? opts.onAjaxReadyStateChange : null;
    let onAjaxProgress = opts && 'onAjaxProgress' in opts ? opts.onAjaxProgress : null;
    let shouldInterceptFetchRequest = opts && 'shouldInterceptFetchRequest' in opts ? opts.shouldInterceptFetchRequest : null;
    let onUpdateVisitedHistory = opts && 'onUpdateVisitedHistory' in opts ? opts.onUpdateVisitedHistory : null;
    let onPrint = opts && 'onPrint' in opts ? opts.onPrint : null;
    let onLongPressHitTestResult = opts && 'onLongPressHitTestResult' in opts ? opts.onLongPressHitTestResult : null;
    let onEnterFullscreen = opts && 'onEnterFullscreen' in opts ? opts.onEnterFullscreen : null;
    let onExitFullscreen = opts && 'onExitFullscreen' in opts ? opts.onExitFullscreen : null;
    let onPageCommitVisible = opts && 'onPageCommitVisible' in opts ? opts.onPageCommitVisible : null;
    let onTitleChanged = opts && 'onTitleChanged' in opts ? opts.onTitleChanged : null;
    let onWindowFocus = opts && 'onWindowFocus' in opts ? opts.onWindowFocus : null;
    let onWindowBlur = opts && 'onWindowBlur' in opts ? opts.onWindowBlur : null;
    let onOverScrolled = opts && 'onOverScrolled' in opts ? opts.onOverScrolled : null;
    let onZoomScaleChanged = opts && 'onZoomScaleChanged' in opts ? opts.onZoomScaleChanged : null;
    let androidOnSafeBrowsingHit = opts && 'androidOnSafeBrowsingHit' in opts ? opts.androidOnSafeBrowsingHit : null;
    let androidOnPermissionRequest = opts && 'androidOnPermissionRequest' in opts ? opts.androidOnPermissionRequest : null;
    let androidOnGeolocationPermissionsShowPrompt = opts && 'androidOnGeolocationPermissionsShowPrompt' in opts ? opts.androidOnGeolocationPermissionsShowPrompt : null;
    let androidOnGeolocationPermissionsHidePrompt = opts && 'androidOnGeolocationPermissionsHidePrompt' in opts ? opts.androidOnGeolocationPermissionsHidePrompt : null;
    let androidShouldInterceptRequest = opts && 'androidShouldInterceptRequest' in opts ? opts.androidShouldInterceptRequest : null;
    let androidOnRenderProcessGone = opts && 'androidOnRenderProcessGone' in opts ? opts.androidOnRenderProcessGone : null;
    let androidOnRenderProcessResponsive = opts && 'androidOnRenderProcessResponsive' in opts ? opts.androidOnRenderProcessResponsive : null;
    let androidOnRenderProcessUnresponsive = opts && 'androidOnRenderProcessUnresponsive' in opts ? opts.androidOnRenderProcessUnresponsive : null;
    let androidOnFormResubmission = opts && 'androidOnFormResubmission' in opts ? opts.androidOnFormResubmission : null;
    let androidOnScaleChanged = opts && 'androidOnScaleChanged' in opts ? opts.androidOnScaleChanged : null;
    let androidOnReceivedIcon = opts && 'androidOnReceivedIcon' in opts ? opts.androidOnReceivedIcon : null;
    let androidOnReceivedTouchIconUrl = opts && 'androidOnReceivedTouchIconUrl' in opts ? opts.androidOnReceivedTouchIconUrl : null;
    let androidOnJsBeforeUnload = opts && 'androidOnJsBeforeUnload' in opts ? opts.androidOnJsBeforeUnload : null;
    let androidOnReceivedLoginRequest = opts && 'androidOnReceivedLoginRequest' in opts ? opts.androidOnReceivedLoginRequest : null;
    let iosOnWebContentProcessDidTerminate = opts && 'iosOnWebContentProcessDidTerminate' in opts ? opts.iosOnWebContentProcessDidTerminate : null;
    let iosOnDidReceiveServerRedirectForProvisionalNavigation = opts && 'iosOnDidReceiveServerRedirectForProvisionalNavigation' in opts ? opts.iosOnDidReceiveServerRedirectForProvisionalNavigation : null;
    let iosOnNavigationResponse = opts && 'iosOnNavigationResponse' in opts ? opts.iosOnNavigationResponse : null;
    let iosShouldAllowDeprecatedTLS = opts && 'iosShouldAllowDeprecatedTLS' in opts ? opts.iosShouldAllowDeprecatedTLS : null;
    let initialUrlRequest = opts && 'initialUrlRequest' in opts ? opts.initialUrlRequest : null;
    let initialFile = opts && 'initialFile' in opts ? opts.initialFile : null;
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let initialOptions = opts && 'initialOptions' in opts ? opts.initialOptions : null;
    let contextMenu = opts && 'contextMenu' in opts ? opts.contextMenu : null;
    let initialUserScripts = opts && 'initialUserScripts' in opts ? opts.initialUserScripts : null;
    let pullToRefreshController = opts && 'pullToRefreshController' in opts ? opts.pullToRefreshController : null;
    this[S$.windowId$4] = windowId;
    this[S$.onWebViewCreated$2] = onWebViewCreated;
    this[S$.onLoadStart$2] = onLoadStart;
    this[S$.onLoadStop$2] = onLoadStop;
    this[S$.onLoadError$2] = onLoadError;
    this[S$.onLoadHttpError$2] = onLoadHttpError;
    this[S$.onProgressChanged$2] = onProgressChanged;
    this[S$.onConsoleMessage$2] = onConsoleMessage;
    this[S$.shouldOverrideUrlLoading$2] = shouldOverrideUrlLoading;
    this[S$.onLoadResource$2] = onLoadResource;
    this[S$.onScrollChanged$2] = onScrollChanged;
    this[S$.onDownloadStart$2] = onDownloadStart;
    this[S$.onLoadResourceCustomScheme$2] = onLoadResourceCustomScheme;
    this[S$.onCreateWindow$2] = onCreateWindow;
    this[S$.onCloseWindow$2] = onCloseWindow;
    this[S$.onJsAlert$2] = onJsAlert;
    this[S$.onJsConfirm$2] = onJsConfirm;
    this[S$.onJsPrompt$2] = onJsPrompt;
    this[S$.onReceivedHttpAuthRequest$2] = onReceivedHttpAuthRequest;
    this[S$.onReceivedServerTrustAuthRequest$2] = onReceivedServerTrustAuthRequest;
    this[S$.onReceivedClientCertRequest$2] = onReceivedClientCertRequest;
    this[S$.onFindResultReceived$2] = onFindResultReceived;
    this[S$.shouldInterceptAjaxRequest$2] = shouldInterceptAjaxRequest;
    this[S$.onAjaxReadyStateChange$2] = onAjaxReadyStateChange;
    this[S$.onAjaxProgress$2] = onAjaxProgress;
    this[S$.shouldInterceptFetchRequest$2] = shouldInterceptFetchRequest;
    this[S$.onUpdateVisitedHistory$2] = onUpdateVisitedHistory;
    this[S$.onPrint$2] = onPrint;
    this[S$.onLongPressHitTestResult$2] = onLongPressHitTestResult;
    this[S$.onEnterFullscreen$2] = onEnterFullscreen;
    this[S$.onExitFullscreen$2] = onExitFullscreen;
    this[S$.onPageCommitVisible$2] = onPageCommitVisible;
    this[S$.onTitleChanged$2] = onTitleChanged;
    this[S$.onWindowFocus$2] = onWindowFocus;
    this[S$.onWindowBlur$2] = onWindowBlur;
    this[S$.onOverScrolled$2] = onOverScrolled;
    this[S$.onZoomScaleChanged$2] = onZoomScaleChanged;
    this[S$.androidOnSafeBrowsingHit$2] = androidOnSafeBrowsingHit;
    this[S$.androidOnPermissionRequest$2] = androidOnPermissionRequest;
    this[S$.androidOnGeolocationPermissionsShowPrompt$2] = androidOnGeolocationPermissionsShowPrompt;
    this[S$.androidOnGeolocationPermissionsHidePrompt$2] = androidOnGeolocationPermissionsHidePrompt;
    this[S$.androidShouldInterceptRequest$2] = androidShouldInterceptRequest;
    this[S$.androidOnRenderProcessGone$2] = androidOnRenderProcessGone;
    this[S$.androidOnRenderProcessResponsive$2] = androidOnRenderProcessResponsive;
    this[S$.androidOnRenderProcessUnresponsive$2] = androidOnRenderProcessUnresponsive;
    this[S$.androidOnFormResubmission$2] = androidOnFormResubmission;
    this[S$.androidOnScaleChanged$2] = androidOnScaleChanged;
    this[S$.androidOnReceivedIcon$2] = androidOnReceivedIcon;
    this[S$.androidOnReceivedTouchIconUrl$2] = androidOnReceivedTouchIconUrl;
    this[S$.androidOnJsBeforeUnload$2] = androidOnJsBeforeUnload;
    this[S$.androidOnReceivedLoginRequest$2] = androidOnReceivedLoginRequest;
    this[S$.iosOnWebContentProcessDidTerminate$2] = iosOnWebContentProcessDidTerminate;
    this[S$.iosOnDidReceiveServerRedirectForProvisionalNavigation$2] = iosOnDidReceiveServerRedirectForProvisionalNavigation;
    this[S$.iosOnNavigationResponse$2] = iosOnNavigationResponse;
    this[S$.iosShouldAllowDeprecatedTLS$2] = iosShouldAllowDeprecatedTLS;
    this[S$.initialUrlRequest$2] = initialUrlRequest;
    this[S$.initialFile$2] = initialFile;
    this[S$.initialData$2] = initialData;
    this[S$.initialOptions$2] = initialOptions;
    this[S$.contextMenu$3] = contextMenu;
    this[S$.initialUserScripts$3] = initialUserScripts;
    this[S$.pullToRefreshController$3] = pullToRefreshController;
    ;
  }).prototype = webview.WebView.prototype;
  dart.addTypeTests(webview.WebView);
  dart.addTypeCaches(webview.WebView);
  dart.setLibraryUri(webview.WebView, I[60]);
  dart.setFieldSignature(webview.WebView, () => ({
    __proto__: dart.getFields(webview.WebView.__proto__),
    windowId: dart.finalFieldType(dart.nullable(core.int)),
    onWebViewCreated: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onLoadStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLoadStop: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLoadError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), core.int, core.String]))),
    onLoadHttpError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), core.int, core.String]))),
    onProgressChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int]))),
    onConsoleMessage: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.ConsoleMessage]))),
    shouldOverrideUrlLoading: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.NavigationActionPolicy)), [in_app_webview_controller$0.InAppWebViewController, types.NavigationAction]))),
    onLoadResource: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.LoadedResource]))),
    onScrollChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int]))),
    onDownloadStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.Uri]))),
    onLoadResourceCustomScheme: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.CustomSchemeResponse)), [in_app_webview_controller$0.InAppWebViewController, core.Uri]))),
    onCreateWindow: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(core.bool)), [in_app_webview_controller$0.InAppWebViewController, types.CreateWindowAction]))),
    onCloseWindow: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onWindowFocus: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onWindowBlur: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onJsAlert: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsAlertResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsAlertRequest]))),
    onJsConfirm: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsConfirmResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsConfirmRequest]))),
    onJsPrompt: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsPromptResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsPromptRequest]))),
    onReceivedHttpAuthRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.HttpAuthResponse)), [in_app_webview_controller$0.InAppWebViewController, types.HttpAuthenticationChallenge]))),
    onReceivedServerTrustAuthRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.ServerTrustAuthResponse)), [in_app_webview_controller$0.InAppWebViewController, types.ServerTrustChallenge]))),
    onReceivedClientCertRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.ClientCertResponse)), [in_app_webview_controller$0.InAppWebViewController, types.ClientCertChallenge]))),
    onFindResultReceived: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int, core.bool]))),
    shouldInterceptAjaxRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequest)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    onAjaxReadyStateChange: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequestAction)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    onAjaxProgress: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.AjaxRequestAction)), [in_app_webview_controller$0.InAppWebViewController, types.AjaxRequest]))),
    shouldInterceptFetchRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.FetchRequest)), [in_app_webview_controller$0.InAppWebViewController, types.FetchRequest]))),
    onUpdateVisitedHistory: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri), dart.nullable(core.bool)]))),
    onPrint: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onLongPressHitTestResult: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.InAppWebViewHitTestResult]))),
    onEnterFullscreen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onExitFullscreen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    onPageCommitVisible: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    onTitleChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.String)]))),
    onOverScrolled: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.int, core.int, core.bool, core.bool]))),
    onZoomScaleChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.double, core.double]))),
    androidOnSafeBrowsingHit: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.SafeBrowsingResponse)), [in_app_webview_controller$0.InAppWebViewController, core.Uri, dart.nullable(types.SafeBrowsingThreat)]))),
    androidOnPermissionRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.PermissionRequestResponse)), [in_app_webview_controller$0.InAppWebViewController, core.String, core.List$(core.String)]))),
    androidOnGeolocationPermissionsShowPrompt: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.GeolocationPermissionShowPromptResponse)), [in_app_webview_controller$0.InAppWebViewController, core.String]))),
    androidOnGeolocationPermissionsHidePrompt: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    androidShouldInterceptRequest: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebResourceResponse)), [in_app_webview_controller$0.InAppWebViewController, types.WebResourceRequest]))),
    androidOnRenderProcessUnresponsive: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebViewRenderProcessAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnRenderProcessResponsive: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.WebViewRenderProcessAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnRenderProcessGone: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.RenderProcessGoneDetail]))),
    androidOnFormResubmission: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.FormResubmissionAction)), [in_app_webview_controller$0.InAppWebViewController, dart.nullable(core.Uri)]))),
    androidOnScaleChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.double, core.double]))),
    androidOnReceivedIcon: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, typed_data.Uint8List]))),
    androidOnReceivedTouchIconUrl: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, core.Uri, core.bool]))),
    androidOnJsBeforeUnload: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.JsBeforeUnloadResponse)), [in_app_webview_controller$0.InAppWebViewController, types.JsBeforeUnloadRequest]))),
    androidOnReceivedLoginRequest: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController, types.LoginRequest]))),
    iosOnWebContentProcessDidTerminate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    iosOnDidReceiveServerRedirectForProvisionalNavigation: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [in_app_webview_controller$0.InAppWebViewController]))),
    iosOnNavigationResponse: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.IOSNavigationResponseAction)), [in_app_webview_controller$0.InAppWebViewController, types.IOSWKNavigationResponse]))),
    iosShouldAllowDeprecatedTLS: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(dart.nullable(types.IOSShouldAllowDeprecatedTLSAction)), [in_app_webview_controller$0.InAppWebViewController, types.URLAuthenticationChallenge]))),
    initialUrlRequest: dart.finalFieldType(dart.nullable(types.URLRequest)),
    initialFile: dart.finalFieldType(dart.nullable(core.String)),
    initialData: dart.finalFieldType(dart.nullable(types.InAppWebViewInitialData)),
    initialOptions: dart.finalFieldType(dart.nullable(in_app_webview_options$0.InAppWebViewGroupOptions)),
    contextMenu: dart.finalFieldType(dart.nullable(context_menu.ContextMenu)),
    initialUserScripts: dart.finalFieldType(dart.nullable(collection.UnmodifiableListView$(types.UserScript))),
    pullToRefreshController: dart.finalFieldType(dart.nullable(pull_to_refresh_controller.PullToRefreshController))
  }));
  dart.trackLibraries("packages/flutter_inappwebview/src/web_message/main.dart", {
    "package:flutter_inappwebview/src/web_message/main.dart": main,
    "package:flutter_inappwebview/src/pull_to_refresh/main.dart": main$,
    "package:flutter_inappwebview/src/web_storage/ios/main.dart": main$0,
    "package:flutter_inappwebview/src/web_storage/android/main.dart": main$1,
    "package:flutter_inappwebview/src/web_storage/ios/web_storage_manager.dart": web_storage_manager,
    "package:flutter_inappwebview/src/web_storage/android/web_storage_manager.dart": web_storage_manager$,
    "package:flutter_inappwebview/src/web_storage/web_storage_manager.dart": web_storage_manager$0,
    "package:flutter_inappwebview/src/web_storage/main.dart": main$2,
    "package:flutter_inappwebview/src/android/service_worker_controller.dart": service_worker_controller,
    "package:flutter_inappwebview/src/android/main.dart": main$3,
    "package:flutter_inappwebview/src/chrome_safari_browser/ios/main.dart": main$4,
    "package:flutter_inappwebview/src/chrome_safari_browser/android/main.dart": main$5,
    "package:flutter_inappwebview/src/chrome_safari_browser/ios/safari_options.dart": safari_options,
    "package:flutter_inappwebview/src/chrome_safari_browser/android/chrome_custom_tabs_options.dart": chrome_custom_tabs_options,
    "package:flutter_inappwebview/src/chrome_safari_browser/chrome_safari_browser_options.dart": chrome_safari_browser_options,
    "package:flutter_inappwebview/src/chrome_safari_browser/chrome_safari_browser.dart": chrome_safari_browser,
    "package:flutter_inappwebview/src/chrome_safari_browser/main.dart": main$6,
    "package:flutter_inappwebview/src/in_app_browser/ios/main.dart": main$7,
    "package:flutter_inappwebview/src/in_app_browser/android/main.dart": main$8,
    "package:flutter_inappwebview/src/in_app_browser/main.dart": main$9,
    "package:flutter_inappwebview/src/in_app_webview/ios/main.dart": main$10,
    "package:flutter_inappwebview/src/in_app_webview/android/main.dart": main$11,
    "package:flutter_inappwebview/src/cookie_manager.dart": cookie_manager,
    "package:flutter_inappwebview/src/http_auth_credentials_database.dart": http_auth_credentials_database,
    "package:flutter_inappwebview/src/in_app_webview/in_app_webview.dart": in_app_webview,
    "package:flutter_inappwebview/src/pull_to_refresh/pull_to_refresh_options.dart": pull_to_refresh_options,
    "package:flutter_inappwebview/src/content_blocker.dart": content_blocker,
    "package:flutter_inappwebview/src/in_app_webview/ios/in_app_webview_options.dart": in_app_webview_options,
    "package:flutter_inappwebview/src/in_app_browser/ios/in_app_browser_options.dart": in_app_browser_options,
    "package:flutter_inappwebview/src/in_app_browser/android/in_app_browser_options.dart": in_app_browser_options$,
    "package:flutter_inappwebview/src/in_app_browser/in_app_browser_options.dart": in_app_browser_options$0,
    "package:flutter_inappwebview/src/in_app_webview/android/in_app_webview_options.dart": in_app_webview_options$,
    "package:flutter_inappwebview/src/in_app_webview/in_app_webview_options.dart": in_app_webview_options$0,
    "package:flutter_inappwebview/src/in_app_webview/headless_in_app_webview.dart": headless_in_app_webview,
    "package:flutter_inappwebview/src/web_message/web_message_listener.dart": web_message_listener,
    "package:flutter_inappwebview/src/web_message/web_message_channel.dart": web_message_channel,
    "package:flutter_inappwebview/src/web_storage/web_storage.dart": web_storage,
    "package:flutter_inappwebview/src/in_app_webview/ios/in_app_webview_controller.dart": in_app_webview_controller,
    "package:flutter_inappwebview/src/in_app_webview/android/in_app_webview_controller.dart": in_app_webview_controller$,
    "package:flutter_inappwebview/src/in_app_webview/in_app_webview_controller.dart": in_app_webview_controller$0,
    "package:flutter_inappwebview/src/types.dart": types,
    "package:flutter_inappwebview/src/context_menu.dart": context_menu,
    "package:flutter_inappwebview/src/in_app_browser/in_app_browser.dart": in_app_browser,
    "package:flutter_inappwebview/src/pull_to_refresh/pull_to_refresh_controller.dart": pull_to_refresh_controller,
    "package:flutter_inappwebview/src/in_app_webview/webview.dart": webview,
    "package:flutter_inappwebview/src/in_app_webview/main.dart": main$12,
    "package:flutter_inappwebview/src/main.dart": main$13,
    "package:flutter_inappwebview/flutter_inappwebview.dart": flutter_inappwebview
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../web_storage/ios/web_storage_manager.dart","../web_storage/android/web_storage_manager.dart","../web_storage/web_storage_manager.dart","../android/service_worker_controller.dart","../chrome_safari_browser/ios/safari_options.dart","../chrome_safari_browser/android/chrome_custom_tabs_options.dart","../chrome_safari_browser/chrome_safari_browser_options.dart","../chrome_safari_browser/chrome_safari_browser.dart","../cookie_manager.dart","../http_auth_credentials_database.dart","../in_app_webview/in_app_webview.dart","../pull_to_refresh/pull_to_refresh_options.dart","../content_blocker.dart","../in_app_webview/ios/in_app_webview_options.dart","../in_app_browser/ios/in_app_browser_options.dart","../in_app_browser/android/in_app_browser_options.dart","../in_app_browser/in_app_browser_options.dart","../in_app_webview/android/in_app_webview_options.dart","../in_app_webview/in_app_webview_options.dart","../in_app_webview/headless_in_app_webview.dart","web_message_listener.dart","web_message_channel.dart","../web_storage/web_storage.dart","../in_app_webview/ios/in_app_webview_controller.dart","../in_app_webview/android/in_app_webview_controller.dart","../in_app_webview/in_app_webview_controller.dart","../types.dart","../context_menu.dart","../in_app_browser/in_app_browser.dart","../pull_to_refresh/pull_to_refresh_controller.dart","../in_app_webview/webview.dart"],"names":[],"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AAEmB,MADzD,AAAQ,OAAD,+BACO,yCAAQ,AAAG,GAAA,UAAC;AAE+B,MADzD,AAAQ,OAAD,+BACO,yCAAQ,AAAG,GAAA,UAAC;AAEiC,MAD3D,AAAQ,OAAD,iCACO,yCAAQ,AAAG,GAAA,UAAC;AAEiC,MAD3D,AAAQ,OAAD,iCACO,yCAAQ,AAAG,GAAA,UAAC;AAC1B,YAAO,QAAO;IAChB;;AAIE,YAAO,AAAK;IACd;;AAIE,YAAe,eAAR;IACT;;AAIE,YAAkC,4DAAQ,AAAK;IACjD;;;QA9MO;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;QACA;;QACA;;QACA;QACA;;QACA;;QACA;QACA;;QACA;;QACA;;QACA;;QACA;QACA;;QACA;;QACA;QACA;;QACA;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;QACA;;QACA;;QACA;;QACA;QACA;QACA;QACA;QAEA;QACA;;QACA;QACA;QACA;;QACA;QACA;QACA;QACA;IAvDA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/RA,YAAO;IACT;;UAEmD;AACjD,YAAW;IACb;;AAGE,YAAsB,iDAAQ,AAAK;IACrC;;AAGE,YAAO,AAAK;IACd;;AAIE,YAAe,eAAR;IACT;;;;EACF;;;;;;;;;;;;;;AAK2B;IAAa;;;AAAb;;IAAa;;;AAGN;IAAO;;;AAAP;;IAAO;;;AAGX;IAAG;;;AAAH;;IAAG;;AAYR,oBAAU;AACW,MAA1C,AAAQ,OAAD,YAAa,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W;AACK,QAAhB,mBAAW;MACb;;;AAIE,YAAO;IACT;;UAU0B;AAAN;AAClB,uBAAK;AACH;;AAGmB,mBAAwB;AACD,QAA5C,AAAK,IAAD,iBAAa,QAAQ,cAAW,sBAAL,IAAI;AACS,QAA5C,MAAM,AAAS,8CAAa,WAAW,IAAI;MAC7C;;;AAKqB;;AACnB,uBAAK;AACH,gBAAO;;AAGY,mBAAwB;AACxB,kDAC4B,OAA5C,MAAM,AAAS,8CAAa,WAAW,IAAI,kBAAC,OAAG;AACpD,cAAe,yBAAQ,OAAO;MAChC;;;;QAhKU;;QACD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEI;QACJ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;wCAtFS;;IAEb,mBAAW;IACX,mBAAW;8CAIG;;uDAGe;;IAuX9B;IAzWM;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACoB,IAA3B,UAAiB;AACuC,IAAxD,yBAAwB,2DAAuB,SAAI;AAEuB,IADrE,qBACD,uCAAc,AAAuD,gEAAH;AACtB,IAA3C,AAAS,kDAAqB;EACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAvF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;IAQ8C;;;;;;IAM9C;;;;;;IAUA;;;;;;IAaA;;;;;;IAiB8C;;;;;;IAW9C;;;;;;IAQA;;;;;;IAQA;;;;;;IAY6C;;;;;;IAWN;;;;;;IAKzB;;;;;;IAGJ;;;;;;IAGiB;;;;;;IAGC;;;;;;IAGb;;;;;;IASqB;;;;;;IAKT;;;;;;;;QAGrB;QACD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEI;QACJ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IA9DC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAAyB","file":"../../../../../../../../packages/flutter_inappwebview/src/web_message/main.dart.lib.js"}');
  // Exports:
  return {
    src__web_message__main: main,
    src__pull_to_refresh__main: main$,
    src__web_storage__ios__main: main$0,
    src__web_storage__android__main: main$1,
    src__web_storage__ios__web_storage_manager: web_storage_manager,
    src__web_storage__android__web_storage_manager: web_storage_manager$,
    src__web_storage__web_storage_manager: web_storage_manager$0,
    src__web_storage__main: main$2,
    src__android__service_worker_controller: service_worker_controller,
    src__android__main: main$3,
    src__chrome_safari_browser__ios__main: main$4,
    src__chrome_safari_browser__android__main: main$5,
    src__chrome_safari_browser__ios__safari_options: safari_options,
    src__chrome_safari_browser__android__chrome_custom_tabs_options: chrome_custom_tabs_options,
    src__chrome_safari_browser__chrome_safari_browser_options: chrome_safari_browser_options,
    src__chrome_safari_browser__chrome_safari_browser: chrome_safari_browser,
    src__chrome_safari_browser__main: main$6,
    src__in_app_browser__ios__main: main$7,
    src__in_app_browser__android__main: main$8,
    src__in_app_browser__main: main$9,
    src__in_app_webview__ios__main: main$10,
    src__in_app_webview__android__main: main$11,
    src__cookie_manager: cookie_manager,
    src__http_auth_credentials_database: http_auth_credentials_database,
    src__in_app_webview__in_app_webview: in_app_webview,
    src__pull_to_refresh__pull_to_refresh_options: pull_to_refresh_options,
    src__content_blocker: content_blocker,
    src__in_app_webview__ios__in_app_webview_options: in_app_webview_options,
    src__in_app_browser__ios__in_app_browser_options: in_app_browser_options,
    src__in_app_browser__android__in_app_browser_options: in_app_browser_options$,
    src__in_app_browser__in_app_browser_options: in_app_browser_options$0,
    src__in_app_webview__android__in_app_webview_options: in_app_webview_options$,
    src__in_app_webview__in_app_webview_options: in_app_webview_options$0,
    src__in_app_webview__headless_in_app_webview: headless_in_app_webview,
    src__web_message__web_message_listener: web_message_listener,
    src__web_message__web_message_channel: web_message_channel,
    src__web_storage__web_storage: web_storage,
    src__in_app_webview__ios__in_app_webview_controller: in_app_webview_controller,
    src__in_app_webview__android__in_app_webview_controller: in_app_webview_controller$,
    src__in_app_webview__in_app_webview_controller: in_app_webview_controller$0,
    src__types: types,
    src__context_menu: context_menu,
    src__in_app_browser__in_app_browser: in_app_browser,
    src__pull_to_refresh__pull_to_refresh_controller: pull_to_refresh_controller,
    src__in_app_webview__webview: webview,
    src__in_app_webview__main: main$12,
    src__main: main$13,
    flutter_inappwebview: flutter_inappwebview
  };
}));

//# sourceMappingURL=main.dart.lib.js.map
