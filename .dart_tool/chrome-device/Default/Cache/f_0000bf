define(['dart_sdk', 'packages/collection/src/queue_list.dart', 'packages/async/src/result/release_transformer.dart', 'packages/async/src/subscription_stream.dart', 'packages/async/src/stream_splitter.dart', 'packages/async/src/stream_completer.dart', 'packages/async/src/async_memoizer.dart'], (function load__packages__async__src__stream_queue_dart(dart_sdk, packages__collection__src__queue_list$46dart, packages__async__src__result__release_transformer$46dart, packages__async__src__subscription_stream$46dart, packages__async__src__stream_splitter$46dart, packages__async__src__stream_completer$46dart, packages__async__src__async_memoizer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const queue_list = packages__collection__src__queue_list$46dart.src__queue_list;
  const result = packages__async__src__result__release_transformer$46dart.src__result__result;
  const value = packages__async__src__result__release_transformer$46dart.src__result__value;
  const subscription_stream = packages__async__src__subscription_stream$46dart.src__subscription_stream;
  const stream_splitter = packages__async__src__stream_splitter$46dart.src__stream_splitter;
  const stream_completer = packages__async__src__stream_completer$46dart.src__stream_completer;
  const async_memoizer = packages__async__src__async_memoizer$46dart.src__async_memoizer;
  var stream_queue = Object.create(dart.library);
  var cancelable_operation = Object.create(dart.library);
  var byte_collector = Object.create(dart.library);
  var async_cache = Object.create(dart.library);
  var async$ = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $add = dartx.add;
  var $setRange = dartx.setRange;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    ListQueueOf_EventRequest: () => (T$.ListQueueOf_EventRequest = dart.constFn(collection.ListQueue$(stream_queue._EventRequest)))(),
    boolTobool: () => (T$.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    ObjectToNever: () => (T$.ObjectToNever = dart.constFn(dart.fnType(dart.Never, [core.Object])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    LinkedHashSetOfStreamQueue: () => (T$.LinkedHashSetOfStreamQueue = dart.constFn(collection.LinkedHashSet$(stream_queue.StreamQueue)))(),
    CompleterOfint: () => (T$.CompleterOfint = dart.constFn(async.Completer$(core.int)))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    CompleterOfbool: () => (T$.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToFutureOr: () => (T$.VoidToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamSubscriptionOfListOfint: () => (T$.StreamSubscriptionOfListOfint = dart.constFn(async.StreamSubscription$(T$.ListOfint())))(),
    StreamSubscriptionOfListOfintAndFutureOfUint8ListToFutureOfUint8List: () => (T$.StreamSubscriptionOfListOfintAndFutureOfUint8ListToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [T$.StreamSubscriptionOfListOfint(), T$.FutureOfUint8List()])))(),
    CancelableOperationOfUint8List: () => (T$.CancelableOperationOfUint8List = dart.constFn(cancelable_operation.CancelableOperation$(typed_data.Uint8List)))(),
    StreamSubscriptionOfListOfintAndFutureOfUint8ListToCancelableOperationOfUint8List: () => (T$.StreamSubscriptionOfListOfintAndFutureOfUint8ListToCancelableOperationOfUint8List = dart.constFn(dart.fnType(T$.CancelableOperationOfUint8List(), [T$.StreamSubscriptionOfListOfint(), T$.FutureOfUint8List()])))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/async-2.5.0/lib/src/stream_queue.dart",
    "package:async/src/stream_queue.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/async-2.5.0/lib/src/cancelable_operation.dart",
    "package:async/src/cancelable_operation.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/async-2.5.0/lib/src/byte_collector.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/async-2.5.0/lib/src/async_cache.dart",
    "package:async/src/async_cache.dart"
  ];
  var _subscription = dart.privateName(stream_queue, "_subscription");
  var _isDone = dart.privateName(stream_queue, "_isDone");
  var _isClosed = dart.privateName(stream_queue, "_isClosed");
  var _eventsReceived = dart.privateName(stream_queue, "_eventsReceived");
  var _eventQueue = dart.privateName(stream_queue, "_eventQueue");
  var _requestQueue = dart.privateName(stream_queue, "_requestQueue");
  var _source$ = dart.privateName(stream_queue, "_source");
  var _ensureListening = dart.privateName(stream_queue, "_ensureListening");
  var _pause = dart.privateName(stream_queue, "_pause");
  var _addRequest = dart.privateName(stream_queue, "_addRequest");
  var _failClosed = dart.privateName(stream_queue, "_failClosed");
  var _cancel = dart.privateName(stream_queue, "_cancel");
  var _updateRequests = dart.privateName(stream_queue, "_updateRequests");
  var _extractStream = dart.privateName(stream_queue, "_extractStream");
  var _addResult = dart.privateName(stream_queue, "_addResult");
  var _close = dart.privateName(stream_queue, "_close");
  const _is_StreamQueue_default = Symbol('_is_StreamQueue_default');
  stream_queue.StreamQueue$ = dart.generic(T => {
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    var _HasNextRequestOfT = () => (_HasNextRequestOfT = dart.constFn(stream_queue._HasNextRequest$(T)))();
    var _LookAheadRequestOfT = () => (_LookAheadRequestOfT = dart.constFn(stream_queue._LookAheadRequest$(T)))();
    var _NextRequestOfT = () => (_NextRequestOfT = dart.constFn(stream_queue._NextRequest$(T)))();
    var _PeekRequestOfT = () => (_PeekRequestOfT = dart.constFn(stream_queue._PeekRequest$(T)))();
    var _RestRequestOfT = () => (_RestRequestOfT = dart.constFn(stream_queue._RestRequest$(T)))();
    var _SkipRequestOfT = () => (_SkipRequestOfT = dart.constFn(stream_queue._SkipRequest$(T)))();
    var _TakeRequestOfT = () => (_TakeRequestOfT = dart.constFn(stream_queue._TakeRequest$(T)))();
    var _TransactionRequestOfT = () => (_TransactionRequestOfT = dart.constFn(stream_queue._TransactionRequest$(T)))();
    var _CancelRequestOfT = () => (_CancelRequestOfT = dart.constFn(stream_queue._CancelRequest$(T)))();
    var _EmptyStreamOfT = () => (_EmptyStreamOfT = dart.constFn(async._EmptyStream$(T)))();
    var SubscriptionStreamOfT = () => (SubscriptionStreamOfT = dart.constFn(subscription_stream.SubscriptionStream$(T)))();
    var ValueResultOfT = () => (ValueResultOfT = dart.constFn(value.ValueResult$(T)))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class StreamQueue extends core.Object {
      get eventsDispatched() {
        return dart.notNull(this[_eventsReceived]) - dart.notNull(this[_eventQueue].length);
      }
      static new(source) {
        if (source == null) dart.nullFailed(I[0], 118, 33, "source");
        return new (stream_queue.StreamQueue$(T)).__(source);
      }
      get hasNext() {
        if (!dart.test(this[_isClosed])) {
          let hasNextRequest = new (_HasNextRequestOfT()).new();
          this[_addRequest](hasNextRequest);
          return hasNextRequest.future;
        }
        dart.throw(this[_failClosed]());
      }
      lookAhead(count) {
        if (count == null) dart.nullFailed(I[0], 154, 33, "count");
        if (dart.notNull(count) < 0) dart.throw(new core.RangeError.range(count, 0, null, "count"));
        if (!dart.test(this[_isClosed])) {
          let request = new (_LookAheadRequestOfT()).new(count);
          this[_addRequest](request);
          return request.future;
        }
        dart.throw(this[_failClosed]());
      }
      get next() {
        if (!dart.test(this[_isClosed])) {
          let nextRequest = new (_NextRequestOfT()).new();
          this[_addRequest](nextRequest);
          return nextRequest.future;
        }
        dart.throw(this[_failClosed]());
      }
      get peek() {
        if (!dart.test(this[_isClosed])) {
          let nextRequest = new (_PeekRequestOfT()).new();
          this[_addRequest](nextRequest);
          return nextRequest.future;
        }
        dart.throw(this[_failClosed]());
      }
      get rest() {
        if (dart.test(this[_isClosed])) {
          dart.throw(this[_failClosed]());
        }
        let request = new (_RestRequestOfT()).new(this);
        this[_isClosed] = true;
        this[_addRequest](request);
        return request.stream;
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[0], 234, 24, "count");
        if (dart.notNull(count) < 0) dart.throw(new core.RangeError.range(count, 0, null, "count"));
        if (!dart.test(this[_isClosed])) {
          let request = new (_SkipRequestOfT()).new(count);
          this[_addRequest](request);
          return request.future;
        }
        dart.throw(this[_failClosed]());
      }
      take(count) {
        if (count == null) dart.nullFailed(I[0], 259, 28, "count");
        if (dart.notNull(count) < 0) dart.throw(new core.RangeError.range(count, 0, null, "count"));
        if (!dart.test(this[_isClosed])) {
          let request = new (_TakeRequestOfT()).new(count);
          this[_addRequest](request);
          return request.future;
        }
        dart.throw(this[_failClosed]());
      }
      startTransaction() {
        if (dart.test(this[_isClosed])) dart.throw(this[_failClosed]());
        let request = new (_TransactionRequestOfT()).new(this);
        this[_addRequest](request);
        return request.transaction;
      }
      withTransaction(callback) {
        if (callback == null) dart.nullFailed(I[0], 333, 70, "callback");
        let transaction = this.startTransaction();
        let queue = transaction.newQueue();
        return callback(queue).then(core.bool, dart.fn(result => {
          if (result == null) dart.nullFailed(I[0], 339, 34, "result");
          if (dart.test(result)) {
            transaction.commit(queue);
          } else {
            transaction.reject();
          }
          return result;
        }, T$.boolTobool()), {onError: dart.fn(error => {
            if (error == null) dart.nullFailed(I[0], 346, 25, "error");
            transaction.commit(queue);
            dart.throw(error);
          }, T$.ObjectToNever())});
      }
      cancelable(S, callback) {
        if (callback == null) dart.nullFailed(I[0], 372, 42, "callback");
        let transaction = this.startTransaction();
        let completer = new (cancelable_operation.CancelableCompleter$(S)).new({onCancel: dart.fn(() => {
            transaction.reject();
          }, T$.VoidToNull())});
        let queue = transaction.newQueue();
        completer.complete(callback(queue).whenComplete(dart.fn(() => {
          if (!dart.test(completer.isCanceled)) transaction.commit(queue);
        }, T$.VoidToNull())));
        return completer.operation;
      }
      cancel(opts) {
        let immediate = opts && 'immediate' in opts ? opts.immediate : false;
        if (immediate == null) dart.nullFailed(I[0], 402, 24, "immediate");
        if (dart.test(this[_isClosed])) dart.throw(this[_failClosed]());
        this[_isClosed] = true;
        if (!dart.test(immediate)) {
          let request = new (_CancelRequestOfT()).new(this);
          this[_addRequest](request);
          return request.future;
        }
        if (dart.test(this[_isDone]) && dart.test(this[_eventQueue].isEmpty)) return async.Future.value();
        return this[_cancel]();
      }
      [_updateRequests]() {
        while (dart.test(this[_requestQueue][$isNotEmpty])) {
          if (dart.test(this[_requestQueue][$first].update(this[_eventQueue], this[_isDone]))) {
            this[_requestQueue].removeFirst();
          } else {
            return;
          }
        }
        if (!dart.test(this[_isDone])) {
          this[_pause]();
        }
      }
      [_extractStream]() {
        if (!dart.test(this[_isClosed])) dart.assertFailed(null, I[0], 451, 12, "_isClosed");
        if (dart.test(this[_isDone])) {
          return new (_EmptyStreamOfT()).new();
        }
        this[_isDone] = true;
        let subscription = this[_subscription];
        if (subscription == null) {
          return this[_source$];
        }
        this[_subscription] = null;
        let wasPaused = subscription.isPaused;
        let result = new (SubscriptionStreamOfT()).new(subscription);
        if (dart.test(wasPaused)) subscription.resume();
        return result;
      }
      [_pause]() {
        dart.nullCheck(this[_subscription]).pause();
      }
      [_ensureListening]() {
        if (dart.test(this[_isDone])) return;
        if (this[_subscription] == null) {
          this[_subscription] = this[_source$].listen(dart.fn(data => {
            this[_addResult](new (ValueResultOfT()).new(data));
          }, TTovoid()), {onError: dart.fn((error, stackTrace) => {
              if (error == null) dart.nullFailed(I[0], 490, 27, "error");
              if (stackTrace == null) dart.nullFailed(I[0], 490, 45, "stackTrace");
              this[_addResult](ResultOfT().error(error, stackTrace));
            }, T$.ObjectAndStackTraceToNull()), onDone: dart.fn(() => {
              this[_subscription] = null;
              this[_close]();
            }, T$.VoidTovoid())});
        } else {
          dart.nullCheck(this[_subscription]).resume();
        }
      }
      [_cancel]() {
        if (dart.test(this[_isDone])) return null;
        this[_subscription] == null ? this[_subscription] = this[_source$].listen(null) : null;
        let future = dart.nullCheck(this[_subscription]).cancel();
        this[_close]();
        return future;
      }
      [_addResult](result) {
        if (result == null) dart.nullFailed(I[0], 516, 29, "result");
        this[_eventsReceived] = dart.notNull(this[_eventsReceived]) + 1;
        this[_eventQueue].add(result);
        this[_updateRequests]();
      }
      [_close]() {
        this[_isDone] = true;
        this[_updateRequests]();
      }
      [_failClosed]() {
        return new core.StateError.new("Already cancelled");
      }
      [_addRequest](request) {
        if (request == null) dart.nullFailed(I[0], 544, 37, "request");
        if (dart.test(this[_requestQueue][$isEmpty])) {
          if (dart.test(request.update(this[_eventQueue], this[_isDone]))) return;
          this[_ensureListening]();
        }
        this[_requestQueue].add(request);
      }
    }
    (StreamQueue.__ = function(_source) {
      if (_source == null) dart.nullFailed(I[0], 121, 22, "_source");
      this[_subscription] = null;
      this[_isDone] = false;
      this[_isClosed] = false;
      this[_eventsReceived] = 0;
      this[_eventQueue] = new (QueueListOfResultOfT()).new();
      this[_requestQueue] = new (T$.ListQueueOf_EventRequest()).new();
      this[_source$] = _source;
      if (dart.test(this[_source$].isBroadcast)) {
        this[_ensureListening]();
        this[_pause]();
      }
    }).prototype = StreamQueue.prototype;
    dart.addTypeTests(StreamQueue);
    StreamQueue.prototype[_is_StreamQueue_default] = true;
    dart.addTypeCaches(StreamQueue);
    dart.setMethodSignature(StreamQueue, () => ({
      __proto__: dart.getMethods(StreamQueue.__proto__),
      lookAhead: dart.fnType(async.Future$(core.List$(T)), [core.int]),
      skip: dart.fnType(async.Future$(core.int), [core.int]),
      take: dart.fnType(async.Future$(core.List$(T)), [core.int]),
      startTransaction: dart.fnType(stream_queue.StreamQueueTransaction$(T), []),
      withTransaction: dart.fnType(async.Future$(core.bool), [dart.fnType(async.Future$(core.bool), [stream_queue.StreamQueue$(T)])]),
      cancelable: dart.gFnType(S => [cancelable_operation.CancelableOperation$(S), [dart.fnType(async.Future$(S), [stream_queue.StreamQueue$(T)])]], S => [dart.nullable(core.Object)]),
      cancel: dart.fnType(dart.nullable(async.Future), [], {immediate: core.bool}, {}),
      [_updateRequests]: dart.fnType(dart.void, []),
      [_extractStream]: dart.fnType(async.Stream$(T), []),
      [_pause]: dart.fnType(dart.void, []),
      [_ensureListening]: dart.fnType(dart.void, []),
      [_cancel]: dart.fnType(dart.nullable(async.Future), []),
      [_addResult]: dart.fnType(dart.void, [result.Result$(T)]),
      [_close]: dart.fnType(dart.void, []),
      [_failClosed]: dart.fnType(core.Error, []),
      [_addRequest]: dart.fnType(dart.void, [stream_queue._EventRequest$(T)])
    }));
    dart.setGetterSignature(StreamQueue, () => ({
      __proto__: dart.getGetters(StreamQueue.__proto__),
      eventsDispatched: core.int,
      hasNext: async.Future$(core.bool),
      next: async.Future$(T),
      peek: async.Future$(T),
      rest: async.Stream$(T)
    }));
    dart.setLibraryUri(StreamQueue, I[1]);
    dart.setFieldSignature(StreamQueue, () => ({
      __proto__: dart.getFields(StreamQueue.__proto__),
      [_source$]: dart.finalFieldType(async.Stream$(T)),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_isDone]: dart.fieldType(core.bool),
      [_isClosed]: dart.fieldType(core.bool),
      [_eventsReceived]: dart.fieldType(core.int),
      [_eventQueue]: dart.finalFieldType(queue_list.QueueList$(result.Result$(T))),
      [_requestQueue]: dart.finalFieldType(collection.Queue$(stream_queue._EventRequest))
    }));
    return StreamQueue;
  });
  stream_queue.StreamQueue = stream_queue.StreamQueue$();
  dart.addTypeTests(stream_queue.StreamQueue, _is_StreamQueue_default);
  var _queues = dart.privateName(stream_queue, "_queues");
  var _committed = dart.privateName(stream_queue, "_committed");
  var _rejected = dart.privateName(stream_queue, "_rejected");
  var _parent$ = dart.privateName(stream_queue, "_parent");
  var _splitter = dart.privateName(stream_queue, "_splitter");
  var _assertActive = dart.privateName(stream_queue, "_assertActive");
  var _done = dart.privateName(stream_queue, "_done");
  const _is_StreamQueueTransaction_default = Symbol('_is_StreamQueueTransaction_default');
  stream_queue.StreamQueueTransaction$ = dart.generic(T => {
    var StreamSplitterOfT = () => (StreamSplitterOfT = dart.constFn(stream_splitter.StreamSplitter$(T)))();
    var StreamQueueOfT = () => (StreamQueueOfT = dart.constFn(stream_queue.StreamQueue$(T)))();
    class StreamQueueTransaction extends core.Object {
      newQueue() {
        let queue = StreamQueueOfT().new(this[_splitter].split());
        this[_queues].add(queue);
        return queue;
      }
      commit(queue) {
        StreamQueueOfT().as(queue);
        if (queue == null) dart.nullFailed(I[0], 597, 30, "queue");
        this[_assertActive]();
        if (!dart.test(this[_queues].contains(queue))) {
          dart.throw(new core.ArgumentError.new("Queue doesn't belong to this transaction."));
        } else if (dart.test(queue[_requestQueue][$isNotEmpty])) {
          dart.throw(new core.StateError.new("A queue with pending requests can't be committed."));
        }
        this[_committed] = true;
        for (let j = 0; j < dart.notNull(queue.eventsDispatched); j = j + 1) {
          this[_parent$][_eventQueue].removeFirst();
        }
        this[_done]();
      }
      reject() {
        this[_assertActive]();
        this[_rejected] = true;
        this[_done]();
      }
      [_done]() {
        this[_splitter].close();
        for (let queue of this[_queues]) {
          queue[_cancel]();
        }
        let currentRequest = this[_parent$][_requestQueue][$first];
        if (stream_queue._TransactionRequest.is(currentRequest) && dart.equals(currentRequest.transaction, this)) {
          this[_parent$][_requestQueue].removeFirst();
          this[_parent$][_updateRequests]();
        }
      }
      [_assertActive]() {
        if (dart.test(this[_committed])) {
          dart.throw(new core.StateError.new("This transaction has already been accepted."));
        } else if (dart.test(this[_rejected])) {
          dart.throw(new core.StateError.new("This transaction has already been rejected."));
        }
      }
    }
    (StreamQueueTransaction.__ = function(_parent, source) {
      if (_parent == null) dart.nullFailed(I[0], 574, 33, "_parent");
      if (source == null) dart.nullFailed(I[0], 574, 52, "source");
      this[_queues] = T$.LinkedHashSetOfStreamQueue().new();
      this[_committed] = false;
      this[_rejected] = false;
      this[_parent$] = _parent;
      this[_splitter] = new (StreamSplitterOfT()).new(source);
      ;
    }).prototype = StreamQueueTransaction.prototype;
    dart.addTypeTests(StreamQueueTransaction);
    StreamQueueTransaction.prototype[_is_StreamQueueTransaction_default] = true;
    dart.addTypeCaches(StreamQueueTransaction);
    dart.setMethodSignature(StreamQueueTransaction, () => ({
      __proto__: dart.getMethods(StreamQueueTransaction.__proto__),
      newQueue: dart.fnType(stream_queue.StreamQueue$(T), []),
      commit: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      reject: dart.fnType(dart.void, []),
      [_done]: dart.fnType(dart.void, []),
      [_assertActive]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(StreamQueueTransaction, I[1]);
    dart.setFieldSignature(StreamQueueTransaction, () => ({
      __proto__: dart.getFields(StreamQueueTransaction.__proto__),
      [_parent$]: dart.finalFieldType(stream_queue.StreamQueue$(T)),
      [_splitter]: dart.finalFieldType(stream_splitter.StreamSplitter$(T)),
      [_queues]: dart.finalFieldType(core.Set$(stream_queue.StreamQueue)),
      [_committed]: dart.fieldType(core.bool),
      [_rejected]: dart.fieldType(core.bool)
    }));
    return StreamQueueTransaction;
  });
  stream_queue.StreamQueueTransaction = stream_queue.StreamQueueTransaction$();
  dart.addTypeTests(stream_queue.StreamQueueTransaction, _is_StreamQueueTransaction_default);
  const _is__EventRequest_default = Symbol('_is__EventRequest_default');
  stream_queue._EventRequest$ = dart.generic(T => {
    class _EventRequest extends core.Object {}
    (_EventRequest.new = function() {
      ;
    }).prototype = _EventRequest.prototype;
    dart.addTypeTests(_EventRequest);
    _EventRequest.prototype[_is__EventRequest_default] = true;
    dart.addTypeCaches(_EventRequest);
    dart.setLibraryUri(_EventRequest, I[1]);
    return _EventRequest;
  });
  stream_queue._EventRequest = stream_queue._EventRequest$();
  dart.addTypeTests(stream_queue._EventRequest, _is__EventRequest_default);
  var _completer = dart.privateName(stream_queue, "_completer");
  const _is__NextRequest_default = Symbol('_is__NextRequest_default');
  stream_queue._NextRequest$ = dart.generic(T => {
    var CompleterOfT = () => (CompleterOfT = dart.constFn(async.Completer$(T)))();
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _NextRequest extends core.Object {
      get future() {
        return this[_completer].future;
      }
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 705, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 705, 49, "isDone");
        if (dart.test(events.isNotEmpty)) {
          events.removeFirst().complete(this[_completer]);
          return true;
        }
        if (dart.test(isDone)) {
          this[_completer].completeError(new core.StateError.new("No elements"), core.StackTrace.current);
          return true;
        }
        return false;
      }
    }
    (_NextRequest.new = function() {
      this[_completer] = CompleterOfT().new();
      ;
    }).prototype = _NextRequest.prototype;
    dart.addTypeTests(_NextRequest);
    _NextRequest.prototype[_is__NextRequest_default] = true;
    dart.addTypeCaches(_NextRequest);
    _NextRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_NextRequest, () => ({
      __proto__: dart.getMethods(_NextRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_NextRequest, () => ({
      __proto__: dart.getGetters(_NextRequest.__proto__),
      future: async.Future$(T)
    }));
    dart.setLibraryUri(_NextRequest, I[1]);
    dart.setFieldSignature(_NextRequest, () => ({
      __proto__: dart.getFields(_NextRequest.__proto__),
      [_completer]: dart.finalFieldType(async.Completer$(T))
    }));
    return _NextRequest;
  });
  stream_queue._NextRequest = stream_queue._NextRequest$();
  dart.addTypeTests(stream_queue._NextRequest, _is__NextRequest_default);
  const _is__PeekRequest_default = Symbol('_is__PeekRequest_default');
  stream_queue._PeekRequest$ = dart.generic(T => {
    var CompleterOfT = () => (CompleterOfT = dart.constFn(async.Completer$(T)))();
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _PeekRequest extends core.Object {
      get future() {
        return this[_completer].future;
      }
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 731, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 731, 49, "isDone");
        if (dart.test(events.isNotEmpty)) {
          events.first.complete(this[_completer]);
          return true;
        }
        if (dart.test(isDone)) {
          this[_completer].completeError(new core.StateError.new("No elements"), core.StackTrace.current);
          return true;
        }
        return false;
      }
    }
    (_PeekRequest.new = function() {
      this[_completer] = CompleterOfT().new();
      ;
    }).prototype = _PeekRequest.prototype;
    dart.addTypeTests(_PeekRequest);
    _PeekRequest.prototype[_is__PeekRequest_default] = true;
    dart.addTypeCaches(_PeekRequest);
    _PeekRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_PeekRequest, () => ({
      __proto__: dart.getMethods(_PeekRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_PeekRequest, () => ({
      __proto__: dart.getGetters(_PeekRequest.__proto__),
      future: async.Future$(T)
    }));
    dart.setLibraryUri(_PeekRequest, I[1]);
    dart.setFieldSignature(_PeekRequest, () => ({
      __proto__: dart.getFields(_PeekRequest.__proto__),
      [_completer]: dart.finalFieldType(async.Completer$(T))
    }));
    return _PeekRequest;
  });
  stream_queue._PeekRequest = stream_queue._PeekRequest$();
  dart.addTypeTests(stream_queue._PeekRequest, _is__PeekRequest_default);
  var _eventsToSkip$ = dart.privateName(stream_queue, "_eventsToSkip");
  const _is__SkipRequest_default = Symbol('_is__SkipRequest_default');
  stream_queue._SkipRequest$ = dart.generic(T => {
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _SkipRequest extends core.Object {
      get future() {
        return this[_completer].future;
      }
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 763, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 763, 49, "isDone");
        while (dart.notNull(this[_eventsToSkip$]) > 0) {
          if (dart.test(events.isEmpty)) {
            if (dart.test(isDone)) break;
            return false;
          }
          this[_eventsToSkip$] = dart.notNull(this[_eventsToSkip$]) - 1;
          let event = events.removeFirst();
          if (dart.test(event.isError)) {
            this[_completer].completeError(dart.nullCheck(event.asError).error, dart.nullCheck(event.asError).stackTrace);
            return true;
          }
        }
        this[_completer].complete(this[_eventsToSkip$]);
        return true;
      }
    }
    (_SkipRequest.new = function(_eventsToSkip) {
      if (_eventsToSkip == null) dart.nullFailed(I[0], 757, 21, "_eventsToSkip");
      this[_completer] = T$.CompleterOfint().new();
      this[_eventsToSkip$] = _eventsToSkip;
      ;
    }).prototype = _SkipRequest.prototype;
    dart.addTypeTests(_SkipRequest);
    _SkipRequest.prototype[_is__SkipRequest_default] = true;
    dart.addTypeCaches(_SkipRequest);
    _SkipRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_SkipRequest, () => ({
      __proto__: dart.getMethods(_SkipRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_SkipRequest, () => ({
      __proto__: dart.getGetters(_SkipRequest.__proto__),
      future: async.Future$(core.int)
    }));
    dart.setLibraryUri(_SkipRequest, I[1]);
    dart.setFieldSignature(_SkipRequest, () => ({
      __proto__: dart.getFields(_SkipRequest.__proto__),
      [_completer]: dart.finalFieldType(async.Completer$(core.int)),
      [_eventsToSkip$]: dart.fieldType(core.int)
    }));
    return _SkipRequest;
  });
  stream_queue._SkipRequest = stream_queue._SkipRequest$();
  dart.addTypeTests(stream_queue._SkipRequest, _is__SkipRequest_default);
  var _list = dart.privateName(stream_queue, "_list");
  var _eventsToTake$ = dart.privateName(stream_queue, "_eventsToTake");
  const _is__ListRequest_default = Symbol('_is__ListRequest_default');
  stream_queue._ListRequest$ = dart.generic(T => {
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var CompleterOfListOfT = () => (CompleterOfListOfT = dart.constFn(async.Completer$(ListOfT())))();
    var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    class _ListRequest extends core.Object {
      get future() {
        return this[_completer].future;
      }
    }
    (_ListRequest.new = function(_eventsToTake) {
      if (_eventsToTake == null) dart.nullFailed(I[0], 797, 21, "_eventsToTake");
      this[_completer] = CompleterOfListOfT().new();
      this[_list] = JSArrayOfT().of([]);
      this[_eventsToTake$] = _eventsToTake;
      ;
    }).prototype = _ListRequest.prototype;
    dart.addTypeTests(_ListRequest);
    _ListRequest.prototype[_is__ListRequest_default] = true;
    dart.addTypeCaches(_ListRequest);
    _ListRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setGetterSignature(_ListRequest, () => ({
      __proto__: dart.getGetters(_ListRequest.__proto__),
      future: async.Future$(core.List$(T))
    }));
    dart.setLibraryUri(_ListRequest, I[1]);
    dart.setFieldSignature(_ListRequest, () => ({
      __proto__: dart.getFields(_ListRequest.__proto__),
      [_completer]: dart.finalFieldType(async.Completer$(core.List$(T))),
      [_list]: dart.finalFieldType(core.List$(T)),
      [_eventsToTake$]: dart.finalFieldType(core.int)
    }));
    return _ListRequest;
  });
  stream_queue._ListRequest = stream_queue._ListRequest$();
  dart.addTypeTests(stream_queue._ListRequest, _is__ListRequest_default);
  const _is__TakeRequest_default = Symbol('_is__TakeRequest_default');
  stream_queue._TakeRequest$ = dart.generic(T => {
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _TakeRequest extends stream_queue._ListRequest$(T) {
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 808, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 808, 49, "isDone");
        while (dart.notNull(this[_list][$length]) < dart.notNull(this[_eventsToTake$])) {
          if (dart.test(events.isEmpty)) {
            if (dart.test(isDone)) break;
            return false;
          }
          let event = events.removeFirst();
          if (dart.test(event.isError)) {
            dart.nullCheck(event.asError).complete(this[_completer]);
            return true;
          }
          this[_list][$add](dart.nullCheck(event.asValue).value);
        }
        this[_completer].complete(this[_list]);
        return true;
      }
    }
    (_TakeRequest.new = function(eventsToTake) {
      if (eventsToTake == null) dart.nullFailed(I[0], 805, 20, "eventsToTake");
      _TakeRequest.__proto__.new.call(this, eventsToTake);
      ;
    }).prototype = _TakeRequest.prototype;
    dart.addTypeTests(_TakeRequest);
    _TakeRequest.prototype[_is__TakeRequest_default] = true;
    dart.addTypeCaches(_TakeRequest);
    dart.setMethodSignature(_TakeRequest, () => ({
      __proto__: dart.getMethods(_TakeRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setLibraryUri(_TakeRequest, I[1]);
    return _TakeRequest;
  });
  stream_queue._TakeRequest = stream_queue._TakeRequest$();
  dart.addTypeTests(stream_queue._TakeRequest, _is__TakeRequest_default);
  const _is__LookAheadRequest_default = Symbol('_is__LookAheadRequest_default');
  stream_queue._LookAheadRequest$ = dart.generic(T => {
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _LookAheadRequest extends stream_queue._ListRequest$(T) {
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 832, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 832, 49, "isDone");
        while (dart.notNull(this[_list][$length]) < dart.notNull(this[_eventsToTake$])) {
          if (events.length == this[_list][$length]) {
            if (dart.test(isDone)) break;
            return false;
          }
          let event = events.elementAt(this[_list][$length]);
          if (dart.test(event.isError)) {
            dart.nullCheck(event.asError).complete(this[_completer]);
            return true;
          }
          this[_list][$add](dart.nullCheck(event.asValue).value);
        }
        this[_completer].complete(this[_list]);
        return true;
      }
    }
    (_LookAheadRequest.new = function(eventsToTake) {
      if (eventsToTake == null) dart.nullFailed(I[0], 829, 25, "eventsToTake");
      _LookAheadRequest.__proto__.new.call(this, eventsToTake);
      ;
    }).prototype = _LookAheadRequest.prototype;
    dart.addTypeTests(_LookAheadRequest);
    _LookAheadRequest.prototype[_is__LookAheadRequest_default] = true;
    dart.addTypeCaches(_LookAheadRequest);
    dart.setMethodSignature(_LookAheadRequest, () => ({
      __proto__: dart.getMethods(_LookAheadRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setLibraryUri(_LookAheadRequest, I[1]);
    return _LookAheadRequest;
  });
  stream_queue._LookAheadRequest = stream_queue._LookAheadRequest$();
  dart.addTypeTests(stream_queue._LookAheadRequest, _is__LookAheadRequest_default);
  var _streamQueue$ = dart.privateName(stream_queue, "_streamQueue");
  const _is__CancelRequest_default = Symbol('_is__CancelRequest_default');
  stream_queue._CancelRequest$ = dart.generic(T => {
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _CancelRequest extends core.Object {
      get future() {
        return this[_completer].future;
      }
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 869, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 869, 49, "isDone");
        if (dart.test(this[_streamQueue$][_isDone])) {
          this[_completer].complete();
        } else {
          this[_streamQueue$][_ensureListening]();
          this[_completer].complete(this[_streamQueue$][_extractStream]().listen(null).cancel());
        }
        return true;
      }
    }
    (_CancelRequest.new = function(_streamQueue) {
      if (_streamQueue == null) dart.nullFailed(I[0], 863, 23, "_streamQueue");
      this[_completer] = T$.CompleterOfvoid().new();
      this[_streamQueue$] = _streamQueue;
      ;
    }).prototype = _CancelRequest.prototype;
    dart.addTypeTests(_CancelRequest);
    _CancelRequest.prototype[_is__CancelRequest_default] = true;
    dart.addTypeCaches(_CancelRequest);
    _CancelRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_CancelRequest, () => ({
      __proto__: dart.getMethods(_CancelRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_CancelRequest, () => ({
      __proto__: dart.getGetters(_CancelRequest.__proto__),
      future: async.Future
    }));
    dart.setLibraryUri(_CancelRequest, I[1]);
    dart.setFieldSignature(_CancelRequest, () => ({
      __proto__: dart.getFields(_CancelRequest.__proto__),
      [_completer]: dart.finalFieldType(async.Completer$(dart.void)),
      [_streamQueue$]: dart.finalFieldType(stream_queue.StreamQueue)
    }));
    return _CancelRequest;
  });
  stream_queue._CancelRequest = stream_queue._CancelRequest$();
  dart.addTypeTests(stream_queue._CancelRequest, _is__CancelRequest_default);
  const _is__RestRequest_default = Symbol('_is__RestRequest_default');
  stream_queue._RestRequest$ = dart.generic(T => {
    var StreamCompleterOfT = () => (StreamCompleterOfT = dart.constFn(stream_completer.StreamCompleter$(T)))();
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    class _RestRequest extends core.Object {
      get stream() {
        return this[_completer].stream;
      }
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 901, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 901, 49, "isDone");
        if (dart.test(events.isEmpty)) {
          if (dart.test(this[_streamQueue$][_isDone])) {
            this[_completer].setEmpty();
          } else {
            this[_completer].setSourceStream(this[_streamQueue$][_extractStream]());
          }
        } else {
          let controller = StreamControllerOfT().new();
          for (let event of events) {
            event.addTo(controller);
          }
          controller.addStream(this[_streamQueue$][_extractStream](), {cancelOnError: false}).whenComplete(dart.bind(controller, 'close'));
          this[_completer].setSourceStream(controller.stream);
        }
        return true;
      }
    }
    (_RestRequest.new = function(_streamQueue) {
      if (_streamQueue == null) dart.nullFailed(I[0], 895, 21, "_streamQueue");
      this[_completer] = new (StreamCompleterOfT()).new();
      this[_streamQueue$] = _streamQueue;
      ;
    }).prototype = _RestRequest.prototype;
    dart.addTypeTests(_RestRequest);
    _RestRequest.prototype[_is__RestRequest_default] = true;
    dart.addTypeCaches(_RestRequest);
    _RestRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_RestRequest, () => ({
      __proto__: dart.getMethods(_RestRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_RestRequest, () => ({
      __proto__: dart.getGetters(_RestRequest.__proto__),
      stream: async.Stream$(T)
    }));
    dart.setLibraryUri(_RestRequest, I[1]);
    dart.setFieldSignature(_RestRequest, () => ({
      __proto__: dart.getFields(_RestRequest.__proto__),
      [_completer]: dart.finalFieldType(stream_completer.StreamCompleter$(T)),
      [_streamQueue$]: dart.finalFieldType(stream_queue.StreamQueue$(T))
    }));
    return _RestRequest;
  });
  stream_queue._RestRequest = stream_queue._RestRequest$();
  dart.addTypeTests(stream_queue._RestRequest, _is__RestRequest_default);
  const _is__HasNextRequest_default = Symbol('_is__HasNextRequest_default');
  stream_queue._HasNextRequest$ = dart.generic(T => {
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _HasNextRequest extends core.Object {
      get future() {
        return this[_completer].future;
      }
      update(events, isDone) {
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 936, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 936, 49, "isDone");
        if (dart.test(events.isNotEmpty)) {
          this[_completer].complete(true);
          return true;
        }
        if (dart.test(isDone)) {
          this[_completer].complete(false);
          return true;
        }
        return false;
      }
    }
    (_HasNextRequest.new = function() {
      this[_completer] = T$.CompleterOfbool().new();
      ;
    }).prototype = _HasNextRequest.prototype;
    dart.addTypeTests(_HasNextRequest);
    _HasNextRequest.prototype[_is__HasNextRequest_default] = true;
    dart.addTypeCaches(_HasNextRequest);
    _HasNextRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_HasNextRequest, () => ({
      __proto__: dart.getMethods(_HasNextRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_HasNextRequest, () => ({
      __proto__: dart.getGetters(_HasNextRequest.__proto__),
      future: async.Future$(core.bool)
    }));
    dart.setLibraryUri(_HasNextRequest, I[1]);
    dart.setFieldSignature(_HasNextRequest, () => ({
      __proto__: dart.getFields(_HasNextRequest.__proto__),
      [_completer]: dart.finalFieldType(async.Completer$(core.bool))
    }));
    return _HasNextRequest;
  });
  stream_queue._HasNextRequest = stream_queue._HasNextRequest$();
  dart.addTypeTests(stream_queue._HasNextRequest, _is__HasNextRequest_default);
  var ___TransactionRequest_transaction = dart.privateName(stream_queue, "_#_TransactionRequest#transaction");
  var ___TransactionRequest_transaction_isSet = dart.privateName(stream_queue, "_#_TransactionRequest#transaction#isSet");
  var _controller = dart.privateName(stream_queue, "_controller");
  var _eventsSent = dart.privateName(stream_queue, "_eventsSent");
  const _is__TransactionRequest_default = Symbol('_is__TransactionRequest_default');
  stream_queue._TransactionRequest$ = dart.generic(T => {
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var StreamQueueTransactionOfT = () => (StreamQueueTransactionOfT = dart.constFn(stream_queue.StreamQueueTransaction$(T)))();
    var ResultOfT = () => (ResultOfT = dart.constFn(result.Result$(T)))();
    var QueueListOfResultOfT = () => (QueueListOfResultOfT = dart.constFn(queue_list.QueueList$(ResultOfT())))();
    class _TransactionRequest extends core.Object {
      get transaction() {
        let t0;
        return dart.test(this[___TransactionRequest_transaction_isSet]) ? (t0 = this[___TransactionRequest_transaction], t0) : dart.throw(new _internal.LateError.fieldNI("transaction"));
      }
      set transaction(t0) {
        if (t0 == null) dart.nullFailed(I[0], 957, 40, "null");
        if (dart.test(this[___TransactionRequest_transaction_isSet]))
          dart.throw(new _internal.LateError.fieldAI("transaction"));
        else {
          this[___TransactionRequest_transaction_isSet] = true;
          this[___TransactionRequest_transaction] = t0;
        }
      }
      update(events, isDone) {
        let t1;
        QueueListOfResultOfT().as(events);
        if (events == null) dart.nullFailed(I[0], 970, 36, "events");
        if (isDone == null) dart.nullFailed(I[0], 970, 49, "isDone");
        while (dart.notNull(this[_eventsSent]) < dart.notNull(events.length)) {
          events._get((t1 = this[_eventsSent], this[_eventsSent] = dart.notNull(t1) + 1, t1)).addTo(this[_controller]);
        }
        if (dart.test(isDone) && !dart.test(this[_controller].isClosed)) this[_controller].close();
        return dart.test(this.transaction[_committed]) || dart.test(this.transaction[_rejected]);
      }
    }
    (_TransactionRequest.new = function(parent) {
      if (parent == null) dart.nullFailed(I[0], 965, 38, "parent");
      this[___TransactionRequest_transaction] = null;
      this[___TransactionRequest_transaction_isSet] = false;
      this[_controller] = StreamControllerOfT().new({sync: true});
      this[_eventsSent] = 0;
      this.transaction = new (StreamQueueTransactionOfT()).__(parent, this[_controller].stream);
    }).prototype = _TransactionRequest.prototype;
    dart.addTypeTests(_TransactionRequest);
    _TransactionRequest.prototype[_is__TransactionRequest_default] = true;
    dart.addTypeCaches(_TransactionRequest);
    _TransactionRequest[dart.implements] = () => [stream_queue._EventRequest$(T)];
    dart.setMethodSignature(_TransactionRequest, () => ({
      __proto__: dart.getMethods(_TransactionRequest.__proto__),
      update: dart.fnType(core.bool, [dart.nullable(core.Object), core.bool])
    }));
    dart.setGetterSignature(_TransactionRequest, () => ({
      __proto__: dart.getGetters(_TransactionRequest.__proto__),
      transaction: stream_queue.StreamQueueTransaction$(T)
    }));
    dart.setSetterSignature(_TransactionRequest, () => ({
      __proto__: dart.getSetters(_TransactionRequest.__proto__),
      transaction: stream_queue.StreamQueueTransaction$(T)
    }));
    dart.setLibraryUri(_TransactionRequest, I[1]);
    dart.setFieldSignature(_TransactionRequest, () => ({
      __proto__: dart.getFields(_TransactionRequest.__proto__),
      [___TransactionRequest_transaction]: dart.fieldType(dart.nullable(stream_queue.StreamQueueTransaction$(T))),
      [___TransactionRequest_transaction_isSet]: dart.fieldType(core.bool),
      [_controller]: dart.finalFieldType(async.StreamController$(T)),
      [_eventsSent]: dart.fieldType(core.int)
    }));
    return _TransactionRequest;
  });
  stream_queue._TransactionRequest = stream_queue._TransactionRequest$();
  dart.addTypeTests(stream_queue._TransactionRequest, _is__TransactionRequest_default);
  var _completer$ = dart.privateName(cancelable_operation, "_completer");
  var _inner = dart.privateName(cancelable_operation, "_inner");
  var _cancel$ = dart.privateName(cancelable_operation, "_cancel");
  var _cancelMemo = dart.privateName(cancelable_operation, "_cancelMemo");
  const _is_CancelableOperation_default = Symbol('_is_CancelableOperation_default');
  cancelable_operation.CancelableOperation$ = dart.generic(T => {
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var TToNull = () => (TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var CompleterOfTN = () => (CompleterOfTN = dart.constFn(async.Completer$(TN())))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var TNToNull = () => (TNToNull = dart.constFn(dart.fnType(core.Null, [TN()])))();
    class CancelableOperation extends core.Object {
      static fromFuture(inner, opts) {
        if (inner == null) dart.nullFailed(I[2], 37, 52, "inner");
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let completer = new (cancelable_operation.CancelableCompleter$(T)).new({onCancel: onCancel});
        completer.complete(inner);
        return completer.operation;
      }
      get value() {
        return this[_completer$][_inner].future;
      }
      asStream() {
        let controller = StreamControllerOfT().new({sync: true, onCancel: dart.bind(this[_completer$], _cancel$)});
        this.value.then(core.Null, dart.fn(value => {
          controller.add(value);
          controller.close();
        }, TToNull()), {onError: dart.fn((error, stackTrace) => {
            if (error == null) dart.nullFailed(I[2], 58, 25, "error");
            if (stackTrace == null) dart.nullFailed(I[2], 58, 43, "stackTrace");
            controller.addError(error, stackTrace);
            controller.close();
          }, T$.ObjectAndStackTraceToNull())});
        return controller.stream;
      }
      valueOrCancellation(cancellationValue = null) {
        TN().as(cancellationValue);
        let completer = CompleterOfTN().sync();
        this.value.then(dart.void, dart.fn(result => completer.complete(result), TTovoid()), {onError: dart.bind(completer, 'completeError')});
        this[_completer$][_cancelMemo].future.then(core.Null, dart.fn(_ => {
          completer.complete(cancellationValue);
        }, T$.dynamicToNull()), {onError: dart.bind(completer, 'completeError')});
        return completer.future;
      }
      then(R, onValue, opts) {
        if (onValue == null) dart.nullFailed(I[2], 95, 58, "onValue");
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let propagateCancel = opts && 'propagateCancel' in opts ? opts.propagateCancel : false;
        if (propagateCancel == null) dart.nullFailed(I[2], 98, 12, "propagateCancel");
        let completer = new (cancelable_operation.CancelableCompleter$(R)).new({onCancel: dart.test(propagateCancel) ? dart.bind(this, 'cancel') : null});
        this.valueOrCancellation().then(core.Null, dart.fn(result => {
          if (!dart.test(completer.isCanceled)) {
            if (dart.test(this.isCompleted)) {
              if (!T.is(result)) dart.assertFailed(null, I[2], 105, 18, "result is T");
              completer.complete(async.Future$(R).sync(dart.fn(() => onValue(T.as(result)), dart.fnType(async.FutureOr$(R), []))));
            } else if (onCancel != null) {
              completer.complete(async.Future$(R).sync(onCancel));
            } else {
              completer[_cancel$]();
            }
          }
        }, TNToNull()), {onError: dart.fn((error, stackTrace) => {
            if (error == null) dart.nullFailed(I[2], 113, 25, "error");
            if (stackTrace == null) dart.nullFailed(I[2], 113, 43, "stackTrace");
            if (!dart.test(completer.isCanceled)) {
              if (onError != null) {
                completer.complete(async.Future$(R).sync(dart.fn(() => onError(error, stackTrace), dart.fnType(async.FutureOr$(R), []))));
              } else {
                completer.completeError(error, stackTrace);
              }
            }
          }, T$.ObjectAndStackTraceToNull())});
        return completer.operation;
      }
      cancel() {
        return this[_completer$][_cancel$]();
      }
      get isCanceled() {
        return this[_completer$].isCanceled;
      }
      get isCompleted() {
        return this[_completer$].isCompleted;
      }
    }
    (CancelableOperation.__ = function(_completer) {
      if (_completer == null) dart.nullFailed(I[2], 22, 30, "_completer");
      this[_completer$] = _completer;
      ;
    }).prototype = CancelableOperation.prototype;
    dart.addTypeTests(CancelableOperation);
    CancelableOperation.prototype[_is_CancelableOperation_default] = true;
    dart.addTypeCaches(CancelableOperation);
    dart.setMethodSignature(CancelableOperation, () => ({
      __proto__: dart.getMethods(CancelableOperation.__proto__),
      asStream: dart.fnType(async.Stream$(T), []),
      valueOrCancellation: dart.fnType(async.Future$(dart.nullable(T)), [], [dart.nullable(core.Object)]),
      then: dart.gFnType(R => [cancelable_operation.CancelableOperation$(R), [dart.fnType(async.FutureOr$(R), [T])], {onCancel: dart.nullable(dart.fnType(async.FutureOr$(R), [])), onError: dart.nullable(dart.fnType(async.FutureOr$(R), [core.Object, core.StackTrace])), propagateCancel: core.bool}, {}], R => [dart.nullable(core.Object)]),
      cancel: dart.fnType(async.Future, [])
    }));
    dart.setGetterSignature(CancelableOperation, () => ({
      __proto__: dart.getGetters(CancelableOperation.__proto__),
      value: async.Future$(T),
      isCanceled: core.bool,
      isCompleted: core.bool
    }));
    dart.setLibraryUri(CancelableOperation, I[3]);
    dart.setFieldSignature(CancelableOperation, () => ({
      __proto__: dart.getFields(CancelableOperation.__proto__),
      [_completer$]: dart.finalFieldType(cancelable_operation.CancelableCompleter$(T))
    }));
    return CancelableOperation;
  });
  cancelable_operation.CancelableOperation = cancelable_operation.CancelableOperation$();
  dart.addTypeTests(cancelable_operation.CancelableOperation, _is_CancelableOperation_default);
  var __CancelableCompleter_operation = dart.privateName(cancelable_operation, "_#CancelableCompleter#operation");
  var __CancelableCompleter_operation_isSet = dart.privateName(cancelable_operation, "_#CancelableCompleter#operation#isSet");
  var _isCompleted = dart.privateName(cancelable_operation, "_isCompleted");
  var _isCanceled = dart.privateName(cancelable_operation, "_isCanceled");
  var _onCancel = dart.privateName(cancelable_operation, "_onCancel");
  const _is_CancelableCompleter_default = Symbol('_is_CancelableCompleter_default');
  cancelable_operation.CancelableCompleter$ = dart.generic(T => {
    var CompleterOfT = () => (CompleterOfT = dart.constFn(async.Completer$(T)))();
    var CancelableOperationOfT = () => (CancelableOperationOfT = dart.constFn(cancelable_operation.CancelableOperation$(T)))();
    var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var FutureOrNOfT = () => (FutureOrNOfT = dart.constFn(dart.nullable(FutureOrOfT())))();
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var TToNull = () => (TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    class CancelableCompleter extends core.Object {
      get operation() {
        let t2;
        if (!dart.test(this[__CancelableCompleter_operation_isSet])) {
          let t1 = new (CancelableOperationOfT()).__(this);
          if (dart.test(this[__CancelableCompleter_operation_isSet])) dart.throw(new _internal.LateError.fieldADI("operation"));
          this[__CancelableCompleter_operation] = t1;
          this[__CancelableCompleter_operation_isSet] = true;
        }
        t2 = this[__CancelableCompleter_operation];
        return t2;
      }
      get isCompleted() {
        return this[_isCompleted];
      }
      get isCanceled() {
        return this[_isCanceled];
      }
      complete(value = null) {
        FutureOrNOfT().as(value);
        if (dart.test(this[_isCompleted])) dart.throw(new core.StateError.new("Operation already completed"));
        this[_isCompleted] = true;
        if (!async.Future.is(value)) {
          if (dart.test(this[_isCanceled])) return;
          this[_inner].complete(value);
          return;
        }
        let future = FutureOfT().as(value);
        if (dart.test(this[_isCanceled])) {
          future.catchError(dart.fn(_ => {
          }, T$.dynamicToNull()));
          return;
        }
        future.then(core.Null, dart.fn(result => {
          if (dart.test(this[_isCanceled])) return;
          this[_inner].complete(result);
        }, TToNull()), {onError: dart.fn((error, stackTrace) => {
            if (error == null) dart.nullFailed(I[2], 199, 25, "error");
            if (stackTrace == null) dart.nullFailed(I[2], 199, 43, "stackTrace");
            if (dart.test(this[_isCanceled])) return;
            this[_inner].completeError(error, stackTrace);
          }, T$.ObjectAndStackTraceToNull())});
      }
      completeError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[2], 206, 29, "error");
        if (dart.test(this[_isCompleted])) dart.throw(new core.StateError.new("Operation already completed"));
        this[_isCompleted] = true;
        if (dart.test(this[_isCanceled])) return;
        this[_inner].completeError(error, stackTrace);
      }
      [_cancel$]() {
        if (dart.test(this[_inner].isCompleted)) return async.Future.value();
        return this[_cancelMemo].runOnce(dart.fn(() => {
          this[_isCanceled] = true;
          let onCancel = this[_onCancel];
          if (onCancel != null) return onCancel();
        }, T$.VoidToFutureOr()));
      }
    }
    (CancelableCompleter.new = function(opts) {
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      this[_inner] = CompleterOfT().new();
      this[__CancelableCompleter_operation] = null;
      this[__CancelableCompleter_operation_isSet] = false;
      this[_isCompleted] = false;
      this[_isCanceled] = false;
      this[_cancelMemo] = new async_memoizer.AsyncMemoizer.new();
      this[_onCancel] = onCancel;
      ;
    }).prototype = CancelableCompleter.prototype;
    dart.addTypeTests(CancelableCompleter);
    CancelableCompleter.prototype[_is_CancelableCompleter_default] = true;
    dart.addTypeCaches(CancelableCompleter);
    dart.setMethodSignature(CancelableCompleter, () => ({
      __proto__: dart.getMethods(CancelableCompleter.__proto__),
      complete: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
      completeError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      [_cancel$]: dart.fnType(async.Future, [])
    }));
    dart.setGetterSignature(CancelableCompleter, () => ({
      __proto__: dart.getGetters(CancelableCompleter.__proto__),
      operation: cancelable_operation.CancelableOperation$(T),
      isCompleted: core.bool,
      isCanceled: core.bool
    }));
    dart.setLibraryUri(CancelableCompleter, I[3]);
    dart.setFieldSignature(CancelableCompleter, () => ({
      __proto__: dart.getFields(CancelableCompleter.__proto__),
      [_inner]: dart.finalFieldType(async.Completer$(T)),
      [_onCancel]: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, []))),
      [__CancelableCompleter_operation]: dart.fieldType(dart.nullable(cancelable_operation.CancelableOperation$(T))),
      [__CancelableCompleter_operation_isSet]: dart.fieldType(core.bool),
      [_isCompleted]: dart.fieldType(core.bool),
      [_isCanceled]: dart.fieldType(core.bool),
      [_cancelMemo]: dart.finalFieldType(async_memoizer.AsyncMemoizer)
    }));
    return CancelableCompleter;
  });
  cancelable_operation.CancelableCompleter = cancelable_operation.CancelableCompleter$();
  dart.addTypeTests(cancelable_operation.CancelableCompleter, _is_CancelableCompleter_default);
  byte_collector.collectBytes = function collectBytes(source) {
    if (source == null) dart.nullFailed(I[4], 16, 50, "source");
    return byte_collector._collectBytes(T$.FutureOfUint8List(), source, dart.fn((_, result) => {
      if (_ == null) dart.nullFailed(I[4], 17, 33, "_");
      if (result == null) dart.nullFailed(I[4], 17, 36, "result");
      return result;
    }, T$.StreamSubscriptionOfListOfintAndFutureOfUint8ListToFutureOfUint8List()));
  };
  byte_collector.collectBytesCancelable = function collectBytesCancelable(source) {
    if (source == null) dart.nullFailed(I[4], 31, 23, "source");
    return byte_collector._collectBytes(T$.CancelableOperationOfUint8List(), source, dart.fn((subscription, result) => {
      if (subscription == null) dart.nullFailed(I[4], 34, 8, "subscription");
      if (result == null) dart.nullFailed(I[4], 34, 22, "result");
      return T$.CancelableOperationOfUint8List().fromFuture(result, {onCancel: dart.bind(subscription, 'cancel')});
    }, T$.StreamSubscriptionOfListOfintAndFutureOfUint8ListToCancelableOperationOfUint8List()));
  };
  byte_collector._collectBytes = function _collectBytes(T, source, result) {
    if (source == null) dart.nullFailed(I[4], 43, 38, "source");
    if (result == null) dart.nullFailed(I[4], 44, 66, "result");
    let byteLists = T$.JSArrayOfListOfint().of([]);
    let length = 0;
    let completer = T$.CompleterOfUint8List().sync();
    let subscription = source.listen(dart.fn(bytes => {
      if (bytes == null) dart.nullFailed(I[4], 49, 8, "bytes");
      byteLists[$add](bytes);
      length = length + dart.notNull(bytes[$length]);
    }, T$.ListOfintTovoid()), {onError: dart.bind(completer, 'completeError'), onDone: dart.fn(() => {
        completer.complete(byte_collector._collect(length, byteLists));
      }, T$.VoidTovoid()), cancelOnError: true});
    return result(subscription, completer.future);
  };
  byte_collector._collect = function _collect(length, byteLists) {
    if (length == null) dart.nullFailed(I[4], 62, 24, "length");
    if (byteLists == null) dart.nullFailed(I[4], 62, 48, "byteLists");
    let result = _native_typed_data.NativeUint8List.new(length);
    let i = 0;
    for (let byteList of byteLists) {
      let end = i + dart.notNull(byteList[$length]);
      result[$setRange](i, end, byteList);
      i = end;
    }
    return result;
  };
  var _cachedStreamSplitter = dart.privateName(async_cache, "_cachedStreamSplitter");
  var _cachedValueFuture = dart.privateName(async_cache, "_cachedValueFuture");
  var _stale = dart.privateName(async_cache, "_stale");
  var _duration$ = dart.privateName(async_cache, "_duration");
  var _startStaleTimer = dart.privateName(async_cache, "_startStaleTimer");
  const _is_AsyncCache_default = Symbol('_is_AsyncCache_default');
  async_cache.AsyncCache$ = dart.generic(T => {
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var VoidToFutureOfT = () => (VoidToFutureOfT = dart.constFn(dart.fnType(FutureOfT(), [])))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var VoidToStreamOfT = () => (VoidToStreamOfT = dart.constFn(dart.fnType(StreamOfT(), [])))();
    var StreamSplitterOfT = () => (StreamSplitterOfT = dart.constFn(stream_splitter.StreamSplitter$(T)))();
    var _StreamHandlerTransformerOfT$T = () => (_StreamHandlerTransformerOfT$T = dart.constFn(async._StreamHandlerTransformer$(T, T)))();
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    var EventSinkOfTTovoid = () => (EventSinkOfTTovoid = dart.constFn(dart.fnType(dart.void, [EventSinkOfT()])))();
    class AsyncCache extends core.Object {
      static ephemeral() {
        return new (async_cache.AsyncCache$(T)).new(core.Duration.zero);
      }
      fetch(callback) {
        VoidToFutureOfT().as(callback);
        if (callback == null) dart.nullFailed(I[5], 59, 40, "callback");
        return async.async(T, (function* fetch() {
          let t2;
          if (this[_cachedStreamSplitter] != null) {
            dart.throw(new core.StateError.new("Previously used to cache via `fetchStream`"));
          }
          let result = (t2 = this[_cachedValueFuture], t2 == null ? this[_cachedValueFuture] = callback() : t2);
          try {
            return yield result;
          } finally {
            this[_startStaleTimer]();
          }
        }).bind(this));
      }
      fetchStream(callback) {
        let t2;
        VoidToStreamOfT().as(callback);
        if (callback == null) dart.nullFailed(I[5], 77, 46, "callback");
        if (this[_cachedValueFuture] != null) {
          dart.throw(new core.StateError.new("Previously used to cache via `fetch`"));
        }
        let splitter = (t2 = this[_cachedStreamSplitter], t2 == null ? this[_cachedStreamSplitter] = new (StreamSplitterOfT()).new(callback().transform(T, new (_StreamHandlerTransformerOfT$T()).new({handleDone: dart.fn(sink => {
            if (sink == null) dart.nullFailed(I[5], 82, 74, "sink");
            this[_startStaleTimer]();
            sink.close();
          }, EventSinkOfTTovoid())}))) : t2);
        return splitter.split();
      }
      invalidate() {
        let t2, t2$;
        this[_cachedValueFuture] = null;
        t2 = this[_cachedStreamSplitter];
        t2 == null ? null : t2.close();
        this[_cachedStreamSplitter] = null;
        t2$ = this[_stale];
        t2$ == null ? null : t2$.cancel();
        this[_stale] = null;
      }
      [_startStaleTimer]() {
        this[_stale] = async.Timer.new(this[_duration$], dart.bind(this, 'invalidate'));
      }
    }
    (AsyncCache.new = function(_duration) {
      if (_duration == null) dart.nullFailed(I[5], 45, 19, "_duration");
      this[_cachedStreamSplitter] = null;
      this[_cachedValueFuture] = null;
      this[_stale] = null;
      this[_duration$] = _duration;
      ;
    }).prototype = AsyncCache.prototype;
    dart.addTypeTests(AsyncCache);
    AsyncCache.prototype[_is_AsyncCache_default] = true;
    dart.addTypeCaches(AsyncCache);
    dart.setMethodSignature(AsyncCache, () => ({
      __proto__: dart.getMethods(AsyncCache.__proto__),
      fetch: dart.fnType(async.Future$(T), [dart.nullable(core.Object)]),
      fetchStream: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)]),
      invalidate: dart.fnType(dart.void, []),
      [_startStaleTimer]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(AsyncCache, I[6]);
    dart.setFieldSignature(AsyncCache, () => ({
      __proto__: dart.getFields(AsyncCache.__proto__),
      [_duration$]: dart.finalFieldType(core.Duration),
      [_cachedStreamSplitter]: dart.fieldType(dart.nullable(stream_splitter.StreamSplitter$(T))),
      [_cachedValueFuture]: dart.fieldType(dart.nullable(async.Future$(T))),
      [_stale]: dart.fieldType(dart.nullable(async.Timer))
    }));
    return AsyncCache;
  });
  async_cache.AsyncCache = async_cache.AsyncCache$();
  dart.addTypeTests(async_cache.AsyncCache, _is_AsyncCache_default);
  dart.trackLibraries("packages/async/src/stream_queue.dart", {
    "package:async/src/stream_queue.dart": stream_queue,
    "package:async/src/cancelable_operation.dart": cancelable_operation,
    "package:async/src/byte_collector.dart": byte_collector,
    "package:async/src/async_cache.dart": async_cache,
    "package:async/async.dart": async$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["stream_queue.dart","cancelable_operation.dart","byte_collector.dart","async_cache.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuG8B,cAAgB,cAAhB,sCAAkB,AAAY;MAAM;;YAclC;AAAW,cAAY,uCAAE,MAAM;MAAC;;AAuB5D,uBAAK;AACC,+BAAiB;AACM,UAA3B,kBAAY,cAAc;AAC1B,gBAAO,AAAe,eAAD;;AAEJ,QAAnB,WAAM;MACR;;YAO8B;AAC5B,YAAU,aAAN,KAAK,IAAG,GAAG,AAA+C,WAA9B,0BAAM,KAAK,EAAE,GAAG,MAAM;AACtD,uBAAK;AACC,wBAAU,iCAAqB,KAAK;AACpB,UAApB,kBAAY,OAAO;AACnB,gBAAO,AAAQ,QAAD;;AAEG,QAAnB,WAAM;MACR;;AAiBE,uBAAK;AACC,4BAAc;AACM,UAAxB,kBAAY,WAAW;AACvB,gBAAO,AAAY,YAAD;;AAED,QAAnB,WAAM;MACR;;AAOE,uBAAK;AACC,4BAAc;AACM,UAAxB,kBAAY,WAAW;AACvB,gBAAO,AAAY,YAAD;;AAED,QAAnB,WAAM;MACR;;AAYE,sBAAI;AACiB,UAAnB,WAAM;;AAEJ,sBAAU,4BAAgB;AACd,QAAhB,kBAAY;AACQ,QAApB,kBAAY,OAAO;AACnB,cAAO,AAAQ,QAAD;MAChB;;YAiBqB;AACnB,YAAU,aAAN,KAAK,IAAG,GAAG,AAA+C,WAA9B,0BAAM,KAAK,EAAE,GAAG,MAAM;AACtD,uBAAK;AACC,wBAAU,4BAAgB,KAAK;AACf,UAApB,kBAAY,OAAO;AACnB,gBAAO,AAAQ,QAAD;;AAEG,QAAnB,WAAM;MACR;;YAiByB;AACvB,YAAU,aAAN,KAAK,IAAG,GAAG,AAA+C,WAA9B,0BAAM,KAAK,EAAE,GAAG,MAAM;AACtD,uBAAK;AACC,wBAAU,4BAAgB,KAAK;AACf,UAApB,kBAAY,OAAO;AACnB,gBAAO,AAAQ,QAAD;;AAEG,QAAnB,WAAM;MACR;;AAmCE,sBAAI,kBAAW,AAAmB,WAAb;AAEjB,sBAAU,mCAAoB;AACd,QAApB,kBAAY,OAAO;AACnB,cAAO,AAAQ,QAAD;MAChB;;YA0BmE;AAC7D,0BAAc;AAId,oBAAQ,AAAY,WAAD;AACvB,cAAO,AAAQ,AAAQ,SAAR,CAAC,KAAK,kBAAO;cAAC;AAC3B,wBAAI,MAAM;AACiB,YAAzB,AAAY,WAAD,QAAQ,KAAK;;AAEJ,YAApB,AAAY,WAAD;;AAEb,gBAAO,OAAM;uCACH;gBAAQ;AACO,YAAzB,AAAY,WAAD,QAAQ,KAAK;AACb,YAAX,WAAM,KAAK;;MAEf;;YAsBuC;AACjC,0BAAc;AACd,wBAAY,kEAAiC;AAC3B,YAApB,AAAY,WAAD;;AAGT,oBAAQ,AAAY,WAAD;AAGpB,QAFH,AAAU,SAAD,UAAU,AAAQ,AAAQ,QAAR,CAAC,KAAK,eAAe;AAC9C,yBAAK,AAAU,SAAD,cAAa,AAAY,AAAa,WAAd,QAAQ,KAAK;;AAGrD,cAAO,AAAU,UAAD;MAClB;;YAkBqB;;AACnB,sBAAI,kBAAW,AAAmB,WAAb;AACL,QAAhB,kBAAY;AAEZ,uBAAK,SAAS;AACR,wBAAU,8BAAkB;AACZ,UAApB,kBAAY,OAAO;AACnB,gBAAO,AAAQ,QAAD;;AAGhB,sBAAI,4BAAW,AAAY,4BAAS,MAAc;AAClD,cAAO;MACT;;AAiBE,yBAAO,AAAc;AACnB,wBAAI,AAAc,AAAM,mCAAO,mBAAa;AACf,YAA3B,AAAc;;AAEd;;;AAIJ,uBAAK;AACK,UAAR;;MAEJ;;AASE,uBAAO;AACP,sBAAI;AACF,gBAAO;;AAEK,QAAd,gBAAU;AAEN,2BAAe;AACnB,YAAI,AAAa,YAAD;AACd,gBAAO;;AAEW,QAApB,sBAAgB;AAEZ,wBAAY,AAAa,YAAD;AACxB,qBAAS,kCAAsB,YAAY;AAG/C,sBAAI,SAAS,GAAE,AAAa,AAAQ,YAAT;AAC3B,cAAO,OAAM;MACf;;AAQwB,QAAT,AAAE,eAAf;MACF;;AAQE,sBAAI,gBAAS;AACb,YAAI,AAAc;AAQd,UAPF,sBAAgB,AAAQ,sBAAO,QAAC;AACA,YAA9B,iBAAkB,2BAAM,IAAI;mCAClB,SAAQ,OAAkB;kBAAlB;kBAAkB;AACO,cAA3C,iBAAkB,kBAAM,KAAK,EAAE,UAAU;wDAChC;AACW,cAApB,sBAAgB;AACR,cAAR;;;AAGqB,UAAV,AAAE,eAAf;;MAEJ;;AAIE,sBAAI,gBAAS,MAAO;AACkB,QAAxB,8BAAd,sBAAkB,AAAQ,sBAAO,QAAnB;AACV,qBAAsB,AAAE,eAAf;AACL,QAAR;AACA,cAAO,OAAM;MACf;;YAQ0B;AACP,QAAjB,wBAAe,aAAf,yBAAe;AACQ,QAAvB,AAAY,sBAAI,MAAM;AACL,QAAjB;MACF;;AAKgB,QAAd,gBAAU;AACO,QAAjB;MACF;;AAUE,cAAO,yBAAW;MACpB;;YAMkC;AAChC,sBAAI,AAAc;AAChB,wBAAI,AAAQ,OAAD,QAAQ,mBAAa,iBAAU;AACxB,UAAlB;;AAEwB,QAA1B,AAAc,wBAAI,OAAO;MAC3B;;;UA7amB;MA/BI;MAGlB,gBAAU;MAKV,kBAAY;MASb,wBAAkB;MAGK,oBAAc;MAKd,sBAAgB;MAMxB;AAEjB,oBAAI,AAAQ;AACQ,QAAlB;AACQ,QAAR;;IAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwcM,oBAAQ,qBAAY,AAAU;AAChB,QAAlB,AAAQ,kBAAI,KAAK;AACjB,cAAO,MAAK;MACd;;4BAW2B;;AACV,QAAf;AACA,uBAAK,AAAQ,uBAAS,KAAK;AACuC,UAAhE,WAAM,2BAAc;cACf,eAAI,AAAM,AAAc,KAAf;AACuD,UAArE,WAAM,wBAAW;;AAEF,QAAjB,mBAAa;AAIb,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAM,KAAD,oBAAmB,IAAA,AAAC,CAAA;AACV,UAAjC,AAAQ,AAAY;;AAGf,QAAP;MACF;;AAUiB,QAAf;AACgB,QAAhB,kBAAY;AACL,QAAP;MACF;;AAKmB,QAAjB,AAAU;AACV,iBAAS,QAAS;AACD,UAAf,AAAM,KAAD;;AAGH,6BAAiB,AAAQ,AAAc;AAC3C,YAAmB,oCAAf,cAAc,KACa,YAA3B,AAAe,cAAD,cAAgB;AACG,UAAnC,AAAQ,AAAc;AACG,UAAzB,AAAQ;;MAEZ;;AAIE,sBAAI;AAC6D,UAA/D,WAAM,wBAAW;cACZ,eAAI;AACsD,UAA/D,WAAM,wBAAW;;MAErB;;0CA7E8B,SAAmB;UAAnB;UAAmB;MAR3C,gBAAuB;MAGzB,mBAAa;MAGb,kBAAY;MAEc;MACd,kBAAE,8BAAe,MAAM;;IAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmH1C;;;;;;;;;;;;;;;;;AAY0B,cAAA,AAAW;MAAM;aAGR,QAAa;kCAAb;;YAAa;AAC5C,sBAAI,AAAO,MAAD;AACiC,UAAzC,AAAO,AAAc,MAAf,wBAAwB;AAC9B,gBAAO;;AAET,sBAAI,MAAM;AAC+D,UAAvE,AAAW,+BAAc,wBAAW,gBAA2B;AAC/D,gBAAO;;AAET,cAAO;MACT;;;MAjBM,mBAAa;;IAEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BU,cAAA,AAAW;MAAM;aAGR,QAAa;kCAAb;;YAAa;AAC5C,sBAAI,AAAO,MAAD;AACyB,UAAjC,AAAO,AAAM,MAAP,gBAAgB;AACtB,gBAAO;;AAET,sBAAI,MAAM;AAC+D,UAAvE,AAAW,+BAAc,wBAAW,gBAA2B;AAC/D,gBAAO;;AAET,cAAO;MACT;;;MAjBM,mBAAa;;IAEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCY,cAAA,AAAW;MAAM;aAGV,QAAa;kCAAb;;YAAa;AAC5C,eAAqB,aAAd,wBAAgB;AACrB,wBAAI,AAAO,MAAD;AACR,0BAAI,MAAM,GAAE;AACZ,kBAAO;;AAEM,UAAf,uBAAa,aAAb,wBAAa;AAET,sBAAQ,AAAO,MAAD;AAClB,wBAAI,AAAM,KAAD;AAE6C,YADpD,AAAW,+BACM,AAAE,eAAf,AAAM,KAAD,iBAA8B,AAAE,eAAf,AAAM,KAAD;AAC/B,kBAAO;;;AAGuB,QAAlC,AAAW,0BAAS;AACpB,cAAO;MACT;;;UAvBkB;MAVZ,mBAAa;MAUD;;IAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CF,cAAA,AAAW;MAAM;;;UAH7B;MAXZ,mBAAa;MAGb,cAAW;MAQC;;IAAc;;;;;;;;;;;;;;;;;;;;;;;;;aAWC,QAAa;kCAAb;;YAAa;AAC5C,eAAoB,aAAb,AAAM,qCAAS;AACpB,wBAAI,AAAO,MAAD;AACR,0BAAI,MAAM,GAAE;AACZ,kBAAO;;AAGL,sBAAQ,AAAO,MAAD;AAClB,wBAAI,AAAM,KAAD;AAC4B,YAAtB,AAAE,eAAf,AAAM,KAAD,mBAAmB;AACxB,kBAAO;;AAEsB,UAA/B,AAAM,kBAAiB,AAAE,eAAf,AAAM,KAAD;;AAES,QAA1B,AAAW,0BAAS;AACpB,cAAO;MACT;;;UAnBiB;AAAgB,4CAAM,YAAY;;IAAC;;;;;;;;;;;;;;;;;;aA2BnB,QAAa;kCAAb;;YAAa;AAC5C,eAAoB,aAAb,AAAM,qCAAS;AACpB,cAAI,AAAO,AAAO,MAAR,WAAW,AAAM;AACzB,0BAAI,MAAM,GAAE;AACZ,kBAAO;;AAEL,sBAAQ,AAAO,MAAD,WAAW,AAAM;AACnC,wBAAI,AAAM,KAAD;AAC4B,YAAtB,AAAE,eAAf,AAAM,KAAD,mBAAmB;AACxB,kBAAO;;AAEsB,UAA/B,AAAM,kBAAiB,AAAE,eAAf,AAAM,KAAD;;AAES,QAA1B,AAAW,0BAAS;AACpB,cAAO;MACT;;;UAlBsB;AAAgB,iDAAM,YAAY;;IAAC;;;;;;;;;;;;;;;;;;;;AAqCpC,cAAA,AAAW;MAAM;aAGL,QAAa;kCAAb;;YAAa;AAC5C,sBAAI,AAAa;AACM,UAArB,AAAW;;AAEoB,UAA/B,AAAa;AAC2D,UAAxE,AAAW,0BAAS,AAAa,AAAiB,AAAa,6CAAN;;AAE3D,cAAO;MACT;;;UAdoB;MANd,mBAAa;MAMC;;IAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCT,cAAA,AAAW;MAAM;aAGR,QAAa;kCAAb;;YAAa;AAC5C,sBAAI,AAAO,MAAD;AACR,wBAAI,AAAa;AACM,YAArB,AAAW;;AAE8C,YAAzD,AAAW,iCAAgB,AAAa;;;AAKtC,2BAAa;AACjB,mBAAS,QAAS,OAAM;AACC,YAAvB,AAAM,KAAD,OAAO,UAAU;;AAIW,UAFnC,AACK,AACA,UAFK,WACK,AAAa,uDAAiC,qBAChC,UAAX,UAAU;AACiB,UAA7C,AAAW,iCAAgB,AAAW,UAAD;;AAEvC,cAAO;MACT;;;UA1BkB;MARZ,mBAAa;MAQD;;IAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCJ,cAAA,AAAW;MAAM;aAGX,QAAa;kCAAb;;YAAa;AAC5C,sBAAI,AAAO,MAAD;AACiB,UAAzB,AAAW,0BAAS;AACpB,gBAAO;;AAET,sBAAI,MAAM;AACkB,UAA1B,AAAW,0BAAS;AACpB,gBAAO;;AAET,cAAO;MACT;;;MAfM,mBAAa;;IAgBrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUuC;MAAW;;;AAAX;;;;;;MAAW;aAaf,QAAa;;kCAAb;;YAAa;AAC5C,eAAmB,aAAZ,kCAAc,AAAO,MAAD;AACe,UAAxC,AAAM,AAAgB,MAAhB,OAAY,wBAAX,uCAAW,cAAU;;AAE9B,sBAAI,MAAM,gBAAK,AAAY,6BAAU,AAAY,AAAO;AACxD,cAA8B,WAAvB,AAAY,2CAAc,AAAY;MAC/C;;;UAXmC;gDARE;;MAG/B,oBAAc,iCAA0B;MAG1C,oBAAc;AAGkD,MAAlE,mBAAqC,qCAAE,MAAM,EAAE,AAAY;IAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCl6BiD;YACvB;AACpB,wBAAY,kEAAiC,QAAQ;AAChC,QAAzB,AAAU,SAAD,UAAU,KAAK;AACxB,cAAO,AAAU,UAAD;MAClB;;AAGuB,cAAA,AAAW,AAAO;MAAM;;AAOzC,yBACA,iCAA0B,gBAA2B,UAAX;AAQ5C,QANF,AAAM,2BAAK,QAAC;AACW,UAArB,AAAW,UAAD,KAAK,KAAK;AACF,UAAlB,AAAW,UAAD;iCACA,SAAQ,OAAkB;gBAAlB;gBAAkB;AACE,YAAtC,AAAW,UAAD,UAAU,KAAK,EAAE,UAAU;AACnB,YAAlB,AAAW,UAAD;;AAEZ,cAAO,AAAW,WAAD;MACnB;;gBAQmC;AAC7B,wBAAY;AAEqB,QADrC,AAAM,2BAAK,QAAC,UAAW,AAAU,SAAD,UAAU,MAAM,yBACzB,UAAV,SAAS;AAIc,QAFpC,AAAW,AAAY,AAAO,sDAAK,QAAC;AACG,UAArC,AAAU,SAAD,UAAU,iBAAiB;0CAChB,UAAV,SAAS;AAErB,cAAO,AAAU,UAAD;MAClB;;YAcuD;YACR;YACnB;YACnB;;AACD,wBACF,4EAAiC,eAAe,cAAG,kBAAS;AAqB9D,QAnBF,AAAsB,2CAAK,QAAI;AAC7B,yBAAK,AAAU,SAAD;AACZ,0BAAI;AACF,mBAAc,KAAP,MAAM;AAC8C,cAA3D,AAAU,SAAD,UAAiB,sBAAK,cAAM,AAAO,OAAA,CAAQ,KAAP,MAAM;kBAC9C,KAAI,AAAS,QAAD;AACwB,cAAzC,AAAU,SAAD,UAAiB,sBAAK,QAAQ;;AAEpB,cAAnB,AAAU,SAAD;;;kCAGH,SAAQ,OAAkB;gBAAlB;gBAAkB;AACpC,2BAAK,AAAU,SAAD;AACZ,kBAAI,AAAQ,OAAD;AACwD,gBAAjE,AAAU,SAAD,UAAiB,sBAAK,cAAM,AAAO,OAAA,CAAC,KAAK,EAAE,UAAU;;AAEpB,gBAA1C,AAAU,SAAD,eAAe,KAAK,EAAE,UAAU;;;;AAI/C,cAAO,AAAU,UAAD;MAClB;;AAMmB,cAAA,AAAW;MAAS;;AAGhB,cAAA,AAAW;MAAU;;AAQpB,cAAA,AAAW;MAAW;;;UAtHnB;;;IAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4I3B;mBAAY,kCAAyB;AAArC;;;;;;MAA0C;;AAG7B;MAAY;;AAIb;MAAW;;0BAUN;AAC1B,sBAAI,qBAAc,AAA+C,WAAzC,wBAAW;AAChB,QAAnB,qBAAe;AAEf,aAAU,gBAAN,KAAK;AACP,wBAAI,oBAAa;AACK,UAAtB,AAAO,sBAAS,KAAK;AACrB;;AAGI,qBAAe,eAAN,KAAK;AACpB,sBAAI;AAEuB,UAAzB,AAAO,MAAD,YAAY,QAAC;;AACnB;;AASA,QANF,AAAO,MAAD,iBAAM,QAAC;AACX,wBAAI,oBAAa;AACM,UAAvB,AAAO,sBAAS,MAAM;iCACZ,SAAQ,OAAkB;gBAAlB;gBAAkB;AACpC,0BAAI,oBAAa;AACsB,YAAvC,AAAO,2BAAc,KAAK,EAAE,UAAU;;MAE1C;oBAG0B,OAAoB;YAApB;AACxB,sBAAI,qBAAc,AAA+C,WAAzC,wBAAW;AAChB,QAAnB,qBAAe;AAEf,sBAAI,oBAAa;AACsB,QAAvC,AAAO,2BAAc,KAAK,EAAE,UAAU;MACxC;;AAIE,sBAAI,AAAO,2BAAa,MAAc;AAEtC,cAAO,AAAY,2BAAQ;AACP,UAAlB,oBAAc;AACV,yBAAW;AACf,cAAI,AAAS,QAAD,UAAU,MAAO,AAAQ,SAAA;;MAEzC;;;UAhE0C;MAbpC,eAAS;8CAgBJ;;MAIN,qBAAe;MAIf,oBAAc;MAGb,oBAAc;MAd6C,kBAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QC/I5B;AAC/C,UAAO,sDAAc,MAAM,EAAE,SAAC,GAAG;UAAH;UAAG;AAAW,mBAAM;;EACpD;;QAasB;AACpB,UAAO,mEACH,MAAM,EACN,SAAC,cAAc;UAAd;UAAc;AAAW,YAAoB,gDAAW,MAAM,aACpC,UAAb,YAAY;;EAChC;2DAOqC,QAC4B;QAD5B;QAC4B;AAC3D,oBAAuB;AACvB,iBAAS;AACT,oBAAY;AACZ,uBAAe,AAAO,MAAD,QACrB;UAAC;AACqB,MAApB,AAAU,SAAD,OAAK,KAAK;AACG,MAAtB,SAAA,AAAO,MAAD,gBAAI,AAAM,KAAD;wCAEE,UAAV,SAAS,4BACV;AACyC,QAA/C,AAAU,SAAD,UAAU,wBAAS,MAAM,EAAE,SAAS;0CAEhC;AACnB,UAAO,AAAM,OAAA,CAAC,YAAY,EAAE,AAAU,SAAD;EACvC;8CAGuB,QAAwB;QAAxB;QAAwB;AACzC,iBAAS,uCAAU,MAAM;AACzB,YAAI;AACR,aAAS,WAAY,UAAS;AACxB,gBAAM,AAAE,CAAD,gBAAG,AAAS,QAAD;AACW,MAAjC,AAAO,MAAD,YAAU,CAAC,EAAE,GAAG,EAAE,QAAQ;AACzB,MAAP,IAAI,GAAG;;AAET,UAAO,OAAM;EACf;;;;;;;;;;;;;;;;;;ACnBoC,oDAAoB;MAAK;;6BAOtB;;AAAtB;;AACb,cAAI,AAAsB;AACsC,YAA9D,WAAM,wBAAW;;AAEb,wBAA4B,KAAnB,0BAAmB,aAAnB,2BAAuB,AAAQ,QAAA;AAC9C;AACE,kBAAO,OAAM,MAAM;;AAED,YAAlB;;QAEJ;;kBAQ2C;;;;AACzC,YAAI,AAAmB;AACmC,UAAxD,WAAM,wBAAW;;AAEf,wBAAiC,KAAtB,6BAAsB,aAAtB,8BAA0B,8BACrC,AAAQ,AAAG,QAAH,gBAA+B,wDAAyB;gBAAC;AACjD,YAAlB;AACY,YAAZ,AAAK,IAAD;;AAEN,cAAO,AAAS,SAAD;MACjB;;;AAK2B,QAAzB,2BAAqB;AAES,aAA9B;4BAAuB;AACK,QAA5B,8BAAwB;AACR,cAAhB;6BAAQ;AACK,QAAb,eAAS;MACX;;AAGuC,QAArC,eAAS,gBAAM,4BAAW;MAC5B;;;UAzDgB;MAbG;MAGR;MAGJ;MAOS;;IAAU","file":"../../../../../../../packages/async/src/stream_queue.dart.lib.js"}');
  // Exports:
  return {
    src__stream_queue: stream_queue,
    src__cancelable_operation: cancelable_operation,
    src__byte_collector: byte_collector,
    src__async_cache: async_cache,
    async: async$
  };
}));

//# sourceMappingURL=stream_queue.dart.lib.js.map
