define(['dart_sdk', 'packages/cron/src/constraint_parser.dart'], (function load__packages__cron__cron_dart(dart_sdk, packages__cron__src__constraint_parser$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const constraint_parser = packages__cron__src__constraint_parser$46dart.src__constraint_parser;
  var cron = Object.create(dart.library);
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $map = dartx.map;
  var $toSet = dartx.toSet;
  var $split = dartx.split;
  var $length = dartx.length;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $_get = dartx._get;
  var $isNotEmpty = dartx.isNotEmpty;
  var $contains = dartx.contains;
  var $isEmpty = dartx.isEmpty;
  var $any = dartx.any;
  var $modulo = dartx['%'];
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intTobool: () => (T.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfStringN: () => (T.JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(T.StringN())))(),
    JSArrayOf_ScheduledTask: () => (T.JSArrayOf_ScheduledTask = dart.constFn(_interceptors.JSArray$(cron._ScheduledTask)))(),
    _ScheduledTaskTobool: () => (T._ScheduledTaskTobool = dart.constFn(dart.fnType(core.bool, [cron._ScheduledTask])))(),
    VoidToFutureOr: () => (T.VoidToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "package:cron/cron.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/cron-0.3.0/lib/cron.dart"
  ];
  cron.Cron = class Cron extends core.Object {
    static new() {
      return new cron._Cron.new();
    }
  };
  (cron.Cron[dart.mixinNew] = function() {
  }).prototype = cron.Cron.prototype;
  dart.addTypeTests(cron.Cron);
  dart.addTypeCaches(cron.Cron);
  dart.setLibraryUri(cron.Cron, I[0]);
  var seconds$ = dart.privateName(cron, "Schedule.seconds");
  var minutes$ = dart.privateName(cron, "Schedule.minutes");
  var hours$ = dart.privateName(cron, "Schedule.hours");
  var days$ = dart.privateName(cron, "Schedule.days");
  var months$ = dart.privateName(cron, "Schedule.months");
  var weekdays$ = dart.privateName(cron, "Schedule.weekdays");
  var _hasSeconds = dart.privateName(cron, "_hasSeconds");
  cron.Schedule = class Schedule extends core.Object {
    get seconds() {
      return this[seconds$];
    }
    set seconds(value) {
      super.seconds = value;
    }
    get minutes() {
      return this[minutes$];
    }
    set minutes(value) {
      super.minutes = value;
    }
    get hours() {
      return this[hours$];
    }
    set hours(value) {
      super.hours = value;
    }
    get days() {
      return this[days$];
    }
    set days(value) {
      super.days = value;
    }
    get months() {
      return this[months$];
    }
    set months(value) {
      super.months = value;
    }
    get weekdays() {
      return this[weekdays$];
    }
    set weekdays(value) {
      super.weekdays = value;
    }
    static new(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let seconds = opts && 'seconds' in opts ? opts.seconds : null;
      let minutes = opts && 'minutes' in opts ? opts.minutes : null;
      let hours = opts && 'hours' in opts ? opts.hours : null;
      let days = opts && 'days' in opts ? opts.days : null;
      let months = opts && 'months' in opts ? opts.months : null;
      let weekdays = opts && 'weekdays' in opts ? opts.weekdays : null;
      let parsedSeconds = (t0 = constraint_parser.parseConstraint(seconds), t0 == null ? null : t0[$where](dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 70, 42, "x");
        return dart.notNull(x) >= 0 && dart.notNull(x) <= 59;
      }, T.intTobool()))[$toList]());
      let parsedMinutes = (t0$ = constraint_parser.parseConstraint(minutes), t0$ == null ? null : t0$[$where](dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 72, 42, "x");
        return dart.notNull(x) >= 0 && dart.notNull(x) <= 59;
      }, T.intTobool()))[$toList]());
      let parsedHours = (t0$0 = constraint_parser.parseConstraint(hours), t0$0 == null ? null : t0$0[$where](dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 74, 40, "x");
        return dart.notNull(x) >= 0 && dart.notNull(x) <= 59;
      }, T.intTobool()))[$toList]());
      let parsedDays = (t0$1 = constraint_parser.parseConstraint(days), t0$1 == null ? null : t0$1[$where](dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 76, 39, "x");
        return dart.notNull(x) >= 1 && dart.notNull(x) <= 31;
      }, T.intTobool()))[$toList]());
      let parsedMonths = (t0$2 = constraint_parser.parseConstraint(months), t0$2 == null ? null : t0$2[$where](dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 78, 41, "x");
        return dart.notNull(x) >= 1 && dart.notNull(x) <= 12;
      }, T.intTobool()))[$toList]());
      let parsedWeekdays = (t0$3 = constraint_parser.parseConstraint(weekdays), t0$3 == null ? null : t0$3[$where](dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 80, 18, "x");
        return dart.notNull(x) >= 0 && dart.notNull(x) <= 7;
      }, T.intTobool()))[$map](core.int, dart.fn(x => {
        if (x == null) dart.nullFailed(I[1], 81, 15, "x");
        return x === 0 ? 7 : x;
      }, T.intToint()))[$toSet]()[$toList]());
      return new cron.Schedule.__(parsedSeconds, parsedMinutes, parsedHours, parsedDays, parsedMonths, parsedWeekdays);
    }
    static parse(cronFormat) {
      if (cronFormat == null) dart.nullFailed(I[1], 89, 33, "cronFormat");
      let p = cronFormat[$split](core.RegExp.new("\\s+"));
      if (!(p[$length] === 5 || p[$length] === 6)) dart.assertFailed(null, I[1], 91, 12, "p.length == 5 || p.length == 6");
      let parts = (() => {
        let t0 = T.JSArrayOfStringN().of([]);
        if (p[$length] === 5) t0[$add](null);
        t0[$addAll](p);
        return t0;
      })();
      return cron.Schedule.new({seconds: parts[$_get](0), minutes: parts[$_get](1), hours: parts[$_get](2), days: parts[$_get](3), months: parts[$_get](4), weekdays: parts[$_get](5)});
    }
    get [_hasSeconds]() {
      return this.seconds != null && dart.test(dart.nullCheck(this.seconds)[$isNotEmpty]) && (dart.nullCheck(this.seconds)[$length] !== 1 || !dart.test(dart.nullCheck(this.seconds)[$contains](0)));
    }
  };
  (cron.Schedule.__ = function(seconds, minutes, hours, days, months, weekdays) {
    this[seconds$] = seconds;
    this[minutes$] = minutes;
    this[hours$] = hours;
    this[days$] = days;
    this[months$] = months;
    this[weekdays$] = weekdays;
    ;
  }).prototype = cron.Schedule.prototype;
  dart.addTypeTests(cron.Schedule);
  dart.addTypeCaches(cron.Schedule);
  dart.setGetterSignature(cron.Schedule, () => ({
    __proto__: dart.getGetters(cron.Schedule.__proto__),
    [_hasSeconds]: core.bool
  }));
  dart.setLibraryUri(cron.Schedule, I[0]);
  dart.setFieldSignature(cron.Schedule, () => ({
    __proto__: dart.getFields(cron.Schedule.__proto__),
    seconds: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    minutes: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    hours: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    days: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    months: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    weekdays: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  cron.ScheduledTask = class ScheduledTask extends core.Object {};
  (cron.ScheduledTask.new = function() {
    ;
  }).prototype = cron.ScheduledTask.prototype;
  dart.addTypeTests(cron.ScheduledTask);
  dart.addTypeCaches(cron.ScheduledTask);
  dart.setLibraryUri(cron.ScheduledTask, I[0]);
  var _closed = dart.privateName(cron, "_closed");
  var _timer = dart.privateName(cron, "_timer");
  var _schedules = dart.privateName(cron, "_schedules");
  var _scheduleNextTick = dart.privateName(cron, "_scheduleNextTick");
  var _tick = dart.privateName(cron, "_tick");
  cron._Cron = class _Cron extends core.Object {
    schedule(schedule, task) {
      if (schedule == null) dart.nullFailed(I[1], 128, 35, "schedule");
      if (task == null) dart.nullFailed(I[1], 128, 50, "task");
      if (dart.test(this[_closed])) dart.throw(core.Exception.new("Closed."));
      let st = new cron._ScheduledTask.new(schedule, task);
      this[_schedules][$add](st);
      this[_scheduleNextTick]();
      return st;
    }
    close() {
      return async.async(dart.dynamic, (function* close() {
        let t1;
        this[_closed] = true;
        t1 = this[_timer];
        t1 == null ? null : t1.cancel();
        this[_timer] = null;
        for (let schedule of this[_schedules]) {
          yield schedule.cancel();
        }
      }).bind(this));
    }
    [_scheduleNextTick]() {
      if (dart.test(this[_closed])) return;
      if (this[_timer] != null || dart.test(this[_schedules][$isEmpty])) return;
      let now = new core.DateTime.now();
      let isTickMinute = this[_schedules][$any](dart.fn(task => {
        if (task == null) dart.nullFailed(I[1], 150, 42, "task");
        return !dart.test(task.schedule[_hasSeconds]);
      }, T._ScheduledTaskTobool()));
      let ms = (dart.test(isTickMinute) ? 60 : 1) * 1000 - now.millisecondsSinceEpoch[$modulo]((dart.test(isTickMinute) ? 60 : 1) * 1000);
      this[_timer] = async.Timer.new(new core.Duration.new({milliseconds: ms}), dart.bind(this, _tick));
    }
    [_tick]() {
      this[_timer] = null;
      let now = new core.DateTime.now();
      for (let schedule of this[_schedules]) {
        schedule.tick(now);
      }
      this[_scheduleNextTick]();
    }
  };
  (cron._Cron.new = function() {
    this[_closed] = false;
    this[_timer] = null;
    this[_schedules] = T.JSArrayOf_ScheduledTask().of([]);
    ;
  }).prototype = cron._Cron.prototype;
  dart.addTypeTests(cron._Cron);
  dart.addTypeCaches(cron._Cron);
  cron._Cron[dart.implements] = () => [cron.Cron];
  dart.setMethodSignature(cron._Cron, () => ({
    __proto__: dart.getMethods(cron._Cron.__proto__),
    schedule: dart.fnType(cron.ScheduledTask, [cron.Schedule, dart.fnType(dart.dynamic, [])]),
    close: dart.fnType(async.Future, []),
    [_scheduleNextTick]: dart.fnType(dart.void, []),
    [_tick]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cron._Cron, I[0]);
  dart.setFieldSignature(cron._Cron, () => ({
    __proto__: dart.getFields(cron._Cron.__proto__),
    [_closed]: dart.fieldType(core.bool),
    [_timer]: dart.fieldType(dart.nullable(async.Timer)),
    [_schedules]: dart.finalFieldType(core.List$(cron._ScheduledTask))
  }));
  var _running = dart.privateName(cron, "_running");
  var _overrun = dart.privateName(cron, "_overrun");
  var _task$ = dart.privateName(cron, "_task");
  var _run = dart.privateName(cron, "_run");
  cron._ScheduledTask = class _ScheduledTask extends core.Object {
    tick(now) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      if (now == null) dart.nullFailed(I[1], 178, 22, "now");
      if (dart.test(this[_closed])) return;
      if ((t1 = this.schedule.seconds, t1 == null ? null : t1[$contains](now.second)) === false) return;
      if ((t1$ = this.schedule.minutes, t1$ == null ? null : t1$[$contains](now.minute)) === false) return;
      if ((t1$0 = this.schedule.hours, t1$0 == null ? null : t1$0[$contains](now.hour)) === false) return;
      if ((t1$1 = this.schedule.days, t1$1 == null ? null : t1$1[$contains](now.day)) === false) return;
      if ((t1$2 = this.schedule.months, t1$2 == null ? null : t1$2[$contains](now.month)) === false) return;
      if ((t1$3 = this.schedule.weekdays, t1$3 == null ? null : t1$3[$contains](now.weekday)) === false) return;
      this[_run]();
    }
    [_run]() {
      if (dart.test(this[_closed])) return;
      if (this[_running] != null) {
        this[_overrun] = true;
        return;
      }
      this[_running] = async.Future.microtask(dart.fn(() => this[_task$](), T.VoidToFutureOr())).then(dart.dynamic, dart.fn(_ => null, T.dynamicToNull()), {onError: dart.fn(_ => null, T.dynamicToNull())});
      dart.nullCheck(this[_running]).whenComplete(dart.fn(() => {
        this[_running] = null;
        if (dart.test(this[_overrun])) {
          this[_overrun] = false;
          this[_run]();
        }
      }, T.VoidToNull()));
    }
    cancel() {
      return async.async(dart.dynamic, (function* cancel() {
        this[_closed] = true;
        this[_overrun] = false;
        if (this[_running] != null) {
          yield this[_running];
        }
      }).bind(this));
    }
  };
  (cron._ScheduledTask.new = function(schedule, _task) {
    if (schedule == null) dart.nullFailed(I[1], 176, 23, "schedule");
    if (_task == null) dart.nullFailed(I[1], 176, 38, "_task");
    this[_closed] = false;
    this[_running] = null;
    this[_overrun] = false;
    this.schedule = schedule;
    this[_task$] = _task;
    ;
  }).prototype = cron._ScheduledTask.prototype;
  dart.addTypeTests(cron._ScheduledTask);
  dart.addTypeCaches(cron._ScheduledTask);
  cron._ScheduledTask[dart.implements] = () => [cron.ScheduledTask];
  dart.setMethodSignature(cron._ScheduledTask, () => ({
    __proto__: dart.getMethods(cron._ScheduledTask.__proto__),
    tick: dart.fnType(dart.void, [core.DateTime]),
    [_run]: dart.fnType(dart.void, []),
    cancel: dart.fnType(async.Future, [])
  }));
  dart.setLibraryUri(cron._ScheduledTask, I[0]);
  dart.setFieldSignature(cron._ScheduledTask, () => ({
    __proto__: dart.getFields(cron._ScheduledTask.__proto__),
    schedule: dart.finalFieldType(cron.Schedule),
    [_task$]: dart.finalFieldType(dart.fnType(dart.dynamic, [])),
    [_closed]: dart.fieldType(core.bool),
    [_running]: dart.fieldType(dart.nullable(async.Future)),
    [_overrun]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(cron, {
    /*cron._millisecondsPerSecond*/get _millisecondsPerSecond() {
      return 1000;
    }
  }, false);
  dart.trackLibraries("packages/cron/cron.dart", {
    "package:cron/cron.dart": cron
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["cron.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/cron/cron.dart.lib.js"}');
  // Exports:
  return {
    cron: cron
  };
}));

//# sourceMappingURL=cron.dart.lib.js.map
